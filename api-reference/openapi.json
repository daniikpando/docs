{
  "components": {
    "responses": {},
    "schemas": {
      "MIDSchema": {
        "minProperties": 2,
        "properties": {
          "mids": {
            "items": {
              "description": "Merchant ID",
              "example": "012345678",
              "type": "string",
              "x-struct": null,
              "x-validate": null
            },
            "minItems": 1,
            "nullable": false,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "operation": {
            "description": "If `forbid_mids`, payments for the listed MIDs are not authorized. If `allow_mids`, payments are authorized only for the listed MIDs.",
            "enum": ["allow_mids", "forbid_mids"],
            "example": "allow_mids",
            "nullable": false,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "type": {
            "default": "mid",
            "description": "String field",
            "example": "mid",
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": ["type"],
        "title": "MIDSchema",
        "type": "object",
        "x-struct": "Elixir.MonoBankingAPI.Schemas.SpendingControls.Rules.MIDSchema",
        "x-validate": null
      },
      "Card": {
        "allOf": [
          {
            "properties": {
              "account_id": {
                "description": "Account ID",
                "example": "acc_5tgliBmzjZ6mpQPRbQjfKj",
                "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                "type": "string",
                "x-context": "account",
                "x-struct": null,
                "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
              },
              "cardholder": {
                "description": "Represents the cardholder information",
                "properties": {
                  "address": {
                    "description": "Address schema",
                    "properties": {
                      "city": {
                        "description": "City, district, suburb, town, or village",
                        "example": "Chapinero",
                        "maxLength": 100,
                        "pattern": "^[A-Za-zÀ-ÿ0-9 -.]+$",
                        "type": "string",
                        "x-struct": null,
                        "x-validate": null
                      },
                      "country": {
                        "description": "Country code ISO 3166-1 alpha-2",
                        "example": "CO",
                        "pattern": "^[A-Z]{2}$",
                        "type": "string",
                        "x-struct": null,
                        "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.CountryCodeSchema"
                      },
                      "extra": {
                        "description": "Additional information",
                        "example": "Location near the southeast corner in front of the ABC mall. deliver to the security guard pedro pruebas",
                        "maxLength": 144,
                        "nullable": true,
                        "pattern": "^[A-Za-zÀ-ÿ0-9 -.]+$",
                        "type": "string",
                        "x-struct": null,
                        "x-validate": null
                      },
                      "line_1": {
                        "description": "Street, P.O. Box, or address information",
                        "example": "Calle 97 # 15-24",
                        "format": "address_line_1",
                        "maxLength": 100,
                        "pattern": "^[a-zA-Z0-9 -.°'#:,]+$",
                        "type": "string",
                        "x-struct": null,
                        "x-validate": null
                      },
                      "line_2": {
                        "description": "Home, apartment, room, suite, office, or building",
                        "example": "Apto. 208",
                        "maxLength": 100,
                        "nullable": true,
                        "pattern": "^[A-Za-zÀ-ÿ0-9 -.]+$",
                        "type": "string",
                        "x-struct": null,
                        "x-validate": null
                      },
                      "state": {
                        "description": "State, province, region, or county",
                        "example": "Bogota D.C",
                        "maxLength": 100,
                        "pattern": "^[A-Za-zÀ-ÿ0-9 -.]+$",
                        "type": "string",
                        "x-struct": null,
                        "x-validate": null
                      },
                      "zip_code": {
                        "example": "110221",
                        "maxLength": 10,
                        "pattern": "^[A-Za-zÀ-ÿ0-9 -.]+$",
                        "type": "string",
                        "x-struct": null,
                        "x-validate": null
                      }
                    },
                    "required": [
                      "country",
                      "state",
                      "city",
                      "line_1",
                      "zip_code"
                    ],
                    "title": "Address",
                    "type": "object",
                    "x-struct": null,
                    "x-validate": null
                  },
                  "birthdate": {
                    "description": "Cardholder birthdate",
                    "example": "1941-09-09",
                    "format": "date",
                    "type": "string",
                    "writeOnly": true,
                    "x-struct": null,
                    "x-validate": null
                  },
                  "document": {
                    "description": "Person document",
                    "properties": {
                      "country_code": {
                        "description": "Country code ISO 3166-1 alpha-2",
                        "example": "CO",
                        "pattern": "^[A-Z]{2}$",
                        "type": "string",
                        "x-struct": null,
                        "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.CountryCodeSchema"
                      },
                      "number": {
                        "description": "Document number",
                        "example": "1023711432",
                        "minLength": 5,
                        "type": "string",
                        "x-struct": null,
                        "x-validate": null
                      },
                      "person_type": {
                        "default": "natural",
                        "description": "  The person types can be:\n  - natural\n",
                        "enum": ["natural"],
                        "example": "natural",
                        "title": "PersonTypes",
                        "type": "string",
                        "x-struct": null,
                        "x-validate": null
                      },
                      "type": {
                        "default": "CC",
                        "description": "  The document types are represented by codes and can be:\n\n  For Colombia:\n  - CC\n  - CE\n  - PPT\n\n  For other countries:\n  - PASS\n",
                        "enum": ["CC", "CE", "PASS", "PPT"],
                        "example": "CC",
                        "title": "DocumentTypes",
                        "type": "string",
                        "x-struct": null,
                        "x-validate": null
                      }
                    },
                    "required": ["type", "number"],
                    "type": "object",
                    "x-struct": null,
                    "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.PersonDocumentSchema"
                  },
                  "email": {
                    "description": "Email",
                    "example": "someone@gmail.com",
                    "format": "email",
                    "pattern": "^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+){1,2}$",
                    "type": "string",
                    "x-struct": null,
                    "x-validate": null
                  },
                  "first_name": {
                    "description": "String field",
                    "example": "Dennis",
                    "maxLength": 64,
                    "minLength": 2,
                    "type": "string",
                    "x-struct": null,
                    "x-validate": null
                  },
                  "id": {
                    "description": "Cardholder ID",
                    "example": "carh_5tgliBmzjZ6mpQPRbQjfKj",
                    "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                    "readOnly": true,
                    "type": "string",
                    "x-context": "cardholder",
                    "x-struct": null,
                    "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
                  },
                  "last_name": {
                    "description": "String field",
                    "example": "Alistair",
                    "maxLength": 64,
                    "minLength": 2,
                    "type": "string",
                    "x-struct": null,
                    "x-validate": null
                  },
                  "middle_name": {
                    "description": "String field",
                    "example": "Mac",
                    "maxLength": 64,
                    "minLength": 2,
                    "nullable": true,
                    "type": "string",
                    "x-struct": null,
                    "x-validate": null
                  },
                  "nationality": {
                    "description": "Country code ISO 3166-1 alpha-2",
                    "example": "CO",
                    "pattern": "^[A-Z]{2}$",
                    "type": "string",
                    "x-struct": null,
                    "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.CountryCodeSchema"
                  },
                  "phone_number": {
                    "description": "Phone number",
                    "example": "+573000000000",
                    "pattern": "^\\+[1-9]\\d{1,14}$",
                    "type": "string",
                    "x-region": "co",
                    "x-struct": null,
                    "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.PhoneSchema"
                  },
                  "second_last_name": {
                    "description": "String field",
                    "example": "Ritchie",
                    "maxLength": 64,
                    "minLength": 2,
                    "nullable": true,
                    "type": "string",
                    "x-struct": null,
                    "x-validate": null
                  }
                },
                "required": [
                  "email",
                  "first_name",
                  "last_name",
                  "document",
                  "phone_number",
                  "birthdate",
                  "nationality",
                  "address"
                ],
                "title": "Cardholder",
                "type": "object",
                "writeOnly": true,
                "x-struct": null,
                "x-validate": null
              },
              "cardholder_id": {
                "description": "Cardholder ID",
                "example": "carh_5tgliBmzjZ6mpQPRbQjfKj",
                "nullable": true,
                "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                "type": "string",
                "x-context": "cardholder",
                "x-struct": null,
                "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
              },
              "configuration_group_id": {
                "description": "Card configuration group ID.\n\nBy default, if the configuration group ID is not specified,\nit is taken from the client's default configuration.\n",
                "example": "ccg_5tgliBmzjZ6mpQPRbQjfKj",
                "nullable": true,
                "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                "type": "string",
                "x-context": "card_config_group",
                "x-struct": null,
                "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
              },
              "id": {
                "description": "Card ID",
                "example": "car_5tgliBmzjZ6mpQPRbQjfKj",
                "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                "readOnly": true,
                "type": "string",
                "x-context": "card",
                "x-struct": null,
                "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
              },
              "last_four": {
                "description": "Last four digits of the card",
                "example": "0745",
                "readOnly": true,
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "nickname": {
                "description": "Card nickname",
                "example": "Travel card",
                "nullable": true,
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "spending_controls": {
                "description": "Spending controls relate to the card",
                "nullable": true,
                "properties": {
                  "card_target": {
                    "description": "Spending control ID direct assigned to the card",
                    "example": "spc_5tgliBmzjZ6mpQPRbQjfKj",
                    "nullable": true,
                    "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                    "type": "string",
                    "x-context": "spending_control",
                    "x-struct": null,
                    "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
                  },
                  "configuration_group_target": {
                    "description": "Spending control ID assigned to the card's configuration group",
                    "example": "spc_5tgliBmzjZ6mpQPRbQjfKj",
                    "nullable": true,
                    "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                    "readOnly": true,
                    "type": "string",
                    "x-context": "spending_control",
                    "x-struct": null,
                    "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
                  }
                },
                "type": "object",
                "x-struct": null,
                "x-validate": null
              },
              "state": {
                "description": "State of the card",
                "enum": ["active", "frozen", "canceled", "created"],
                "example": "active",
                "readOnly": true,
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "type": {
                "description": "Specifies whether the card is virtual or plastic.\n- \"virtual\": The card is exclusively digital; Credentials numbers are accessed digitally through an online HTML iframe\n- \"plastic\": Refers to a physical card that contains the specified credentials numbers on it.\nBoth types of cards can be used to make online (e-commerce) or card present (POS) purchases, and these can be used in Apple Pay or Google Wallet.\nThis is a paid feature. Please check with your sales representative.\n",
                "enum": ["virtual", "plastic"],
                "example": "virtual",
                "readOnly": true,
                "type": "string",
                "x-struct": null,
                "x-validate": null
              }
            },
            "required": ["account_id"],
            "type": "object",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Cards.CommonCardSchema"
          },
          {
            "properties": {
              "initial_balance": {
                "description": "The current amount available or the balance",
                "nullable": true,
                "properties": {
                  "amount": {
                    "description": "Amount of money in `cents` with the format is int64. Thus, you\nsend an integer \"10.000.000\", we will interpret it as \"100.000,00\"\n",
                    "example": 100000000,
                    "format": "int64",
                    "maximum": 100000000000000,
                    "minimum": 0,
                    "type": "integer",
                    "x-struct": null,
                    "x-validate": null
                  },
                  "currency": {
                    "default": "COP",
                    "description": "Currency of money",
                    "enum": ["COP"],
                    "example": "COP",
                    "type": "string",
                    "x-struct": null,
                    "x-validate": null
                  }
                },
                "required": ["amount", "currency"],
                "type": "object",
                "writeOnly": true,
                "x-struct": null,
                "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MoneySchema"
              }
            },
            "type": "object",
            "x-struct": null,
            "x-validate": null
          }
        ],
        "title": "Card",
        "x-struct": "Elixir.MonoBankingAPI.Schemas.Cards.CardSchema",
        "x-validate": null
      },
      "AccountTransaction": {
        "discriminator": {
          "mapping": {
            "card_presentment_payment": "#/components/schemas/CardPresentmentPaymentDetail",
            "card_transaction": "#/components/schemas/CardTransactionOriginDetail",
            "subaccount_operation": "#/components/schemas/SubaccountOperationOriginDetail",
            "synced_bank_transaction": "#/components/schemas/SyncedBankTransactionDetail",
            "unknown": "#/components/schemas/UnknownOrigin"
          },
          "propertyName": "origin"
        },
        "oneOf": [
          { "$ref": "#/components/schemas/CardTransactionOriginDetail" },
          { "$ref": "#/components/schemas/CardPresentmentPaymentDetail" },
          { "$ref": "#/components/schemas/SubaccountOperationOriginDetail" },
          { "$ref": "#/components/schemas/SyncedBankTransactionDetail" },
          { "$ref": "#/components/schemas/UnknownOrigin" }
        ],
        "title": "AccountTransaction",
        "type": "object",
        "x-struct": "Elixir.MonoBankingAPI.Schemas.Ledger.AccountTransactions.MainSchema",
        "x-validate": null
      },
      "ListCardBalanceOperation": {
        "description": "It contains a set of card balance operations. It also contains pagination information",
        "properties": {
          "balance_operations": {
            "description": "It contains a list with card balance operations",
            "items": {
              "description": "Represents the card balance operations like topup or withdrawal",
              "properties": {
                "amount": {
                  "description": "deposit balance amount",
                  "properties": {
                    "amount": {
                      "description": "Amount of money in `cents` with the format is int64. Thus, you\nsend an integer \"10.000.000\", we will interpret it as \"100.000,00\"\n",
                      "example": 100000000,
                      "format": "int64",
                      "maximum": 100000000000000,
                      "minimum": -100000000000000,
                      "type": "integer",
                      "x-struct": null,
                      "x-validate": null
                    },
                    "currency": {
                      "default": "COP",
                      "description": "Currency of money",
                      "enum": ["COP"],
                      "example": "COP",
                      "type": "string",
                      "x-struct": null,
                      "x-validate": null
                    }
                  },
                  "required": ["amount", "currency"],
                  "type": "object",
                  "x-struct": null,
                  "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MoneySchema"
                },
                "card_id": {
                  "description": "Indicates the format for resource's ID",
                  "example": "car_5tgliBmzjZ6mpQPRbQjfKj",
                  "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                  "readOnly": true,
                  "type": "string",
                  "x-context": "card",
                  "x-struct": null,
                  "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
                },
                "description": {
                  "description": "String field",
                  "example": "Topup for suscripcion",
                  "nullable": true,
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                },
                "entity_id": {
                  "description": "String field",
                  "example": "Entity ID used for idempotency requests",
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                },
                "id": {
                  "description": "Indicates the format for resource's ID",
                  "example": "cbo_5tgliBmzjZ6mpQPRbQjfKj",
                  "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                  "readOnly": true,
                  "type": "string",
                  "x-context": "card_balance_operation",
                  "x-struct": null,
                  "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
                },
                "operation": {
                  "description": "  there are two operation types:\n  - topup: Increments the card balance.\n  - withdrawal: Reduces the card balance.\n",
                  "enum": ["topup", "withdrawal"],
                  "example": "topup",
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                },
                "performed_at": {
                  "description": "Date and time when the card balance operation was performed",
                  "example": "2022-01-01T01:00:00Z",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string",
                  "x-struct": null,
                  "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.DateTimeSchema",
                  "x-validation": {}
                }
              },
              "required": ["amount", "operation"],
              "title": "CardBalanceOperation",
              "type": "object",
              "x-struct": null,
              "x-validate": null
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "card_id": {
            "description": "Card ID",
            "example": "car_5tgliBmzjZ6mpQPRbQjfKj",
            "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
            "type": "string",
            "x-context": "card",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
          },
          "pagination": {
            "description": "Pagination schema",
            "properties": {
              "page_number": {
                "description": "Current page number",
                "example": 1,
                "type": "integer",
                "x-struct": null,
                "x-validate": null
              },
              "page_size": {
                "description": "Amount of items by page",
                "example": 10,
                "type": "integer",
                "x-struct": null,
                "x-validate": null
              },
              "total_items": {
                "description": "Total of items by the resource",
                "example": 100,
                "type": "integer",
                "x-struct": null,
                "x-validate": null
              },
              "total_pages": {
                "description": "Total pages by the resource",
                "example": 10,
                "type": "integer",
                "x-struct": null,
                "x-validate": null
              }
            },
            "readOnly": true,
            "title": "Pagination",
            "type": "object",
            "x-struct": "Elixir.MonoBankingAPI.Schemas.Components.PaginationSchema",
            "x-validate": null
          }
        },
        "readOnly": true,
        "title": "ListCardBalanceOperation",
        "type": "object",
        "x-struct": "Elixir.MonoBankingAPI.Schemas.Cards.ListCardBalanceOperationSchema",
        "x-validate": null
      },
      "PayoutCOMonoTurbo": {
        "allOf": [
          {
            "properties": {
              "method_params": {
                "properties": {
                  "fallback_to_ach": {
                    "default": false,
                    "description": "Indicates whether the ACH method should be used as a fallback to process\nthe payout if the payout is declined when using the turbo method.\n",
                    "example": true,
                    "type": "boolean",
                    "x-struct": null,
                    "x-validate": null
                  }
                },
                "required": ["fallback_to_ach"],
                "type": "object",
                "x-struct": null,
                "x-validate": null
              },
              "target": {
                "allOf": [
                  {
                    "properties": {
                      "country": {
                        "description": "An ISO 3166-1 alpha-2 country code representing the country where the target amount will be\ncredited. The method and currency must support it.\n",
                        "example": "CO",
                        "pattern": "^[A-Z]{2}$",
                        "type": "string",
                        "x-struct": null,
                        "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.CountryCodeSchema"
                      },
                      "currency": {
                        "description": "An ISO 4217 currency code representing the currency in which the amount will be credited.\nThe method and country must support it.\n",
                        "enum": ["COP", "USD", "MXN", "CLP", "BRL", "PEN"],
                        "example": "COP",
                        "type": "string",
                        "x-struct": null,
                        "x-validate": null
                      },
                      "kind": {
                        "description": "String field",
                        "enum": ["co_bank_account"],
                        "example": "co_bank_account",
                        "type": "string",
                        "x-struct": null,
                        "x-validate": null
                      }
                    },
                    "required": ["kind", "country", "currency"],
                    "title": "CommonPayoutTarget",
                    "type": "object",
                    "x-struct": null,
                    "x-validate": null
                  },
                  { "$ref": "#/components/schemas/COACHBankAccount" }
                ],
                "type": "object",
                "x-struct": null,
                "x-validate": null
              }
            },
            "required": ["target", "method_params"],
            "type": "object",
            "x-struct": null,
            "x-validate": null
          },
          {
            "properties": {
              "account_id": {
                "description": "A core account identifier",
                "example": "lacc_5tgliBmzjZ6mpQPRbQjfKj",
                "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                "type": "string",
                "x-context": "ledger_account",
                "x-struct": null,
                "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
              },
              "calculated_fees": {
                "additionalProperties": {
                  "description": "A JSON of fees that were calculated for the payout.\nthe key will be the fee type:\n\n- `bank_transfer_fee`\n- `bank_transfer_gmf`\n",
                  "properties": {
                    "amount": {
                      "description": "Amount of the fee",
                      "properties": {
                        "amount": {
                          "description": "Amount of money in `cents` with the format is int64. Thus, you\nsend an integer \"10.000.000\", we will interpret it as \"100.000,00\"\n",
                          "example": 100000000,
                          "format": "int64",
                          "maximum": 100000000000000,
                          "minimum": -100000000000000,
                          "type": "integer",
                          "x-struct": null,
                          "x-validate": null
                        },
                        "currency": {
                          "default": "COP",
                          "description": "Currency of money",
                          "enum": ["COP"],
                          "example": "COP",
                          "type": "string",
                          "x-struct": null,
                          "x-validate": null
                        }
                      },
                      "required": ["amount", "currency"],
                      "type": "object",
                      "x-struct": null,
                      "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MoneySchema"
                    },
                    "id": {
                      "description": "Indicates the format for resource's ID",
                      "example": "fee_5tgliBmzjZ6mpQPRbQjfKj",
                      "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                      "readOnly": true,
                      "type": "string",
                      "x-context": "fee",
                      "x-struct": null,
                      "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
                    }
                  },
                  "type": "object",
                  "x-struct": null,
                  "x-validate": null
                },
                "example": {
                  "bank_transfer_fee": {
                    "amount": { "amount": 100000000, "currency": "COP" },
                    "id": "fee_5tgliBmzjZ6mpQPRbQjfKj"
                  },
                  "bank_transfer_gmf": {
                    "amount": { "amount": 100000000, "currency": "COP" },
                    "id": "fee_5tgliBmzjZ6mpQPRbQjfKj"
                  }
                },
                "readOnly": true,
                "type": "object",
                "x-struct": null,
                "x-validate": null
              },
              "description": {
                "description": "A description for the payout",
                "example": "string",
                "nullable": true,
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "external_id": {
                "description": "A unique identifier to handle idempotency. If the identifier already exists,\nthe payout creation is skipped and the HTTP code response is 200. If not,\na new payout is created and the HTTP code response is 201.\n",
                "example": "1234859",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "id": {
                "description": "A payout identifier",
                "example": "cpout_5tgliBmzjZ6mpQPRbQjfKj",
                "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                "readOnly": true,
                "type": "string",
                "x-context": "payout",
                "x-struct": null,
                "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
              },
              "metadata": {
                "additionalProperties": true,
                "description": "A tenant-managed flat map for providing additional data about the payout. The values are stored and displayed as strings, and the provided information will be returned as-is in the payout details.\n",
                "example": { "id": 3, "reference": 123 },
                "nullable": true,
                "type": "object",
                "x-struct": null,
                "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MetadataSchema"
              },
              "method": {
                "description": "Specifies the way or process used to execute the payout. Each method is only available\nfor certain countries and currencies, and the processing time for completing a payout\nwill vary depending on the selected method.\n",
                "enum": ["co_ach", "co_transfiya", "co_mono_turbo"],
                "example": "co_mono_turbo",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "method_params": {
                "nullable": true,
                "type": "object",
                "x-struct": null,
                "x-validate": null
              },
              "reference": {
                "description": "A reference for the payout",
                "example": "string",
                "nullable": true,
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "source_amount": {
                "description": "The amount to be debited from the source account, specified in the same currency as\nthe source account, <b>This amount include the fees if were configured</b>. If this field\nis null, its value can be automatically calculated from the target amount.\n",
                "nullable": true,
                "properties": {
                  "amount": {
                    "description": "Amount of money in `cents` with the format is int64. Thus, you\nsend an integer \"10.000.000\", we will interpret it as \"100.000,00\"\n",
                    "example": 100000000,
                    "format": "int64",
                    "maximum": 100000000000000,
                    "minimum": 100,
                    "type": "integer",
                    "x-struct": null,
                    "x-validate": null
                  },
                  "currency": {
                    "default": "COP",
                    "description": "Currency of money",
                    "enum": ["COP"],
                    "example": "COP",
                    "type": "string",
                    "x-struct": null,
                    "x-validate": null
                  }
                },
                "required": ["amount", "currency"],
                "type": "object",
                "x-struct": null,
                "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MoneySchema"
              },
              "target_amount": {
                "description": "The amount to be credited to the target account, specified in the same currency as\nthe target account. If this field is null, its value can be automatically calculated\nfrom the source amount.\n",
                "nullable": true,
                "properties": {
                  "amount": {
                    "description": "Amount of money in `cents` with the format is int64. Thus, you\nsend an integer \"10.000.000\", we will interpret it as \"100.000,00\"\n",
                    "example": 100000000,
                    "format": "int64",
                    "maximum": 100000000000000,
                    "minimum": 100,
                    "type": "integer",
                    "x-struct": null,
                    "x-validate": null
                  },
                  "currency": {
                    "default": "COP",
                    "description": "Currency of money",
                    "enum": ["COP"],
                    "example": "COP",
                    "type": "string",
                    "x-struct": null,
                    "x-validate": null
                  }
                },
                "required": ["amount", "currency"],
                "type": "object",
                "x-struct": null,
                "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MoneySchema"
              }
            },
            "required": ["external_id", "account_id", "method"],
            "title": "CommonPayoutSchema",
            "type": "object",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Core.Payouts.CommonSchema"
          }
        ],
        "title": "PayoutCOMonoTurbo",
        "type": "object",
        "x-struct": null,
        "x-validate": null
      },
      "WithdrawalVelocitySchema": {
        "minProperties": 2,
        "properties": {
          "daily": {
            "description": "Limit amount for daily withdrawal spending",
            "properties": {
              "amount": {
                "description": "Amount of money in `cents` with the format is int64. Thus, you\nsend an integer \"10.000.000\", we will interpret it as \"100.000,00\"\n",
                "example": 100000000,
                "format": "int64",
                "maximum": 100000000000000,
                "minimum": -100000000000000,
                "type": "integer",
                "x-struct": null,
                "x-validate": null
              },
              "currency": {
                "default": "COP",
                "description": "Currency of money",
                "enum": ["COP", "USD", "MXN", "CLP", "BRL", "PEN"],
                "example": "COP",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              }
            },
            "required": ["amount", "currency"],
            "type": "object",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MoneySchema"
          },
          "monthly": {
            "description": "Limit amount for monthly withdrawal spending",
            "properties": {
              "amount": {
                "description": "Amount of money in `cents` with the format is int64. Thus, you\nsend an integer \"10.000.000\", we will interpret it as \"100.000,00\"\n",
                "example": 100000000,
                "format": "int64",
                "maximum": 100000000000000,
                "minimum": -100000000000000,
                "type": "integer",
                "x-struct": null,
                "x-validate": null
              },
              "currency": {
                "default": "COP",
                "description": "Currency of money",
                "enum": ["COP", "USD", "MXN", "CLP", "BRL", "PEN"],
                "example": "COP",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              }
            },
            "required": ["amount", "currency"],
            "type": "object",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MoneySchema"
          },
          "type": {
            "default": "withdrawal_velocity",
            "description": "String field",
            "example": "withdrawal_velocity",
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": ["type"],
        "title": "WithdrawalVelocitySchema",
        "type": "object",
        "x-struct": "Elixir.MonoBankingAPI.Schemas.SpendingControls.Rules.WithdrawalVelocitySchema",
        "x-validate": null
      },
      "Banks": {
        "description": "This schema represents banks",
        "properties": {
          "banks": {
            "description": "It contains a list of banks",
            "items": {
              "properties": {
                "code": {
                  "description": "Returns the bank code.",
                  "example": "007",
                  "readOnly": true,
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                },
                "id": {
                  "description": "Indicates the format for resource's ID",
                  "example": "bank_5tgliBmzjZ6mpQPRbQjfKj",
                  "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                  "readOnly": true,
                  "type": "string",
                  "x-context": "bank",
                  "x-struct": null,
                  "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
                },
                "name": {
                  "description": "Returns the bank name.",
                  "example": "BANCOLOMBIA",
                  "readOnly": true,
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                },
                "supported_account_types": {
                  "description": "It contains a list of supported account types by a bank",
                  "items": {
                    "description": "Returns the supported account types by the bank.\n",
                    "enum": [
                      "savings_account",
                      "checking_account",
                      "electronic_deposit"
                    ],
                    "example": "savings_account",
                    "readOnly": true,
                    "type": "string",
                    "x-struct": null,
                    "x-validate": null
                  },
                  "type": "array",
                  "x-struct": null,
                  "x-validate": null
                },
                "supports_ach": {
                  "default": false,
                  "description": "Informs if bank supports `ach` transfers",
                  "example": false,
                  "readOnly": true,
                  "type": "boolean",
                  "x-struct": null,
                  "x-validate": null
                },
                "supports_turbo": {
                  "default": false,
                  "description": "Informs if bank supports `turbo` transfers",
                  "example": false,
                  "readOnly": true,
                  "type": "boolean",
                  "x-struct": null,
                  "x-validate": null
                }
              },
              "type": "object",
              "x-struct": null,
              "x-validate": null
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "kind": {
            "description": "The value of this field will always be `transfers`",
            "example": "transfers",
            "readOnly": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "title": "Banks",
        "type": "object",
        "x-struct": "Elixir.MonoBankingAPI.Schemas.Banks.BankSchema",
        "x-validate": null
      },
      "ApplePayTokenResponse": {
        "description": "Response for Apple Pay token provisioning",
        "properties": {
          "activation_data": {
            "description": "Activation data for Apple Pay",
            "readOnly": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "encrypted_pass_data": {
            "description": "Encrypted pass data for Apple Pay",
            "readOnly": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "ephemeral_public_key": {
            "description": "Ephemeral public key for Apple Pay",
            "readOnly": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "title": "ApplePayTokenResponse",
        "type": "object",
        "x-struct": null,
        "x-validate": null
      },
      "LedgerAccountUpdateState": {
        "description": "This entity is used to update the state of a ledger account, it could be transitioned to `active` or `blocked`",
        "properties": {
          "detail": {
            "description": "It provides a textual reason why the account is blocked in case of the state_reason value is `other`.",
            "example": "breach of terms",
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "reason": {
            "description": "It provides the reason why the account could be blocked. It is required when the account is transitioned to being blocked.\n",
            "enum": ["temporary", "user_request", "unused", "fraud", "other"],
            "example": "unused",
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "state": {
            "description": "State to update the account, it can be one of the following values:\n- active: it's enabled to perform operations with the account balance.\n- blocked: it's disabled by a tenant and couldn't perform any operation with the account balance.\n",
            "enum": ["active", "blocked"],
            "example": "blocked",
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": ["state"],
        "title": "LedgerAccountUpdateState",
        "type": "object",
        "x-struct": "Elixir.MonoBankingAPI.Schemas.Ledger.AccountUpdateStateSchema",
        "x-validate": null
      },
      "TransferPayee": {
        "description": "Sets the payee data, which will be used to specify the details about the destination bank account",
        "properties": {
          "bank_account": {
            "description": "Sets the destination bank account information, which will be contain the bank, account type and the account number to be transferred the money.\n",
            "nullable": true,
            "properties": {
              "bank_code": {
                "description": "Sets the bank code, which is used to identify the bank where the money will be transferred.\n\nYou can find the bank code by using the GET banks endpoint and look the code field.\n",
                "nullable": true,
                "type": "string",
                "x-return-bank": true,
                "x-struct": null,
                "x-validate": "Elixir.MonoBankingAPI.Schemas.BankTransfers.BankCodeSchema"
              },
              "number": {
                "description": "Sets the payee's account number\n",
                "example": "123456789",
                "maxLength": 17,
                "minLength": 5,
                "nullable": true,
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "type": {
                "description": "Sets the payee's account type\n",
                "enum": [
                  "savings_account",
                  "checking_account",
                  "electronic_deposit"
                ],
                "example": "savings_account",
                "nullable": true,
                "type": "string",
                "x-struct": null,
                "x-validate": null
              }
            },
            "title": "PayeeBankAccountSchema",
            "type": "object",
            "x-struct": "Elixir.MonoBankingAPI.Schemas.BankTransfers.PayeeBankAccountSchema",
            "x-validate": "Elixir.MonoBankingAPI.Schemas.BankTransfers.PayeeBankAccountSchema"
          },
          "document_number": {
            "description": "Sets the payee's document number",
            "example": "string",
            "maxLength": 15,
            "minLength": 5,
            "nullable": false,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "document_type": {
            "default": "CC",
            "description": "  The document types are represented by codes and can be:\n\n  For Colombia:\n  - CC\n  - TI\n  - NUIP\n  - TE\n  - CE\n  - NIT\n  - PASS\n  - PEP\n  - PPT\n  - FDO\n  - RC\n\n  For other countries:\n  - NID (National Identification)\n  - DL (Driver License)\n  - PASS\n",
            "enum": [
              "CC",
              "TI",
              "NUIP",
              "TE",
              "CE",
              "NIT",
              "PASS",
              "PEP",
              "PPT",
              "FDO",
              "RC",
              "DL",
              "NID"
            ],
            "example": "CC",
            "nullable": false,
            "title": "DocumentTypes",
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "email": {
            "description": "Sets the payee's email",
            "example": "someone@gmail.com",
            "format": "email",
            "nullable": true,
            "pattern": "^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+){1,2}$",
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "name": {
            "description": "Sets the payee's full name",
            "example": "string",
            "nullable": false,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "phone_number": {
            "description": "Sets the payee's phone number",
            "example": "+573001000000",
            "nullable": true,
            "pattern": "^\\+[1-9]\\d{1,14}$",
            "type": "string",
            "x-region": "co",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.PhoneSchema"
          }
        },
        "required": ["name", "document_type", "document_number"],
        "title": "TransferPayee",
        "type": "object",
        "x-struct": "Elixir.MonoBankingAPI.Schemas.BankTransfers.TransferPayeeSchema",
        "x-validate": "Elixir.MonoBankingAPI.Schemas.BankTransfers.TransferPayeeSchema"
      },
      "PSEBanks": {
        "description": "This schema represents PSE banks",
        "properties": {
          "banks": {
            "description": "It contains a list of banks",
            "items": {
              "properties": {
                "code": {
                  "description": "Returns the PSE bank code.",
                  "example": "1051",
                  "readOnly": true,
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                },
                "name": {
                  "description": "Returns the PSE bank name.",
                  "example": "BANCO DAVIVIENDA",
                  "readOnly": true,
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                }
              },
              "type": "object",
              "x-struct": null,
              "x-validate": null
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "kind": {
            "description": "The value of this field will always be `pse`",
            "example": "pse",
            "readOnly": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "title": "PSEBanks",
        "type": "object",
        "x-struct": "Elixir.MonoBankingAPI.Schemas.Banks.PSEBankSchema",
        "x-validate": null
      },
      "LedgerAccountBalance": {
        "description": "This entity represents the balance information for a specific account",
        "properties": {
          "available": {
            "description": "The available balance represents the amount of funds that can be freely used for transactions from the account.\n",
            "properties": {
              "amount": {
                "description": "Amount of money in `cents` with the format is int64. Thus, you\nsend an integer \"10.000.000\", we will interpret it as \"100.000,00\"\n",
                "example": 100000000,
                "format": "int64",
                "maximum": 100000000000000,
                "minimum": -100000000000000,
                "type": "integer",
                "x-struct": null,
                "x-validate": null
              },
              "currency": {
                "default": "COP",
                "description": "Currency of money",
                "enum": ["COP", "USD", "MXN", "CLP", "BRL", "PEN"],
                "example": "COP",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              }
            },
            "readOnly": true,
            "required": ["amount", "currency"],
            "type": "object",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MoneySchema"
          },
          "pending": {
            "description": "The pending balance represents the amount of funds that are temporarily held or reserved in the account, due to pending transactions or authorizations.\n",
            "properties": {
              "amount": {
                "description": "Amount of money in `cents` with the format is int64. Thus, you\nsend an integer \"10.000.000\", we will interpret it as \"100.000,00\"\n",
                "example": 100000000,
                "format": "int64",
                "maximum": 100000000000000,
                "minimum": -100000000000000,
                "type": "integer",
                "x-struct": null,
                "x-validate": null
              },
              "currency": {
                "default": "COP",
                "description": "Currency of money",
                "enum": ["COP", "USD", "MXN", "CLP", "BRL", "PEN"],
                "example": "COP",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              }
            },
            "readOnly": true,
            "required": ["amount", "currency"],
            "type": "object",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MoneySchema"
          }
        },
        "readOnly": true,
        "title": "LedgerAccountBalance",
        "type": "object",
        "x-struct": "Elixir.MonoBankingAPI.Schemas.Ledger.AccountBalanceSchema",
        "x-validate": null
      },
      "LedgerAccountTransaction": {
        "description": "Represents the account movements in the ledger.",
        "properties": {
          "amount": {
            "description": "Money schema",
            "properties": {
              "amount": {
                "description": "Amount of money in `cents` with the format is int64. Thus, you\nsend an integer \"10.000.000\", we will interpret it as \"100.000,00\"\n",
                "example": 100000000,
                "format": "int64",
                "maximum": 100000000000000,
                "minimum": -100000000000000,
                "type": "integer",
                "x-struct": null,
                "x-validate": null
              },
              "currency": {
                "default": "COP",
                "description": "Currency of money",
                "enum": ["COP", "USD", "MXN", "CLP", "BRL", "PEN"],
                "example": "COP",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              }
            },
            "required": ["amount", "currency"],
            "type": "object",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MoneySchema"
          },
          "description": {
            "description": "useful infomation about the transaction",
            "example": "Purchase on ABC Commerce",
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "id": {
            "description": "Indicates the format for resource's ID",
            "example": "ltx_5tgliBmzjZ6mpQPRbQjfKj",
            "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
            "type": "string",
            "x-context": "ledger_transaction",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
          },
          "id_in_origin": {
            "description": "String field",
            "example": "ctx_02vc3Wvuv6WaaDM81m8Utv",
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "operation_type": {
            "description": "The four common transaction operations are credit, debit, hold, and release:\n\n- credit: Increases the balance of the account. It is typically used to represent income.\n- debit: Decreases the balance of the account. It is typically used to represent expenses.\n- hold: Setting aside of funds for a specific purpose, such as a pending transaction.\n- release: Represent the release of previously held funds for a pending transaction.\n",
            "enum": ["debit", "credit", "hold", "release"],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "origin": {
            "description": "The operation from which the transaction originated",
            "example": "card_transaction",
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "origin_transaction_at": {
            "description": "Date and Time at which the transaction was created",
            "example": "2022-01-01T01:00:00Z",
            "format": "date-time",
            "type": "string",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.DateTimeSchema",
            "x-validation": {}
          },
          "reverted_by_id": {
            "description": "The ID of the transaction that reverts this ledger transaction",
            "example": "ltx_5tgliBmzjZ6mpQPRbQjfKj",
            "nullable": true,
            "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
            "type": "string",
            "x-context": "ledger_transaction",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
          },
          "reverts_id": {
            "description": "The ID of the transaction that this ledger transaction reverts",
            "example": "ltx_5tgliBmzjZ6mpQPRbQjfKj",
            "nullable": true,
            "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
            "type": "string",
            "x-context": "ledger_transaction",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
          },
          "transaction_at": {
            "description": "Date and Time at which the transaction was actually performed",
            "example": "2022-01-01T01:00:00Z",
            "format": "date-time",
            "type": "string",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.DateTimeSchema",
            "x-validation": {}
          }
        },
        "title": "LedgerAccountTransaction",
        "type": "object",
        "x-struct": null,
        "x-validate": null
      },
      "PersonTypes": {
        "default": "natural",
        "description": "  The person types can be:\n  - natural\n",
        "enum": ["natural"],
        "example": "natural",
        "title": "PersonTypes",
        "type": "string",
        "x-struct": null,
        "x-validate": null
      },
      "CommonPayoutSchema": {
        "properties": {
          "account_id": {
            "description": "A core account identifier",
            "example": "lacc_5tgliBmzjZ6mpQPRbQjfKj",
            "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
            "type": "string",
            "x-context": "ledger_account",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
          },
          "calculated_fees": {
            "additionalProperties": {
              "description": "A JSON of fees that were calculated for the payout.\nthe key will be the fee type:\n\n- `bank_transfer_fee`\n- `bank_transfer_gmf`\n",
              "properties": {
                "amount": {
                  "description": "Amount of the fee",
                  "properties": {
                    "amount": {
                      "description": "Amount of money in `cents` with the format is int64. Thus, you\nsend an integer \"10.000.000\", we will interpret it as \"100.000,00\"\n",
                      "example": 100000000,
                      "format": "int64",
                      "maximum": 100000000000000,
                      "minimum": -100000000000000,
                      "type": "integer",
                      "x-struct": null,
                      "x-validate": null
                    },
                    "currency": {
                      "default": "COP",
                      "description": "Currency of money",
                      "enum": ["COP"],
                      "example": "COP",
                      "type": "string",
                      "x-struct": null,
                      "x-validate": null
                    }
                  },
                  "required": ["amount", "currency"],
                  "type": "object",
                  "x-struct": null,
                  "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MoneySchema"
                },
                "id": {
                  "description": "Indicates the format for resource's ID",
                  "example": "fee_5tgliBmzjZ6mpQPRbQjfKj",
                  "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                  "readOnly": true,
                  "type": "string",
                  "x-context": "fee",
                  "x-struct": null,
                  "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
                }
              },
              "type": "object",
              "x-struct": null,
              "x-validate": null
            },
            "example": {
              "bank_transfer_fee": {
                "amount": { "amount": 100000000, "currency": "COP" },
                "id": "fee_5tgliBmzjZ6mpQPRbQjfKj"
              },
              "bank_transfer_gmf": {
                "amount": { "amount": 100000000, "currency": "COP" },
                "id": "fee_5tgliBmzjZ6mpQPRbQjfKj"
              }
            },
            "readOnly": true,
            "type": "object",
            "x-struct": null,
            "x-validate": null
          },
          "description": {
            "description": "A description for the payout",
            "example": "string",
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "external_id": {
            "description": "A unique identifier to handle idempotency. If the identifier already exists,\nthe payout creation is skipped and the HTTP code response is 200. If not,\na new payout is created and the HTTP code response is 201.\n",
            "example": "1234859",
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "id": {
            "description": "A payout identifier",
            "example": "cpout_5tgliBmzjZ6mpQPRbQjfKj",
            "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
            "readOnly": true,
            "type": "string",
            "x-context": "payout",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
          },
          "metadata": {
            "additionalProperties": true,
            "description": "A tenant-managed flat map for providing additional data about the payout. The values are stored and displayed as strings, and the provided information will be returned as-is in the payout details.\n",
            "example": { "id": 3, "reference": 123 },
            "nullable": true,
            "type": "object",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MetadataSchema"
          },
          "method": {
            "description": "Specifies the way or process used to execute the payout. Each method is only available\nfor certain countries and currencies, and the processing time for completing a payout\nwill vary depending on the selected method.\n",
            "enum": ["co_ach", "co_transfiya", "co_mono_turbo"],
            "example": "co_mono_turbo",
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "method_params": {
            "nullable": true,
            "type": "object",
            "x-struct": null,
            "x-validate": null
          },
          "reference": {
            "description": "A reference for the payout",
            "example": "string",
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "source_amount": {
            "description": "The amount to be debited from the source account, specified in the same currency as\nthe source account, <b>This amount include the fees if were configured</b>. If this field\nis null, its value can be automatically calculated from the target amount.\n",
            "nullable": true,
            "properties": {
              "amount": {
                "description": "Amount of money in `cents` with the format is int64. Thus, you\nsend an integer \"10.000.000\", we will interpret it as \"100.000,00\"\n",
                "example": 100000000,
                "format": "int64",
                "maximum": 100000000000000,
                "minimum": 100,
                "type": "integer",
                "x-struct": null,
                "x-validate": null
              },
              "currency": {
                "default": "COP",
                "description": "Currency of money",
                "enum": ["COP"],
                "example": "COP",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              }
            },
            "required": ["amount", "currency"],
            "type": "object",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MoneySchema"
          },
          "target_amount": {
            "description": "The amount to be credited to the target account, specified in the same currency as\nthe target account. If this field is null, its value can be automatically calculated\nfrom the source amount.\n",
            "nullable": true,
            "properties": {
              "amount": {
                "description": "Amount of money in `cents` with the format is int64. Thus, you\nsend an integer \"10.000.000\", we will interpret it as \"100.000,00\"\n",
                "example": 100000000,
                "format": "int64",
                "maximum": 100000000000000,
                "minimum": 100,
                "type": "integer",
                "x-struct": null,
                "x-validate": null
              },
              "currency": {
                "default": "COP",
                "description": "Currency of money",
                "enum": ["COP"],
                "example": "COP",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              }
            },
            "required": ["amount", "currency"],
            "type": "object",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MoneySchema"
          }
        },
        "required": ["external_id", "account_id", "method"],
        "title": "CommonPayoutSchema",
        "type": "object",
        "x-struct": null,
        "x-validate": "Elixir.MonoBankingAPI.Schemas.Core.Payouts.CommonSchema"
      },
      "Payout": {
        "discriminator": {
          "mapping": {
            "co_ach": "#/components/schemas/PayoutCOACH",
            "co_mono_turbo": "#/components/schemas/PayoutCOMonoTurbo",
            "co_transfiya": "#/components/schemas/PayoutCOTransfiya"
          },
          "propertyName": "method"
        },
        "oneOf": [
          { "$ref": "#/components/schemas/PayoutCOACH" },
          { "$ref": "#/components/schemas/PayoutCOMonoTurbo" },
          { "$ref": "#/components/schemas/PayoutCOTransfiya" }
        ],
        "title": "Payout",
        "type": "object",
        "x-struct": null,
        "x-validate": null
      },
      "CardUsageSpendingControlRule": {
        "description": "Spending control rule to disable card usage for specific card payments",
        "properties": {
          "disabled_card_usages": {
            "items": {
              "enum": [
                "online_purchase",
                "physical_purchase",
                "atm_withdrawal"
              ],
              "example": "online_purchase",
              "type": "string",
              "x-struct": null,
              "x-validate": null
            },
            "maxItems": 3,
            "minItems": 1,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": ["disabled_card_usages"],
        "title": "CardUsageSpendingControlRule",
        "type": "object",
        "x-struct": "Elixir.MonoBankingAPI.Schemas.SpendingControls.Rules.CardUsageRuleSchema",
        "x-validate": null
      },
      "LedgerAccountHolder": {
        "description": "An account holder is a natural or legal person that has a ledger account.\n",
        "properties": {
          "address": {
            "description": "Contains the address information related to the account holder.",
            "properties": {
              "city": {
                "description": "City, district, suburb, town, or village",
                "example": "Chapinero",
                "maxLength": 100,
                "pattern": "^[A-Za-zÀ-ÿ0-9 -.]+$",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "country": {
                "description": "Country code ISO 3166-1 alpha-2",
                "example": "CO",
                "pattern": "^[A-Z]{2}$",
                "type": "string",
                "x-struct": null,
                "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.CountryCodeSchema"
              },
              "extra": {
                "description": "Additional information",
                "example": "Location near the southeast corner in front of the ABC mall. deliver to the security guard pedro pruebas",
                "maxLength": 144,
                "nullable": true,
                "pattern": "^[A-Za-zÀ-ÿ0-9 -.]+$",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "line_1": {
                "description": "Street, P.O. Box, or address information",
                "example": "Calle 97 # 15-24",
                "format": "address_line_1",
                "maxLength": 100,
                "pattern": "^[a-zA-Z0-9 -.°'#:,]+$",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "line_2": {
                "description": "Home, apartment, room, suite, office, or building",
                "example": "Apto. 208",
                "maxLength": 100,
                "nullable": true,
                "pattern": "^[A-Za-zÀ-ÿ0-9 -.]+$",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "state": {
                "description": "State, province, region, or county",
                "example": "Bogota D.C",
                "maxLength": 100,
                "pattern": "^[A-Za-zÀ-ÿ0-9 -.]+$",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "zip_code": {
                "example": "110221",
                "maxLength": 10,
                "pattern": "^[A-Za-zÀ-ÿ0-9 -.]+$",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              }
            },
            "required": ["country", "state", "city", "line_1", "zip_code"],
            "title": "Address",
            "type": "object",
            "x-struct": null,
            "x-validate": null
          },
          "email": {
            "description": "Account holder's email",
            "example": "someone@gmail.com",
            "format": "email",
            "nullable": true,
            "pattern": "^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+){1,2}$",
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "external_id": {
            "description": "Represents a unique external_id generated and provided by the API user. The API user is responsible to generate and provide a unique id for all their organization's account holders.",
            "example": "00001",
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "id": {
            "description": "Indicates the format for resource's ID",
            "example": "acch_5tgliBmzjZ6mpQPRbQjfKj",
            "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
            "readOnly": true,
            "type": "string",
            "x-context": "account_holder",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
          },
          "inserted_at": {
            "description": "Indicates when an account holder was created",
            "example": "2022-01-01T01:00:00Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.DateTimeSchema",
            "x-validation": {}
          },
          "metadata": {
            "description": "A tenant-managed flat map for providing additional data about the account holder. The values are stored and displayed as strings, and the provided information will be returned as-is in the account holder details.",
            "example": { "hello": "world" },
            "nullable": true,
            "type": "object",
            "x-struct": null,
            "x-validate": null
          },
          "person": {
            "description": "Contains the specific person information of the account holder.\n",
            "properties": {
              "country_code": {
                "description": "Country code related to the person, this field use the ISO 3166-1 alpha-2 and alpha-3 standards.",
                "example": "CO",
                "pattern": "^[A-Z]{2}$",
                "type": "string",
                "x-struct": null,
                "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.CountryCodeSchema"
              },
              "document_number": {
                "description": "String field",
                "example": "00321",
                "minLength": 5,
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "document_type": {
                "default": "CC",
                "description": "  The document types are represented by codes and can be:\n\n  For Colombia:\n  - CC\n  - TI\n  - NUIP\n  - TE\n  - CE\n  - NIT\n  - PASS\n  - PEP\n  - PPT\n  - FDO\n  - RC\n\n  For other countries:\n  - NID (National Identification)\n  - DL (Driver License)\n  - PASS\n",
                "enum": [
                  "CC",
                  "TI",
                  "NUIP",
                  "TE",
                  "CE",
                  "NIT",
                  "PASS",
                  "PEP",
                  "PPT",
                  "FDO",
                  "RC",
                  "DL",
                  "NID"
                ],
                "example": "CC",
                "title": "DocumentTypes",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "first_name": {
                "example": "John",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "last_name": {
                "example": "Doe",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "middle_name": {
                "example": "Tyler",
                "nullable": true,
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "person_type": {
                "default": "legal",
                "description": "Denotes if the person is a natural or a legal entity",
                "enum": ["natural", "legal"],
                "example": "natural",
                "title": "PersonTypes",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "second_last_name": {
                "example": "Lucas",
                "nullable": true,
                "type": "string",
                "x-struct": null,
                "x-validate": null
              }
            },
            "required": [
              "country_code",
              "document_type",
              "document_number",
              "first_name",
              "last_name",
              "person_type"
            ],
            "type": "object",
            "x-struct": null,
            "x-validate": null
          },
          "phone_number": {
            "description": "Account holder's phone number",
            "example": "+573000000000",
            "nullable": true,
            "pattern": "^\\+[1-9]\\d{1,14}$",
            "type": "string",
            "x-region": "all",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.PhoneSchema"
          },
          "state": {
            "description": "It represents the current state of the account holder, and these are the possible states of an account holder:\n- active: it is enable to manage and perform actions with its accounts.\n- blocked: it is blocked by the tenant, but you could also make it active again.\n- canceled: it is canceled by Mono directly and can't use their accounts anymore.\n",
            "enum": ["active", "blocked", "canceled"],
            "readOnly": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "state_reason": {
            "description": "It provides the reason why the account holder could be blocked or canceled. It is required when the account holder is transitioned to being blocked or canceled.",
            "enum": ["fraud", "user_request", "other"],
            "nullable": true,
            "readOnly": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "state_reason_detail": {
            "description": "It provides a textual reason why the account holder is blocked or canceled in case of the state_reason value is `other`.",
            "nullable": true,
            "readOnly": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "type": {
            "description": "Account holders can be one of the following types:\n\n- self: the \"self\" account holder refers to the tenant interacting directly with the API.\n- third_party: The \"third_party\" account holder represents a client associated with the tenant. In this scenario, the tenant acts as an intermediary managing the account on behalf of their own client.\n\nFor our API, you can only create third-party account holders, self account holder is only for internal use.\n",
            "enum": ["self", "third_party"],
            "readOnly": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "updated_at": {
            "description": "Indicates when an account holder was updated",
            "example": "2022-01-01T01:00:00Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.DateTimeSchema",
            "x-validation": {}
          }
        },
        "required": ["person", "address", "external_id"],
        "title": "LedgerAccountHolder",
        "type": "object",
        "x-struct": "Elixir.MonoBankingAPI.Schemas.Ledger.AccountHolderSchema",
        "x-validate": null
      },
      "CollectionLinks": {
        "description": "It contains the collection links and their settings. It also contains paging information",
        "properties": {
          "collection_links": {
            "description": "It contains a list with collection links",
            "items": { "$ref": "#/components/schemas/CollectionLink" },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "pagination": {
            "description": "Pagination schema",
            "properties": {
              "page_number": {
                "description": "Current page number",
                "example": 1,
                "type": "integer",
                "x-struct": null,
                "x-validate": null
              },
              "page_size": {
                "description": "Amount of items by page",
                "example": 10,
                "type": "integer",
                "x-struct": null,
                "x-validate": null
              },
              "total_items": {
                "description": "Total of items by the resource",
                "example": 100,
                "type": "integer",
                "x-struct": null,
                "x-validate": null
              },
              "total_pages": {
                "description": "Total pages by the resource",
                "example": 10,
                "type": "integer",
                "x-struct": null,
                "x-validate": null
              }
            },
            "readOnly": true,
            "title": "Pagination",
            "type": "object",
            "x-struct": "Elixir.MonoBankingAPI.Schemas.Components.PaginationSchema",
            "x-validate": null
          }
        },
        "readOnly": true,
        "title": "CollectionLinks",
        "type": "object",
        "x-struct": "Elixir.MonoBankingAPI.Schemas.CollectionLinks.ListCollectionLinksSchema",
        "x-validate": null
      },
      "VelocitySpendingControlRule": {
        "minProperties": 1,
        "properties": {
          "daily": {
            "description": "Limit amount for daily spending",
            "properties": {
              "amount": {
                "description": "Amount of money in `cents` with the format is int64. Thus, you\nsend an integer \"10.000.000\", we will interpret it as \"100.000,00\"\n",
                "example": 100000000,
                "format": "int64",
                "maximum": 100000000000000,
                "minimum": -100000000000000,
                "type": "integer",
                "x-struct": null,
                "x-validate": null
              },
              "currency": {
                "default": "COP",
                "description": "Currency of money",
                "enum": ["COP", "USD", "MXN", "CLP", "BRL", "PEN"],
                "example": "COP",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              }
            },
            "required": ["amount", "currency"],
            "type": "object",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MoneySchema"
          },
          "monthly": {
            "description": "Limit amount for monthly spending",
            "properties": {
              "amount": {
                "description": "Amount of money in `cents` with the format is int64. Thus, you\nsend an integer \"10.000.000\", we will interpret it as \"100.000,00\"\n",
                "example": 100000000,
                "format": "int64",
                "maximum": 100000000000000,
                "minimum": -100000000000000,
                "type": "integer",
                "x-struct": null,
                "x-validate": null
              },
              "currency": {
                "default": "COP",
                "description": "Currency of money",
                "enum": ["COP", "USD", "MXN", "CLP", "BRL", "PEN"],
                "example": "COP",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              }
            },
            "required": ["amount", "currency"],
            "type": "object",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MoneySchema"
          },
          "weekly": {
            "description": "Limit amount for weekly spending",
            "properties": {
              "amount": {
                "description": "Amount of money in `cents` with the format is int64. Thus, you\nsend an integer \"10.000.000\", we will interpret it as \"100.000,00\"\n",
                "example": 100000000,
                "format": "int64",
                "maximum": 100000000000000,
                "minimum": -100000000000000,
                "type": "integer",
                "x-struct": null,
                "x-validate": null
              },
              "currency": {
                "default": "COP",
                "description": "Currency of money",
                "enum": ["COP", "USD", "MXN", "CLP", "BRL", "PEN"],
                "example": "COP",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              }
            },
            "required": ["amount", "currency"],
            "type": "object",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MoneySchema"
          }
        },
        "title": "VelocitySpendingControlRule",
        "type": "object",
        "x-struct": "Elixir.MonoBankingAPI.Schemas.SpendingControls.Rules.VelocityRuleSchema",
        "x-validate": null
      },
      "MerchantNameControlRule": {
        "description": "Spending control rule to limit spending based on merchant names",
        "properties": {
          "operation": {
            "description": "If `allow_pattern`, only payments with merchant names that match the pattern are authorized. If `forbid_pattern` is used,  payments with merchant names that match the pattern are not authorized.",
            "enum": ["allow_pattern", "forbid_pattern"],
            "example": "allow_pattern",
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "regex": {
            "description": "Merchant name regex",
            "example": "^AMAZON.*",
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": ["regex", "operation"],
        "title": "MerchantNameControlRule",
        "type": "object",
        "x-struct": "Elixir.MonoBankingAPI.Schemas.SpendingControls.Rules.MerchantNameRuleSchema",
        "x-validate": null
      },
      "PlasticCardChangePin": {
        "description": "Plastic Card Change PIN Schema",
        "properties": {
          "pin": {
            "description": "Card PIN",
            "example": "1358",
            "maxLength": 4,
            "minLength": 4,
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": ["pin"],
        "title": "PlasticCardChangePin",
        "type": "object",
        "x-struct": "Elixir.MonoBankingAPI.Schemas.Cards.PlasticCardChangePinSchema",
        "x-validate": "Elixir.MonoBankingAPI.Schemas.Cards.PlasticCardChangePinSchema"
      },
      "DocumentTypes": {
        "default": "CC",
        "description": "  The document types are represented by codes and can be:\n\n  For Colombia:\n  - CC\n  - CE\n  - PPT\n\n  For other countries:\n  - PASS\n",
        "enum": ["CC", "CE", "PASS", "PPT"],
        "example": "CC",
        "title": "DocumentTypes",
        "type": "string",
        "x-struct": null,
        "x-validate": null
      },
      "Error": {
        "description": "It represents the structure of API error messages.",
        "example": {
          "code": "{{http_code}} {{http_code_phrase}}",
          "errors": [
            {
              "error_code": "account_not_found",
              "message": "The given account id doesn't exist",
              "path": "#/data/account/id",
              "url": "https://{{api_domain}}/docs#errors"
            }
          ],
          "id": "log_7MkWaFqvfosB8fzHhb1Eql",
          "message": "Malformed request"
        },
        "properties": {
          "code": {
            "description": "High-level error code to help categorize the errors",
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "errors": {
            "description": "A list of detail error codes, messages and URLs to documentation to help remediation.",
            "items": {
              "properties": {
                "error_code": {
                  "description": "Low-level error codes: \n* cardholder_already_exist - The cardholder already exists.\n* invalid_format - The field contains an invalid format.\n* subaccount_operation_bad_state - Subaccount operation incomplete. Try again later\n* program_not_found - The program doesn't exist.\n* invalid_enum - The field contains an invalid value.\n* max_virtual_card_limit - The maximum number of cards allowed has been reached, it is not possible to create a new card\n* invalid_account_type - Account type isn't allowed to perform this action\n* expired_token - The token is expired, inactive, or doesn't exist.\n* risk_category_limit_exceeded - For your security, we have set amount limits for you. Please contact us to increase your limits.\n* null_value - The field can't contain a null value.\n* duplicated_card_limits - There are some card limits duplicated, The type must be unique for each card limit\n* account_holder_not_found - Account holder doesn't exist.\n* account_dont_match_cardholder - The account doesn't match the cardholder\n* invalid_receiving_holder_state - Account holder from receiving account isn't active to perform this action\n* min_length - The field length is smaller than the allowed min length.\n* exclusive_max - The field is larger than exclusive maximum required.\n* card_not_found - The card doesn't exist\n* invalid_cardholder_country_code - Cardholder must have an ID in the country set in the configuration group\n* unsupported_country_for_method - The payout method is not supported for this country\n* service_is_unavailable - The service is unavailable, Please try again later\n* target_not_found - The target doesn't exist.\n* invalid_idempotency_key_format - The provided idempotency key is invalid, it must be a unique UUID v4.\n* transfiya_not_supported - Transfiya not supported for client\n* invalid_discriminator_value - The field does not match any of the required schemas.\n* cardholder_not_found - The cardholder doesn't exist.\n* invalid_payer_account_type - Payer account type isn't allowed to perform this action\n* invalid_receiving_account_state - Receiving account state isn't active to perform this action\n* all_of - The field must match exactly all schemas in allOf.\n* card_not_support_pin - The card doesn't suppport PIN\n* item_not_found - The item doesn't exist\n* invalid_account_to_account_currencies - Both accounts should support the same currency\n* missing_field - The field is missing on the request body or parameters.\n* missing_authorization_header - `Authorization` header is missing.\n* max_items - The array length is larger than the allowed max length.\n* collection_intent_internal_error - An internal error occurred during the collection intent.\n* last_rule - The spending control must have at least one rule.\n* method_not_enabled - The payout method is not enabled for this account\n* plastic_card_activation_not_found - The plastic card activation doesn't exist.\n* currency_code_not_supported - Currency code not supported by the client\n* invalid_holder_state - Account holder isn't active to perform this action\n* max_length - The field length is larger than the allowed max length.\n* bank_not_found - The bank doesn't exist.\n* one_of - The field must match exactly one schema in oneOf.\n* spending_control_not_found - The spending control doesn't exist.\n* invalid_payer_account_state - Payer account state isn't active to perform this action\n* payouts_feature_not_enabled - The payouts feature is not enabled for this account\n* different_account_tenants - The accounts should be from the same tenant\n* insufficient_funds - Insufficient funds to make the operation\n* invalid_target - Target is not valid for spending control\n* unexpected_field - An unexpected field was sent.\n* not_authorized - Not authorized to have access to this resource.\n* invalid_amount_currency_code - Currency code doesn't match the account's currency\n* pin_in_use - The pin was already used\n* receiving_account_not_found - Receiving account doesn't exist.\n* not_supported_rule_for_target - Some rules are not supported for the spending control target\n* invalid_account_to_account_amount_currency - Amount currency not supported by both accounts\n* rule_invalid_currency_code - The rule has a currency code that is not supported by the spending control\n* min_items - The array length is smaller than the allowed min length.\n* card_configuration_group_not_found - The card configuration group doesn't exist\n* invalid_account_state - Account state isn't active to perform this action\n* account_not_found - The account ID doesn't exist.\n* invalid_token - Token is invalid.\n* unsupported_currency_for_method - The payout method is not supported for this currency\n* transaction_not_found - Transaction doesn't exist.\n* invalid_payer_holder_state - Account holder from payer account isn't active to perform this action\n* invalid_receiving_account_type - Destination account type isn't allowed to perform this action\n* cards_invalid_currency_code - The card's account has a currency code that is not supported by the spending control\n* payout_not_found - The payout doesn't exist.\n* insufficient_funds_for_withdrawal - Insufficient funds for withdrawal, the amount to be withdrawn is greater than the current balance\n* cardholder_email_already_exist - The cardholder email already exists.\n* validation_error - Generic changeset errors\n* card_nickname_duplicated - The nickname of the card is already taken\n* min_properties - The object has fewer properties than the required minimum.\n* negative_target_amount - The source amount doesn't cover fees amount\n* card_is_not_prepaid - The card is not a prepaid card\n* invalid_type - The field contains an invalid type.\n* exclusive_min - The field is smaller than exclusive minimum required.\n* minimum - The field is smaller than inclusive minimum required.\n* invalid_metadata - Invalid Metadata, should be a flat object\n* rule_not_found - The rule doesn't exist.\n* internal_error - An unexpected error occurred\n* maximum - The field is larger than inclusive maximum required.",
                  "enum": [
                    "maximum",
                    "internal_error",
                    "rule_not_found",
                    "invalid_metadata",
                    "minimum",
                    "exclusive_min",
                    "invalid_type",
                    "card_is_not_prepaid",
                    "negative_target_amount",
                    "min_properties",
                    "card_nickname_duplicated",
                    "validation_error",
                    "cardholder_email_already_exist",
                    "insufficient_funds_for_withdrawal",
                    "payout_not_found",
                    "cards_invalid_currency_code",
                    "invalid_receiving_account_type",
                    "invalid_payer_holder_state",
                    "transaction_not_found",
                    "unsupported_currency_for_method",
                    "invalid_token",
                    "account_not_found",
                    "invalid_account_state",
                    "card_configuration_group_not_found",
                    "min_items",
                    "rule_invalid_currency_code",
                    "invalid_account_to_account_amount_currency",
                    "not_supported_rule_for_target",
                    "receiving_account_not_found",
                    "pin_in_use",
                    "invalid_amount_currency_code",
                    "not_authorized",
                    "unexpected_field",
                    "invalid_target",
                    "insufficient_funds",
                    "different_account_tenants",
                    "payouts_feature_not_enabled",
                    "invalid_payer_account_state",
                    "spending_control_not_found",
                    "one_of",
                    "bank_not_found",
                    "max_length",
                    "invalid_holder_state",
                    "currency_code_not_supported",
                    "plastic_card_activation_not_found",
                    "method_not_enabled",
                    "last_rule",
                    "collection_intent_internal_error",
                    "max_items",
                    "missing_authorization_header",
                    "missing_field",
                    "invalid_account_to_account_currencies",
                    "item_not_found",
                    "card_not_support_pin",
                    "all_of",
                    "invalid_receiving_account_state",
                    "invalid_payer_account_type",
                    "cardholder_not_found",
                    "invalid_discriminator_value",
                    "transfiya_not_supported",
                    "invalid_idempotency_key_format",
                    "target_not_found",
                    "service_is_unavailable",
                    "unsupported_country_for_method",
                    "invalid_cardholder_country_code",
                    "card_not_found",
                    "exclusive_max",
                    "min_length",
                    "invalid_receiving_holder_state",
                    "account_dont_match_cardholder",
                    "account_holder_not_found",
                    "duplicated_card_limits",
                    "null_value",
                    "risk_category_limit_exceeded",
                    "expired_token",
                    "invalid_account_type",
                    "max_virtual_card_limit",
                    "invalid_enum",
                    "program_not_found",
                    "subaccount_operation_bad_state",
                    "invalid_format",
                    "cardholder_already_exist"
                  ],
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                },
                "message": {
                  "description": "A description of the error that occurred.",
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                },
                "path": {
                  "description": "Reference to the JSON Path of the field with error. (e.g #/data/transfer/bank_name) (Optional)",
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                },
                "url": {
                  "description": "URL of the error documentation (Optional).",
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                }
              },
              "type": "object",
              "x-struct": null,
              "x-validate": null
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "id": {
            "description": "An ID from the request log, use it for audit purposes.",
            "example": "log_5tgliBmzjZ6mpQPRbQjfKj",
            "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
            "type": "string",
            "x-context": "log",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
          },
          "message": {
            "description": "A brief error message",
            "enum": [
              "Malformed request",
              "Authorization header is missing or invalid.",
              "Not authorized to have access to this resource",
              "Resource not defined",
              "Validation errors",
              "Something went wrong on the Server",
              "Service unavailable"
            ],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "readOnly": true,
        "title": "Error",
        "type": "object",
        "x-errors": {
          "different_account_tenants": "The accounts should be from the same tenant",
          "invalid_payer_account_type": "Payer account type isn't allowed to perform this action",
          "service_is_unavailable": "The service is unavailable, Please try again later",
          "invalid_format": "The field contains an invalid format.",
          "null_value": "The field can't contain a null value.",
          "card_nickname_duplicated": "The nickname of the card is already taken",
          "exclusive_max": "The field is larger than exclusive maximum required.",
          "bank_not_found": "The bank doesn't exist.",
          "unsupported_country_for_method": "The payout method is not supported for this country",
          "invalid_idempotency_key_format": "The provided idempotency key is invalid, it must be a unique UUID v4.",
          "invalid_type": "The field contains an invalid type.",
          "one_of": "The field must match exactly one schema in oneOf.",
          "payouts_feature_not_enabled": "The payouts feature is not enabled for this account",
          "missing_field": "The field is missing on the request body or parameters.",
          "account_holder_not_found": "Account holder doesn't exist.",
          "invalid_account_to_account_amount_currency": "Amount currency not supported by both accounts",
          "missing_authorization_header": "`Authorization` header is missing.",
          "cardholder_email_already_exist": "The cardholder email already exists.",
          "rule_not_found": "The rule doesn't exist.",
          "not_supported_rule_for_target": "Some rules are not supported for the spending control target",
          "method_not_enabled": "The payout method is not enabled for this account",
          "max_items": "The array length is larger than the allowed max length.",
          "cardholder_not_found": "The cardholder doesn't exist.",
          "insufficient_funds": "Insufficient funds to make the operation",
          "invalid_receiving_account_state": "Receiving account state isn't active to perform this action",
          "invalid_holder_state": "Account holder isn't active to perform this action",
          "invalid_account_type": "Account type isn't allowed to perform this action",
          "invalid_account_state": "Account state isn't active to perform this action",
          "card_not_found": "The card doesn't exist",
          "min_properties": "The object has fewer properties than the required minimum.",
          "transfiya_not_supported": "Transfiya not supported for client",
          "validation_error": "Generic changeset errors",
          "transaction_not_found": "Transaction doesn't exist.",
          "invalid_enum": "The field contains an invalid value.",
          "unsupported_currency_for_method": "The payout method is not supported for this currency",
          "cardholder_already_exist": "The cardholder already exists.",
          "target_not_found": "The target doesn't exist.",
          "invalid_token": "Token is invalid.",
          "max_length": "The field length is larger than the allowed max length.",
          "insufficient_funds_for_withdrawal": "Insufficient funds for withdrawal, the amount to be withdrawn is greater than the current balance",
          "invalid_metadata": "Invalid Metadata, should be a flat object",
          "invalid_payer_holder_state": "Account holder from payer account isn't active to perform this action",
          "min_length": "The field length is smaller than the allowed min length.",
          "invalid_receiving_holder_state": "Account holder from receiving account isn't active to perform this action",
          "negative_target_amount": "The source amount doesn't cover fees amount",
          "pin_in_use": "The pin was already used",
          "all_of": "The field must match exactly all schemas in allOf.",
          "max_virtual_card_limit": "The maximum number of cards allowed has been reached, it is not possible to create a new card",
          "currency_code_not_supported": "Currency code not supported by the client",
          "rule_invalid_currency_code": "The rule has a currency code that is not supported by the spending control",
          "internal_error": "An unexpected error occurred",
          "card_is_not_prepaid": "The card is not a prepaid card",
          "risk_category_limit_exceeded": "For your security, we have set amount limits for you. Please contact us to increase your limits.",
          "program_not_found": "The program doesn't exist.",
          "invalid_payer_account_state": "Payer account state isn't active to perform this action",
          "maximum": "The field is larger than inclusive maximum required.",
          "subaccount_operation_bad_state": "Subaccount operation incomplete. Try again later",
          "invalid_discriminator_value": "The field does not match any of the required schemas.",
          "collection_intent_internal_error": "An internal error occurred during the collection intent.",
          "account_dont_match_cardholder": "The account doesn't match the cardholder",
          "invalid_amount_currency_code": "Currency code doesn't match the account's currency",
          "payout_not_found": "The payout doesn't exist.",
          "invalid_receiving_account_type": "Destination account type isn't allowed to perform this action",
          "spending_control_not_found": "The spending control doesn't exist.",
          "plastic_card_activation_not_found": "The plastic card activation doesn't exist.",
          "minimum": "The field is smaller than inclusive minimum required.",
          "min_items": "The array length is smaller than the allowed min length.",
          "exclusive_min": "The field is smaller than exclusive minimum required.",
          "last_rule": "The spending control must have at least one rule.",
          "invalid_account_to_account_currencies": "Both accounts should support the same currency",
          "card_not_support_pin": "The card doesn't suppport PIN",
          "expired_token": "The token is expired, inactive, or doesn't exist.",
          "account_not_found": "The account ID doesn't exist.",
          "item_not_found": "The item doesn't exist",
          "invalid_target": "Target is not valid for spending control",
          "receiving_account_not_found": "Receiving account doesn't exist.",
          "invalid_cardholder_country_code": "Cardholder must have an ID in the country set in the configuration group",
          "cards_invalid_currency_code": "The card's account has a currency code that is not supported by the spending control",
          "not_authorized": "Not authorized to have access to this resource.",
          "duplicated_card_limits": "There are some card limits duplicated, The type must be unique for each card limit",
          "unexpected_field": "An unexpected field was sent.",
          "card_configuration_group_not_found": "The card configuration group doesn't exist"
        },
        "x-struct": "Elixir.MonoBankingAPI.Schemas.Components.ErrorSchema",
        "x-validate": null
      },
      "IPV4": {
        "description": "The user IP address",
        "example": "88.221.182.60",
        "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$",
        "title": "IPV4",
        "type": "string",
        "writeOnly": true,
        "x-struct": null,
        "x-validate": null
      },
      "MIDControlRule": {
        "description": "Spending control rule to limit spending based on merchant ids",
        "properties": {
          "mids": {
            "items": {
              "description": "Merchant ID",
              "example": "012345678",
              "type": "string",
              "x-struct": null,
              "x-validate": null
            },
            "minItems": 1,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "operation": {
            "description": "If `forbid_mids`, payments for the listed MIDs are not authorized. If `allow_mids`, payments are authorized only for the listed MIDs.",
            "enum": ["allow_mids", "forbid_mids"],
            "example": "allow_mids",
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": ["mids", "operation"],
        "title": "MIDControlRule",
        "type": "object",
        "x-struct": "Elixir.MonoBankingAPI.Schemas.SpendingControls.Rules.MIDRuleSchema",
        "x-validate": null
      },
      "CollectionIntent": {
        "description": "In this scheme, you obtain information about the collection intent,\nsuch as the amount of the intent, the date on which the collection intent was made,\nthe note, reference and data about the payer, such as the document number,\ndocument type and name of the person who paid.\nYou can also find out the status of the collection intent.\n",
        "properties": {
          "account_id": {
            "description": "Indicates the format for resource's ID",
            "example": "acc_5tgliBmzjZ6mpQPRbQjfKj",
            "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
            "type": "string",
            "x-context": "account",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
          },
          "amount": {
            "description": "Money schema",
            "properties": {
              "amount": {
                "description": "Amount of money in `cents` with the format is int64. Thus, you\nsend an integer \"10.000.000\", we will interpret it as \"100.000,00\"\n",
                "example": 100000000,
                "format": "int64",
                "maximum": 100000000000000,
                "minimum": -100000000000000,
                "type": "integer",
                "x-struct": null,
                "x-validate": null
              },
              "currency": {
                "default": "COP",
                "description": "Currency of money",
                "enum": ["COP"],
                "example": "COP",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              }
            },
            "required": ["amount", "currency"],
            "type": "object",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MoneySchema"
          },
          "bank_code": {
            "description": "Bank code used by PSE to make the collection",
            "example": "1007",
            "type": "string",
            "writeOnly": true,
            "x-struct": null,
            "x-validate": null
          },
          "id": {
            "description": "Indicates the format for resource's ID",
            "example": "cint_5tgliBmzjZ6mpQPRbQjfKj",
            "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
            "readOnly": true,
            "type": "string",
            "x-context": "collection_intent",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
          },
          "inserted_at": {
            "description": "Indicates when a resource is created",
            "example": "2022-01-01T01:00:00Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.DateTimeSchema",
            "x-validation": {}
          },
          "ip": {
            "description": "The user IP address",
            "example": "88.221.182.60",
            "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$",
            "title": "IPV4",
            "type": "string",
            "writeOnly": true,
            "x-struct": null,
            "x-validate": null
          },
          "note": {
            "description": "Note indicated by the user of the client",
            "example": "February payment",
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "payer": {
            "properties": {
              "document_number": {
                "description": "Document number of payer",
                "example": "1099711789",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "document_type": {
                "default": "CC",
                "description": "  The document types are represented by codes and can be:\n\n  For Colombia:\n  - CC\n  - TI\n  - NUIP\n  - TE\n  - CE\n  - NIT\n  - PASS\n  - PEP\n  - PPT\n  - FDO\n  - RC\n\n  For other countries:\n  - NID (National Identification)\n  - DL (Driver License)\n  - PASS\n",
                "enum": [
                  "CC",
                  "TI",
                  "NUIP",
                  "TE",
                  "CE",
                  "NIT",
                  "PASS",
                  "PEP",
                  "PPT",
                  "FDO",
                  "RC",
                  "DL",
                  "NID"
                ],
                "example": "CC",
                "title": "DocumentTypes",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "email": {
                "description": "Payer email address",
                "example": "someone@gmail.com",
                "format": "email",
                "pattern": "^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+){1,2}$",
                "type": "string",
                "writeOnly": true,
                "x-struct": null,
                "x-validate": null
              },
              "name": {
                "description": "Name of payer",
                "example": "Martina Brooks",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "person_type": {
                "default": "legal",
                "description": "  The person types can be:\n  - legal,\n  - natural\n",
                "enum": ["natural", "legal"],
                "example": "natural",
                "title": "PersonTypes",
                "type": "string",
                "writeOnly": true,
                "x-struct": null,
                "x-validate": null
              },
              "phone_number": {
                "description": "Payer phone number",
                "example": "+573000000000",
                "pattern": "^\\+[1-9]\\d{1,14}$",
                "type": "string",
                "writeOnly": true,
                "x-region": "co",
                "x-struct": null,
                "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.PhoneSchema"
              }
            },
            "required": [
              "name",
              "document_type",
              "document_number",
              "phone_number",
              "email",
              "person_type"
            ],
            "type": "object",
            "x-struct": null,
            "x-validate": null
          },
          "payment": {
            "properties": {
              "provider": {
                "default": "pse",
                "description": "  The providers of the collections are the intermediaries to facilitate the collection of the money.\n  These are the current ones:\n  - pse\n",
                "enum": ["pse"],
                "example": "pse",
                "title": "CollectionProviders",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "transaction_id": {
                "description": "The transaction ID with which you can identify the collection intent with the provider",
                "example": "1115065899",
                "readOnly": true,
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "url": {
                "description": "The URL of the provider that will be used to complete the collection intent",
                "example": "https://registro.desarrollo.pse.com.co/PSENF/index.html?enc=123",
                "format": "uri-reference",
                "readOnly": true,
                "type": "string",
                "x-struct": null,
                "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.URLSchema"
              }
            },
            "type": "object",
            "x-struct": null,
            "x-validate": null
          },
          "redirect_url": {
            "description": "The URL to redirect when the collection intent successfully completes through the provider.",
            "example": "https://my-page/voucher/ID_123",
            "format": "uri-reference",
            "type": "string",
            "writeOnly": true,
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.URLSchema"
          },
          "reference": {
            "description": "Reference indicated by the client or by the user of the client",
            "example": "REF. #5578136",
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "state": {
            "default": "created",
            "description": "- created: Represents when a payer completes and submits the payment form.\n- in_progress: Represents when the user is carrying out the payment process in the bank interface, the collection intent enters this state.\n- approved_in_provider: Remains in this state when the user has successfully completed the payment process, but the payment has not yet been credited.\n- account_credited: Means that the payment has already been credited to the customer's account balance.\n- failed: Occurs when the user could not finish the payment process.\n",
            "enum": [
              "created",
              "in_progress",
              "approved_in_provider",
              "account_credited",
              "failed"
            ],
            "readOnly": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "updated_at": {
            "description": "Indicates when a resource is updated",
            "example": "2022-01-01T01:00:00Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.DateTimeSchema",
            "x-validation": {}
          }
        },
        "required": [
          "amount",
          "account_id",
          "ip",
          "bank_code",
          "redirect_url",
          "payer",
          "payment"
        ],
        "title": "CollectionIntent",
        "type": "object",
        "x-struct": "Elixir.MonoBankingAPI.Schemas.CollectionIntents.CollectionIntentSchema",
        "x-validate": null
      },
      "ListAccountTransaction": {
        "description": "Contains a set of transactions with paginated data.",
        "properties": {
          "pagination": {
            "description": "Pagination schema",
            "properties": {
              "page_number": {
                "description": "Current page number",
                "example": 1,
                "type": "integer",
                "x-struct": null,
                "x-validate": null
              },
              "page_size": {
                "description": "Amount of items by page",
                "example": 10,
                "type": "integer",
                "x-struct": null,
                "x-validate": null
              },
              "total_items": {
                "description": "Total of items by the resource",
                "example": 100,
                "type": "integer",
                "x-struct": null,
                "x-validate": null
              },
              "total_pages": {
                "description": "Total pages by the resource",
                "example": 10,
                "type": "integer",
                "x-struct": null,
                "x-validate": null
              }
            },
            "readOnly": true,
            "title": "Pagination",
            "type": "object",
            "x-struct": "Elixir.MonoBankingAPI.Schemas.Components.PaginationSchema",
            "x-validate": null
          },
          "transactions": {
            "description": "Contains a set of transactions.",
            "items": {
              "description": "Represents the account movements in the ledger.",
              "properties": {
                "amount": {
                  "description": "Money schema",
                  "properties": {
                    "amount": {
                      "description": "Amount of money in `cents` with the format is int64. Thus, you\nsend an integer \"10.000.000\", we will interpret it as \"100.000,00\"\n",
                      "example": 100000000,
                      "format": "int64",
                      "maximum": 100000000000000,
                      "minimum": -100000000000000,
                      "type": "integer",
                      "x-struct": null,
                      "x-validate": null
                    },
                    "currency": {
                      "default": "COP",
                      "description": "Currency of money",
                      "enum": ["COP", "USD", "MXN", "CLP", "BRL", "PEN"],
                      "example": "COP",
                      "type": "string",
                      "x-struct": null,
                      "x-validate": null
                    }
                  },
                  "required": ["amount", "currency"],
                  "type": "object",
                  "x-struct": null,
                  "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MoneySchema"
                },
                "description": {
                  "description": "useful infomation about the transaction",
                  "example": "Purchase on ABC Commerce",
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                },
                "id": {
                  "description": "Indicates the format for resource's ID",
                  "example": "ltx_5tgliBmzjZ6mpQPRbQjfKj",
                  "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                  "type": "string",
                  "x-context": "ledger_transaction",
                  "x-struct": null,
                  "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
                },
                "id_in_origin": {
                  "description": "String field",
                  "example": "ctx_02vc3Wvuv6WaaDM81m8Utv",
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                },
                "operation_type": {
                  "description": "The four common transaction operations are credit, debit, hold, and release:\n\n- credit: Increases the balance of the account. It is typically used to represent income.\n- debit: Decreases the balance of the account. It is typically used to represent expenses.\n- hold: Setting aside of funds for a specific purpose, such as a pending transaction.\n- release: Represent the release of previously held funds for a pending transaction.\n",
                  "enum": ["debit", "credit", "hold", "release"],
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                },
                "origin": {
                  "description": "The operation from which the transaction originated",
                  "example": "card_transaction",
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                },
                "origin_transaction_at": {
                  "description": "Date and Time at which the transaction was created",
                  "example": "2022-01-01T01:00:00Z",
                  "format": "date-time",
                  "type": "string",
                  "x-struct": null,
                  "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.DateTimeSchema",
                  "x-validation": {}
                },
                "reverted_by_id": {
                  "description": "The ID of the transaction that reverts this ledger transaction",
                  "example": "ltx_5tgliBmzjZ6mpQPRbQjfKj",
                  "nullable": true,
                  "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                  "type": "string",
                  "x-context": "ledger_transaction",
                  "x-struct": null,
                  "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
                },
                "reverts_id": {
                  "description": "The ID of the transaction that this ledger transaction reverts",
                  "example": "ltx_5tgliBmzjZ6mpQPRbQjfKj",
                  "nullable": true,
                  "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                  "type": "string",
                  "x-context": "ledger_transaction",
                  "x-struct": null,
                  "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
                },
                "transaction_at": {
                  "description": "Date and Time at which the transaction was actually performed",
                  "example": "2022-01-01T01:00:00Z",
                  "format": "date-time",
                  "type": "string",
                  "x-struct": null,
                  "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.DateTimeSchema",
                  "x-validation": {}
                }
              },
              "title": "LedgerAccountTransaction",
              "type": "object",
              "x-struct": null,
              "x-validate": null
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          }
        },
        "readOnly": true,
        "title": "ListAccountTransaction",
        "type": "object",
        "x-struct": "Elixir.MonoBankingAPI.Schemas.Ledger.AccountTransactions.ListSchema",
        "x-validate": null
      },
      "COACHBankAccount": {
        "properties": {
          "account_number": {
            "description": "A colombian bank account number",
            "example": "123456789",
            "maxLength": 17,
            "minLength": 5,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "account_type": {
            "description": "An colombian account type",
            "enum": [
              "savings_account",
              "checking_account",
              "electronic_deposit"
            ],
            "example": "savings_account",
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "bank_code": {
            "description": "A colombian bank code, for example:\n- Bancolombia code: 007\n- Davivienda code: 051\n- BBVA code: 013\n- etc...\n",
            "example": "007",
            "type": "string",
            "x-return-bank": false,
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.BankTransfers.BankCodeSchema"
          },
          "payee": {
            "properties": {
              "document_number": {
                "description": "String field",
                "example": "451730",
                "maxLength": 15,
                "minLength": 5,
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "document_type": {
                "default": "CC",
                "description": "  The document types are represented by codes and can be:\n\n  For Colombia:\n  - CC\n  - TI\n  - NUIP\n  - TE\n  - CE\n  - NIT\n  - PASS\n  - PEP\n  - PPT\n  - FDO\n  - RC\n\n  For other countries:\n  - NID (National Identification)\n  - DL (Driver License)\n  - PASS\n",
                "enum": [
                  "CC",
                  "TI",
                  "NUIP",
                  "TE",
                  "CE",
                  "NIT",
                  "PASS",
                  "PEP",
                  "PPT",
                  "FDO",
                  "RC",
                  "DL",
                  "NID"
                ],
                "example": "CC",
                "title": "DocumentTypes",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "email": {
                "description": "Email",
                "example": "someone@gmail.com",
                "format": "email",
                "nullable": true,
                "pattern": "^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+){1,2}$",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "kind": {
                "description": "String field",
                "enum": ["co_person"],
                "example": "co_person",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "name": {
                "description": "A full name",
                "example": "Pedro Santiago Perez Rodriguez",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "phone_number": {
                "description": "Phone number",
                "example": "+573000000000",
                "nullable": true,
                "pattern": "^\\+[1-9]\\d{1,14}$",
                "type": "string",
                "x-region": "co",
                "x-struct": null,
                "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.PhoneSchema"
              }
            },
            "required": ["kind", "document_type", "document_number", "name"],
            "type": "object",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": ["account_type", "account_number", "bank_code", "payee"],
        "title": "COACHBankAccount",
        "type": "object",
        "x-struct": null,
        "x-validate": null
      },
      "PayoutCOTransfiya": {
        "allOf": [
          {
            "properties": {
              "target": {
                "allOf": [
                  {
                    "properties": {
                      "country": {
                        "description": "An ISO 3166-1 alpha-2 country code representing the country where the target amount will be\ncredited. The method and currency must support it.\n",
                        "example": "CO",
                        "pattern": "^[A-Z]{2}$",
                        "type": "string",
                        "x-struct": null,
                        "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.CountryCodeSchema"
                      },
                      "currency": {
                        "description": "An ISO 4217 currency code representing the currency in which the amount will be credited.\nThe method and country must support it.\n",
                        "enum": ["COP", "USD", "MXN", "CLP", "BRL", "PEN"],
                        "example": "COP",
                        "type": "string",
                        "x-struct": null,
                        "x-validate": null
                      },
                      "kind": {
                        "description": "String field",
                        "enum": ["co_transfiya_phone"],
                        "example": "co_transfiya_phone",
                        "type": "string",
                        "x-struct": null,
                        "x-validate": null
                      }
                    },
                    "required": ["kind", "country", "currency"],
                    "title": "CommonPayoutTarget",
                    "type": "object",
                    "x-struct": null,
                    "x-validate": null
                  },
                  {
                    "properties": {
                      "phone_number": {
                        "description": "Phone number",
                        "example": "+573000000000",
                        "pattern": "^\\+[1-9]\\d{1,14}$",
                        "type": "string",
                        "x-region": "co",
                        "x-struct": null,
                        "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.PhoneSchema"
                      }
                    },
                    "required": ["phone_number"],
                    "type": "object",
                    "x-struct": null,
                    "x-validate": null
                  }
                ],
                "type": "object",
                "x-struct": null,
                "x-validate": null
              }
            },
            "required": ["target"],
            "type": "object",
            "x-struct": null,
            "x-validate": null
          },
          {
            "properties": {
              "account_id": {
                "description": "A core account identifier",
                "example": "lacc_5tgliBmzjZ6mpQPRbQjfKj",
                "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                "type": "string",
                "x-context": "ledger_account",
                "x-struct": null,
                "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
              },
              "calculated_fees": {
                "additionalProperties": {
                  "description": "A JSON of fees that were calculated for the payout.\nthe key will be the fee type:\n\n- `bank_transfer_fee`\n- `bank_transfer_gmf`\n",
                  "properties": {
                    "amount": {
                      "description": "Amount of the fee",
                      "properties": {
                        "amount": {
                          "description": "Amount of money in `cents` with the format is int64. Thus, you\nsend an integer \"10.000.000\", we will interpret it as \"100.000,00\"\n",
                          "example": 100000000,
                          "format": "int64",
                          "maximum": 100000000000000,
                          "minimum": -100000000000000,
                          "type": "integer",
                          "x-struct": null,
                          "x-validate": null
                        },
                        "currency": {
                          "default": "COP",
                          "description": "Currency of money",
                          "enum": ["COP"],
                          "example": "COP",
                          "type": "string",
                          "x-struct": null,
                          "x-validate": null
                        }
                      },
                      "required": ["amount", "currency"],
                      "type": "object",
                      "x-struct": null,
                      "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MoneySchema"
                    },
                    "id": {
                      "description": "Indicates the format for resource's ID",
                      "example": "fee_5tgliBmzjZ6mpQPRbQjfKj",
                      "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                      "readOnly": true,
                      "type": "string",
                      "x-context": "fee",
                      "x-struct": null,
                      "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
                    }
                  },
                  "type": "object",
                  "x-struct": null,
                  "x-validate": null
                },
                "example": {
                  "bank_transfer_fee": {
                    "amount": { "amount": 100000000, "currency": "COP" },
                    "id": "fee_5tgliBmzjZ6mpQPRbQjfKj"
                  },
                  "bank_transfer_gmf": {
                    "amount": { "amount": 100000000, "currency": "COP" },
                    "id": "fee_5tgliBmzjZ6mpQPRbQjfKj"
                  }
                },
                "readOnly": true,
                "type": "object",
                "x-struct": null,
                "x-validate": null
              },
              "description": {
                "description": "A description for the payout",
                "example": "string",
                "nullable": true,
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "external_id": {
                "description": "A unique identifier to handle idempotency. If the identifier already exists,\nthe payout creation is skipped and the HTTP code response is 200. If not,\na new payout is created and the HTTP code response is 201.\n",
                "example": "1234859",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "id": {
                "description": "A payout identifier",
                "example": "cpout_5tgliBmzjZ6mpQPRbQjfKj",
                "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                "readOnly": true,
                "type": "string",
                "x-context": "payout",
                "x-struct": null,
                "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
              },
              "metadata": {
                "additionalProperties": true,
                "description": "A tenant-managed flat map for providing additional data about the payout. The values are stored and displayed as strings, and the provided information will be returned as-is in the payout details.\n",
                "example": { "id": 3, "reference": 123 },
                "nullable": true,
                "type": "object",
                "x-struct": null,
                "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MetadataSchema"
              },
              "method": {
                "description": "Specifies the way or process used to execute the payout. Each method is only available\nfor certain countries and currencies, and the processing time for completing a payout\nwill vary depending on the selected method.\n",
                "enum": ["co_ach", "co_transfiya", "co_mono_turbo"],
                "example": "co_transfiya",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "method_params": {
                "nullable": true,
                "type": "object",
                "x-struct": null,
                "x-validate": null
              },
              "reference": {
                "description": "A reference for the payout",
                "example": "string",
                "nullable": true,
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "source_amount": {
                "description": "The amount to be debited from the source account, specified in the same currency as\nthe source account, <b>This amount include the fees if were configured</b>. If this field\nis null, its value can be automatically calculated from the target amount.\n",
                "nullable": true,
                "properties": {
                  "amount": {
                    "description": "Amount of money in `cents` with the format is int64. Thus, you\nsend an integer \"10.000.000\", we will interpret it as \"100.000,00\"\n",
                    "example": 100000000,
                    "format": "int64",
                    "maximum": 100000000000000,
                    "minimum": 100,
                    "type": "integer",
                    "x-struct": null,
                    "x-validate": null
                  },
                  "currency": {
                    "default": "COP",
                    "description": "Currency of money",
                    "enum": ["COP"],
                    "example": "COP",
                    "type": "string",
                    "x-struct": null,
                    "x-validate": null
                  }
                },
                "required": ["amount", "currency"],
                "type": "object",
                "x-struct": null,
                "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MoneySchema"
              },
              "target_amount": {
                "description": "The amount to be credited to the target account, specified in the same currency as\nthe target account. If this field is null, its value can be automatically calculated\nfrom the source amount.\n",
                "nullable": true,
                "properties": {
                  "amount": {
                    "description": "Amount of money in `cents` with the format is int64. Thus, you\nsend an integer \"10.000.000\", we will interpret it as \"100.000,00\"\n",
                    "example": 100000000,
                    "format": "int64",
                    "maximum": 100000000000000,
                    "minimum": 100,
                    "type": "integer",
                    "x-struct": null,
                    "x-validate": null
                  },
                  "currency": {
                    "default": "COP",
                    "description": "Currency of money",
                    "enum": ["COP"],
                    "example": "COP",
                    "type": "string",
                    "x-struct": null,
                    "x-validate": null
                  }
                },
                "required": ["amount", "currency"],
                "type": "object",
                "x-struct": null,
                "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MoneySchema"
              }
            },
            "required": ["external_id", "account_id", "method"],
            "title": "CommonPayoutSchema",
            "type": "object",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Core.Payouts.CommonSchema"
          }
        ],
        "title": "PayoutCOTransfiya",
        "type": "object",
        "x-struct": null,
        "x-validate": null
      },
      "SpendingControlManageTargetSchema": {
        "description": "It contains a collection of target ID's (Base 62 format)",
        "properties": {
          "ids": {
            "items": {
              "description": "Target ID (Base 62 format)",
              "example": "car_5tgliBmzjZ6mpQPRbQjfKj",
              "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
              "readOnly": true,
              "type": "string",
              "x-struct": null,
              "x-validate": "Elixir.MonoBankingAPI.Schemas.SpendingControls.SpendingControlManageTargetSchema"
            },
            "minItems": 1,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          }
        },
        "readOnly": true,
        "required": ["ids"],
        "title": "SpendingControlManageTargetSchema",
        "type": "object",
        "x-struct": "Elixir.MonoBankingAPI.Schemas.SpendingControls.SpendingControlManageTargetSchema",
        "x-validate": null
      },
      "CollectionLink": {
        "description": "Represents the collection link and its settings",
        "properties": {
          "account_id": {
            "description": "Indicates the format for resource's ID",
            "example": "acc_5tgliBmzjZ6mpQPRbQjfKj",
            "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
            "type": "string",
            "x-context": "account",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
          },
          "amount": {
            "description": "Money schema",
            "properties": {
              "amount": {
                "description": "Amount of money in `cents` with the format is int64. Thus, you\nsend an integer \"10.000.000\", we will interpret it as \"100.000,00\"\n",
                "example": 100000000,
                "format": "int64",
                "maximum": 100000000000000,
                "minimum": -100000000000000,
                "type": "integer",
                "x-struct": null,
                "x-validate": null
              },
              "currency": {
                "default": "COP",
                "description": "Currency of money",
                "enum": ["COP"],
                "example": "COP",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              }
            },
            "required": ["amount", "currency"],
            "type": "object",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MoneySchema"
          },
          "amount_validation": {
            "default": "free",
            "description": "Sets the collection link validations of the `amount` field. Two validations will always be present in the checkout form `amount` field:\n1. The amount must be greater than zero.\n2. The amount must be within the limits allowed by Mono.\n\nThe field \"amount_validation\" is an additional validation configured to be applied to the checkout form's amount field.\n- fixed: No validation will be applied to the amount field in the checkout form, and the user will not be able to enter an amount.\n  The checkout form's amount field will contain the configured amount (the amount is fixed).\n- free: No validation will be applied, and the user can enter any amount in the checkout form.\n- can_be_less: The amount entered by the user can be less than or equal to the configured amount.\n- can_be_greater: The amount entered by the user can be greater than or equal to the configured amount.\n",
            "enum": ["free", "fixed", "can_be_less", "can_be_greater"],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "enabled": {
            "default": true,
            "description": "Turns the collection link on or off.",
            "example": false,
            "readOnly": true,
            "type": "boolean",
            "x-struct": null,
            "x-validate": null
          },
          "expires_at": {
            "description": "Sets an expiration date and time for the collection link.\nIf a user attempts to enter an expired link, a message will be displayed informing them that the link has expired.\n",
            "example": "2022-01-01T01:00:00Z",
            "format": "date-time",
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.DateTimeSchema",
            "x-validation": {
              "amount_to_add": 10,
              "comparison": "gt",
              "unit": "minute"
            }
          },
          "external_id": {
            "description": "Associates the collection link with an external register.\nFor example, this field may contain identifiers of entities that could be used in some external system.\n",
            "example": "37979c4d-9a6b-40de-b258-42e62f7ee4f1",
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "id": {
            "description": "Indicates the format for resource's ID",
            "example": "clink_5tgliBmzjZ6mpQPRbQjfKj",
            "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
            "readOnly": true,
            "type": "string",
            "x-context": "collection_link",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
          },
          "inserted_at": {
            "description": "Indicates when a collection link was created",
            "example": "2022-01-01T01:00:00Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.DateTimeSchema",
            "x-validation": {}
          },
          "link": {
            "description": "Contains the collection link URL",
            "example": "https://cuentamono.com/collections/0nhhhaDS62th4QyoS6oi8h",
            "format": "uri-reference",
            "readOnly": true,
            "type": "string",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.URLSchema"
          },
          "payer": {
            "description": "Sets the payer data, which will be preloaded into the checkout form. This payer data can be optional",
            "properties": {
              "document_number": {
                "description": "Sets the payer's document number, which will be preloaded into the checkout form.\nThis field is alphanumeric, only accepts letters and numbers.\n",
                "example": "string",
                "nullable": true,
                "pattern": "^[a-zA-Z0-9]+$",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "document_type": {
                "default": "CC",
                "description": "  The document types are represented by codes and can be:\n\n  For Colombia:\n  - CC\n  - TI\n  - NUIP\n  - TE\n  - CE\n  - NIT\n  - PASS\n  - PEP\n  - PPT\n  - FDO\n  - RC\n\n  For other countries:\n  - NID (National Identification)\n  - DL (Driver License)\n  - PASS\n",
                "enum": [
                  "CC",
                  "TI",
                  "NUIP",
                  "TE",
                  "CE",
                  "NIT",
                  "PASS",
                  "PEP",
                  "PPT",
                  "FDO",
                  "RC",
                  "DL",
                  "NID"
                ],
                "example": "CC",
                "nullable": true,
                "title": "DocumentTypes",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "email": {
                "description": "Sets the payer's email, which will be preloaded into the checkout form",
                "example": "someone@gmail.com",
                "format": "email",
                "nullable": true,
                "pattern": "^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+){1,2}$",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "name": {
                "description": "Sets the payer's full name, which will be preloaded into the checkout form",
                "example": "string",
                "nullable": true,
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "note": {
                "description": "Sets the note field in the checkout form. When there is no note,\n                and it is configured not to be editable, the checkout form's note field will not be visible.",
                "properties": {
                  "editable": {
                    "default": false,
                    "description": "Allows to payer to edit the note field",
                    "example": false,
                    "type": "boolean",
                    "x-struct": null,
                    "x-validate": null
                  },
                  "required": {
                    "default": false,
                    "description": "Requires to payer to fill the note field",
                    "example": false,
                    "type": "boolean",
                    "x-struct": null,
                    "x-validate": null
                  },
                  "value": {
                    "description": "Sets a note value to be preloaded in the checkout form",
                    "example": "string",
                    "nullable": true,
                    "type": "string",
                    "x-struct": null,
                    "x-validate": null
                  }
                },
                "required": ["editable", "required", "value"],
                "type": "object",
                "x-struct": null,
                "x-validate": null
              },
              "phone": {
                "description": "Sets the payer's phone number, which will be preloaded into the checkout form",
                "example": "+573000000000",
                "nullable": true,
                "pattern": "^\\+[1-9]\\d{1,14}$",
                "type": "string",
                "x-region": "co",
                "x-struct": null,
                "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.PhoneSchema"
              }
            },
            "required": [
              "name",
              "document_type",
              "document_number",
              "email",
              "phone"
            ],
            "type": "object",
            "x-struct": null,
            "x-validate": null
          },
          "redirect_url": {
            "description": "Sets a URL on the redirect button on the payment receipt after payment is made.\nThe URL contains three parameters from the query string:\n\n1. id: this contains the same value as the field \"external_id\"\n2. clink_id: this is the collection link ID\n3. intent_id: this is the collection intent ID or the payment ID\n",
            "example": "https://www.cuentamono.com/",
            "format": "uri-reference",
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.URLSchema"
          },
          "reference": {
            "description": "Sets the reference field in the checkout form. When there is no reference,\n            and it is configured not to be editable, the checkout form reference field will not be visible.",
            "properties": {
              "editable": {
                "default": false,
                "description": "Allows to payer to edit the reference field",
                "example": false,
                "type": "boolean",
                "x-struct": null,
                "x-validate": null
              },
              "required": {
                "default": false,
                "description": "Requires to payer to fill the reference field",
                "example": false,
                "type": "boolean",
                "x-struct": null,
                "x-validate": null
              },
              "value": {
                "description": "Prefill the reference field into the form",
                "example": "string",
                "nullable": true,
                "type": "string",
                "x-struct": null,
                "x-validate": null
              }
            },
            "required": ["editable", "required", "value"],
            "type": "object",
            "x-struct": null,
            "x-validate": null
          },
          "successful_payments": {
            "description": "Keeps a record of payments that were successfully processed.",
            "example": 1,
            "readOnly": true,
            "type": "integer",
            "x-struct": null,
            "x-validate": null
          },
          "updated_at": {
            "description": "Indicates when a collection link was updated",
            "example": "2022-01-01T01:00:00Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.DateTimeSchema",
            "x-validation": {}
          },
          "usage_type": {
            "description": "Sets the collection link type. There are two types of collection links:\n1. single_use: As the name suggests, this type of collection link can only be used once.\n  When a successful payment is made, the link will be disabled.\n  The collection link will display a message if a user tries to access it again after the payment has been made.\n2. multi_use: As the name suggests, this type of collection link can be used multiple times\n",
            "enum": ["single_use", "multi_use"],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": ["account_id", "amount", "amount_validation", "usage_type"],
        "title": "CollectionLink",
        "type": "object",
        "x-struct": "Elixir.MonoBankingAPI.Schemas.CollectionLinks.CollectionLinkSchema",
        "x-validate": null
      },
      "ListSpendingControlSchema": {
        "description": "It contains a collection of spending controls. It also contains paging information",
        "properties": {
          "pagination": {
            "description": "Pagination schema",
            "properties": {
              "page_number": {
                "description": "Current page number",
                "example": 1,
                "type": "integer",
                "x-struct": null,
                "x-validate": null
              },
              "page_size": {
                "description": "Amount of items by page",
                "example": 10,
                "type": "integer",
                "x-struct": null,
                "x-validate": null
              },
              "total_items": {
                "description": "Total of items by the resource",
                "example": 100,
                "type": "integer",
                "x-struct": null,
                "x-validate": null
              },
              "total_pages": {
                "description": "Total pages by the resource",
                "example": 10,
                "type": "integer",
                "x-struct": null,
                "x-validate": null
              }
            },
            "readOnly": true,
            "title": "Pagination",
            "type": "object",
            "x-struct": "Elixir.MonoBankingAPI.Schemas.Components.PaginationSchema",
            "x-validate": null
          },
          "spending_controls": {
            "description": "It contains a list with spending controls",
            "items": {
              "description": "Spending control schema",
              "properties": {
                "currency_code": {
                  "description": "Spending control currency code",
                  "enum": ["COP", "USD", "MXN", "CLP", "BRL", "PEN"],
                  "nullable": true,
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                },
                "id": {
                  "description": "Spending Control ID",
                  "example": "spc_5tgliBmzjZ6mpQPRbQjfKj",
                  "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                  "readOnly": true,
                  "type": "string",
                  "x-context": "spending_control",
                  "x-struct": null,
                  "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
                },
                "nickname": {
                  "description": "Spending control nickname",
                  "example": "Holiday Spending Control",
                  "nullable": true,
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                },
                "rules": {
                  "description": "Configured spending control rules",
                  "minProperties": 1,
                  "properties": {
                    "card_usage": {
                      "description": "Spending control rule to disable card usage for specific card payments",
                      "properties": {
                        "disabled_card_usages": {
                          "items": {
                            "enum": [
                              "online_purchase",
                              "physical_purchase",
                              "atm_withdrawal"
                            ],
                            "example": "online_purchase",
                            "type": "string",
                            "x-struct": null,
                            "x-validate": null
                          },
                          "maxItems": 3,
                          "minItems": 1,
                          "type": "array",
                          "x-struct": null,
                          "x-validate": null
                        }
                      },
                      "required": ["disabled_card_usages"],
                      "title": "CardUsageSpendingControlRule",
                      "type": "object",
                      "x-struct": "Elixir.MonoBankingAPI.Schemas.SpendingControls.Rules.CardUsageRuleSchema",
                      "x-validate": null
                    },
                    "mcc": {
                      "description": "Spending control rule to limit spending based on merchant category codes",
                      "properties": {
                        "mccs": {
                          "items": {
                            "description": "MCC code",
                            "example": "5411",
                            "maxLength": 4,
                            "minLength": 4,
                            "type": "string",
                            "x-struct": null,
                            "x-validate": null
                          },
                          "minItems": 1,
                          "type": "array",
                          "x-struct": null,
                          "x-validate": null
                        },
                        "operation": {
                          "description": "If `forbid_mccs`, payments for the listed MCCs are not authorized. If `allow_mccs`, payments are authorized only for the listed MCCs.",
                          "enum": ["allow_mccs", "forbid_mccs"],
                          "example": "allow_mccs",
                          "type": "string",
                          "x-struct": null,
                          "x-validate": null
                        }
                      },
                      "required": ["mccs", "operation"],
                      "title": "MCCControlRule",
                      "type": "object",
                      "x-struct": "Elixir.MonoBankingAPI.Schemas.SpendingControls.Rules.MCCRuleSchema",
                      "x-validate": null
                    },
                    "merchant_name": {
                      "description": "Spending control rule to limit spending based on merchant names",
                      "properties": {
                        "operation": {
                          "description": "If `allow_pattern`, only payments with merchant names that match the pattern are authorized. If `forbid_pattern` is used,  payments with merchant names that match the pattern are not authorized.",
                          "enum": ["allow_pattern", "forbid_pattern"],
                          "example": "allow_pattern",
                          "type": "string",
                          "x-struct": null,
                          "x-validate": null
                        },
                        "regex": {
                          "description": "Merchant name regex",
                          "example": "^AMAZON.*",
                          "type": "string",
                          "x-struct": null,
                          "x-validate": null
                        }
                      },
                      "required": ["regex", "operation"],
                      "title": "MerchantNameControlRule",
                      "type": "object",
                      "x-struct": "Elixir.MonoBankingAPI.Schemas.SpendingControls.Rules.MerchantNameRuleSchema",
                      "x-validate": null
                    },
                    "mid": {
                      "description": "Spending control rule to limit spending based on merchant ids",
                      "properties": {
                        "mids": {
                          "items": {
                            "description": "Merchant ID",
                            "example": "012345678",
                            "type": "string",
                            "x-struct": null,
                            "x-validate": null
                          },
                          "minItems": 1,
                          "type": "array",
                          "x-struct": null,
                          "x-validate": null
                        },
                        "operation": {
                          "description": "If `forbid_mids`, payments for the listed MIDs are not authorized. If `allow_mids`, payments are authorized only for the listed MIDs.",
                          "enum": ["allow_mids", "forbid_mids"],
                          "example": "allow_mids",
                          "type": "string",
                          "x-struct": null,
                          "x-validate": null
                        }
                      },
                      "required": ["mids", "operation"],
                      "title": "MIDControlRule",
                      "type": "object",
                      "x-struct": "Elixir.MonoBankingAPI.Schemas.SpendingControls.Rules.MIDRuleSchema",
                      "x-validate": null
                    },
                    "velocity": {
                      "minProperties": 1,
                      "properties": {
                        "daily": {
                          "description": "Limit amount for daily spending",
                          "properties": {
                            "amount": {
                              "description": "Amount of money in `cents` with the format is int64. Thus, you\nsend an integer \"10.000.000\", we will interpret it as \"100.000,00\"\n",
                              "example": 100000000,
                              "format": "int64",
                              "maximum": 100000000000000,
                              "minimum": -100000000000000,
                              "type": "integer",
                              "x-struct": null,
                              "x-validate": null
                            },
                            "currency": {
                              "default": "COP",
                              "description": "Currency of money",
                              "enum": [
                                "COP",
                                "USD",
                                "MXN",
                                "CLP",
                                "BRL",
                                "PEN"
                              ],
                              "example": "COP",
                              "type": "string",
                              "x-struct": null,
                              "x-validate": null
                            }
                          },
                          "required": ["amount", "currency"],
                          "type": "object",
                          "x-struct": null,
                          "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MoneySchema"
                        },
                        "monthly": {
                          "description": "Limit amount for monthly spending",
                          "properties": {
                            "amount": {
                              "description": "Amount of money in `cents` with the format is int64. Thus, you\nsend an integer \"10.000.000\", we will interpret it as \"100.000,00\"\n",
                              "example": 100000000,
                              "format": "int64",
                              "maximum": 100000000000000,
                              "minimum": -100000000000000,
                              "type": "integer",
                              "x-struct": null,
                              "x-validate": null
                            },
                            "currency": {
                              "default": "COP",
                              "description": "Currency of money",
                              "enum": [
                                "COP",
                                "USD",
                                "MXN",
                                "CLP",
                                "BRL",
                                "PEN"
                              ],
                              "example": "COP",
                              "type": "string",
                              "x-struct": null,
                              "x-validate": null
                            }
                          },
                          "required": ["amount", "currency"],
                          "type": "object",
                          "x-struct": null,
                          "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MoneySchema"
                        },
                        "weekly": {
                          "description": "Limit amount for weekly spending",
                          "properties": {
                            "amount": {
                              "description": "Amount of money in `cents` with the format is int64. Thus, you\nsend an integer \"10.000.000\", we will interpret it as \"100.000,00\"\n",
                              "example": 100000000,
                              "format": "int64",
                              "maximum": 100000000000000,
                              "minimum": -100000000000000,
                              "type": "integer",
                              "x-struct": null,
                              "x-validate": null
                            },
                            "currency": {
                              "default": "COP",
                              "description": "Currency of money",
                              "enum": [
                                "COP",
                                "USD",
                                "MXN",
                                "CLP",
                                "BRL",
                                "PEN"
                              ],
                              "example": "COP",
                              "type": "string",
                              "x-struct": null,
                              "x-validate": null
                            }
                          },
                          "required": ["amount", "currency"],
                          "type": "object",
                          "x-struct": null,
                          "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MoneySchema"
                        }
                      },
                      "title": "VelocitySpendingControlRule",
                      "type": "object",
                      "x-struct": "Elixir.MonoBankingAPI.Schemas.SpendingControls.Rules.VelocityRuleSchema",
                      "x-validate": null
                    },
                    "withdrawal_velocity": {
                      "description": "Spending control rule to limit spending based on withdrawal velocity",
                      "minProperties": 1,
                      "properties": {
                        "daily": {
                          "description": "Limit amount for daily withdrawal spending",
                          "properties": {
                            "amount": {
                              "description": "Amount of money in `cents` with the format is int64. Thus, you\nsend an integer \"10.000.000\", we will interpret it as \"100.000,00\"\n",
                              "example": 100000000,
                              "format": "int64",
                              "maximum": 100000000000000,
                              "minimum": -100000000000000,
                              "type": "integer",
                              "x-struct": null,
                              "x-validate": null
                            },
                            "currency": {
                              "default": "COP",
                              "description": "Currency of money",
                              "enum": [
                                "COP",
                                "USD",
                                "MXN",
                                "CLP",
                                "BRL",
                                "PEN"
                              ],
                              "example": "COP",
                              "type": "string",
                              "x-struct": null,
                              "x-validate": null
                            }
                          },
                          "required": ["amount", "currency"],
                          "type": "object",
                          "x-struct": null,
                          "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MoneySchema"
                        },
                        "monthly": {
                          "description": "Limit amount for monthly withdrawal spending",
                          "properties": {
                            "amount": {
                              "description": "Amount of money in `cents` with the format is int64. Thus, you\nsend an integer \"10.000.000\", we will interpret it as \"100.000,00\"\n",
                              "example": 100000000,
                              "format": "int64",
                              "maximum": 100000000000000,
                              "minimum": -100000000000000,
                              "type": "integer",
                              "x-struct": null,
                              "x-validate": null
                            },
                            "currency": {
                              "default": "COP",
                              "description": "Currency of money",
                              "enum": [
                                "COP",
                                "USD",
                                "MXN",
                                "CLP",
                                "BRL",
                                "PEN"
                              ],
                              "example": "COP",
                              "type": "string",
                              "x-struct": null,
                              "x-validate": null
                            }
                          },
                          "required": ["amount", "currency"],
                          "type": "object",
                          "x-struct": null,
                          "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MoneySchema"
                        }
                      },
                      "title": "WithdrawalVelocitySpendingControlRule",
                      "type": "object",
                      "x-struct": "Elixir.MonoBankingAPI.Schemas.SpendingControls.Rules.WithdrawalVelocityRuleSchema",
                      "x-validate": null
                    }
                  },
                  "type": "object",
                  "x-struct": null,
                  "x-validate": null
                },
                "target": {
                  "default": "card",
                  "description": "Spending control target",
                  "enum": ["card", "card_config_group"],
                  "nullable": false,
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                }
              },
              "required": ["rules"],
              "title": "SpendingControl",
              "type": "object",
              "x-struct": "Elixir.MonoBankingAPI.Schemas.SpendingControls.SpendingControlSchema",
              "x-validate": null
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          }
        },
        "readOnly": true,
        "title": "ListSpendingControlSchema",
        "type": "object",
        "x-struct": "Elixir.MonoBankingAPI.Schemas.SpendingControls.ListSpendingControlSchema",
        "x-validate": null
      },
      "PayeeBankAccountSchema": {
        "description": "Sets the destination bank account information, which will be contain the bank, account type and the account number to be transferred the money.\n",
        "nullable": true,
        "properties": {
          "bank_code": {
            "description": "Sets the bank code, which is used to identify the bank where the money will be transferred.\n\nYou can find the bank code by using the GET banks endpoint and look the code field.\n",
            "nullable": true,
            "type": "string",
            "x-return-bank": true,
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.BankTransfers.BankCodeSchema"
          },
          "number": {
            "description": "Sets the payee's account number\n",
            "example": "123456789",
            "maxLength": 17,
            "minLength": 5,
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "type": {
            "description": "Sets the payee's account type\n",
            "enum": [
              "savings_account",
              "checking_account",
              "electronic_deposit"
            ],
            "example": "savings_account",
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "title": "PayeeBankAccountSchema",
        "type": "object",
        "x-struct": "Elixir.MonoBankingAPI.Schemas.BankTransfers.PayeeBankAccountSchema",
        "x-validate": "Elixir.MonoBankingAPI.Schemas.BankTransfers.PayeeBankAccountSchema"
      },
      "CollectionIntents": {
        "description": "Schema for list of collection intents paginated",
        "properties": {
          "collection_intents": {
            "description": "List of collection intents",
            "items": {
              "description": "In this scheme, you obtain information about the collection intent,\nsuch as the amount of the intent, the date on which the collection intent was made,\nthe note, reference and data about the payer, such as the document number,\ndocument type and name of the person who paid.\nYou can also find out the status of the collection intent.\n",
              "properties": {
                "account_id": {
                  "description": "Indicates the format for resource's ID",
                  "example": "acc_5tgliBmzjZ6mpQPRbQjfKj",
                  "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                  "type": "string",
                  "x-context": "account",
                  "x-struct": null,
                  "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
                },
                "amount": {
                  "description": "Money schema",
                  "properties": {
                    "amount": {
                      "description": "Amount of money in `cents` with the format is int64. Thus, you\nsend an integer \"10.000.000\", we will interpret it as \"100.000,00\"\n",
                      "example": 100000000,
                      "format": "int64",
                      "maximum": 100000000000000,
                      "minimum": -100000000000000,
                      "type": "integer",
                      "x-struct": null,
                      "x-validate": null
                    },
                    "currency": {
                      "default": "COP",
                      "description": "Currency of money",
                      "enum": ["COP"],
                      "example": "COP",
                      "type": "string",
                      "x-struct": null,
                      "x-validate": null
                    }
                  },
                  "required": ["amount", "currency"],
                  "type": "object",
                  "x-struct": null,
                  "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MoneySchema"
                },
                "bank_code": {
                  "description": "Bank code used by PSE to make the collection",
                  "example": "1007",
                  "type": "string",
                  "writeOnly": true,
                  "x-struct": null,
                  "x-validate": null
                },
                "id": {
                  "description": "Indicates the format for resource's ID",
                  "example": "cint_5tgliBmzjZ6mpQPRbQjfKj",
                  "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                  "readOnly": true,
                  "type": "string",
                  "x-context": "collection_intent",
                  "x-struct": null,
                  "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
                },
                "inserted_at": {
                  "description": "Indicates when a resource is created",
                  "example": "2022-01-01T01:00:00Z",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string",
                  "x-struct": null,
                  "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.DateTimeSchema",
                  "x-validation": {}
                },
                "ip": {
                  "description": "The user IP address",
                  "example": "88.221.182.60",
                  "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$",
                  "title": "IPV4",
                  "type": "string",
                  "writeOnly": true,
                  "x-struct": null,
                  "x-validate": null
                },
                "note": {
                  "description": "Note indicated by the user of the client",
                  "example": "February payment",
                  "nullable": true,
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                },
                "payer": {
                  "properties": {
                    "document_number": {
                      "description": "Document number of payer",
                      "example": "1099711789",
                      "type": "string",
                      "x-struct": null,
                      "x-validate": null
                    },
                    "document_type": {
                      "default": "CC",
                      "description": "  The document types are represented by codes and can be:\n\n  For Colombia:\n  - CC\n  - TI\n  - NUIP\n  - TE\n  - CE\n  - NIT\n  - PASS\n  - PEP\n  - PPT\n  - FDO\n  - RC\n\n  For other countries:\n  - NID (National Identification)\n  - DL (Driver License)\n  - PASS\n",
                      "enum": [
                        "CC",
                        "TI",
                        "NUIP",
                        "TE",
                        "CE",
                        "NIT",
                        "PASS",
                        "PEP",
                        "PPT",
                        "FDO",
                        "RC",
                        "DL",
                        "NID"
                      ],
                      "example": "CC",
                      "title": "DocumentTypes",
                      "type": "string",
                      "x-struct": null,
                      "x-validate": null
                    },
                    "email": {
                      "description": "Payer email address",
                      "example": "someone@gmail.com",
                      "format": "email",
                      "pattern": "^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+){1,2}$",
                      "type": "string",
                      "writeOnly": true,
                      "x-struct": null,
                      "x-validate": null
                    },
                    "name": {
                      "description": "Name of payer",
                      "example": "Martina Brooks",
                      "type": "string",
                      "x-struct": null,
                      "x-validate": null
                    },
                    "person_type": {
                      "default": "legal",
                      "description": "  The person types can be:\n  - legal,\n  - natural\n",
                      "enum": ["natural", "legal"],
                      "example": "natural",
                      "title": "PersonTypes",
                      "type": "string",
                      "writeOnly": true,
                      "x-struct": null,
                      "x-validate": null
                    },
                    "phone_number": {
                      "description": "Payer phone number",
                      "example": "+573000000000",
                      "pattern": "^\\+[1-9]\\d{1,14}$",
                      "type": "string",
                      "writeOnly": true,
                      "x-region": "co",
                      "x-struct": null,
                      "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.PhoneSchema"
                    }
                  },
                  "required": [
                    "name",
                    "document_type",
                    "document_number",
                    "phone_number",
                    "email",
                    "person_type"
                  ],
                  "type": "object",
                  "x-struct": null,
                  "x-validate": null
                },
                "payment": {
                  "properties": {
                    "provider": {
                      "default": "pse",
                      "description": "  The providers of the collections are the intermediaries to facilitate the collection of the money.\n  These are the current ones:\n  - pse\n",
                      "enum": ["pse"],
                      "example": "pse",
                      "title": "CollectionProviders",
                      "type": "string",
                      "x-struct": null,
                      "x-validate": null
                    },
                    "transaction_id": {
                      "description": "The transaction ID with which you can identify the collection intent with the provider",
                      "example": "1115065899",
                      "readOnly": true,
                      "type": "string",
                      "x-struct": null,
                      "x-validate": null
                    },
                    "url": {
                      "description": "The URL of the provider that will be used to complete the collection intent",
                      "example": "https://registro.desarrollo.pse.com.co/PSENF/index.html?enc=123",
                      "format": "uri-reference",
                      "readOnly": true,
                      "type": "string",
                      "x-struct": null,
                      "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.URLSchema"
                    }
                  },
                  "type": "object",
                  "x-struct": null,
                  "x-validate": null
                },
                "redirect_url": {
                  "description": "The URL to redirect when the collection intent successfully completes through the provider.",
                  "example": "https://my-page/voucher/ID_123",
                  "format": "uri-reference",
                  "type": "string",
                  "writeOnly": true,
                  "x-struct": null,
                  "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.URLSchema"
                },
                "reference": {
                  "description": "Reference indicated by the client or by the user of the client",
                  "example": "REF. #5578136",
                  "nullable": true,
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                },
                "state": {
                  "default": "created",
                  "description": "- created: Represents when a payer completes and submits the payment form.\n- in_progress: Represents when the user is carrying out the payment process in the bank interface, the collection intent enters this state.\n- approved_in_provider: Remains in this state when the user has successfully completed the payment process, but the payment has not yet been credited.\n- account_credited: Means that the payment has already been credited to the customer's account balance.\n- failed: Occurs when the user could not finish the payment process.\n",
                  "enum": [
                    "created",
                    "in_progress",
                    "approved_in_provider",
                    "account_credited",
                    "failed"
                  ],
                  "readOnly": true,
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                },
                "updated_at": {
                  "description": "Indicates when a resource is updated",
                  "example": "2022-01-01T01:00:00Z",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string",
                  "x-struct": null,
                  "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.DateTimeSchema",
                  "x-validation": {}
                }
              },
              "required": [
                "amount",
                "account_id",
                "ip",
                "bank_code",
                "redirect_url",
                "payer",
                "payment"
              ],
              "title": "CollectionIntent",
              "type": "object",
              "x-struct": "Elixir.MonoBankingAPI.Schemas.CollectionIntents.CollectionIntentSchema",
              "x-validate": null
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "pagination": {
            "description": "Pagination schema",
            "properties": {
              "page_number": {
                "description": "Current page number",
                "example": 1,
                "type": "integer",
                "x-struct": null,
                "x-validate": null
              },
              "page_size": {
                "description": "Amount of items by page",
                "example": 10,
                "type": "integer",
                "x-struct": null,
                "x-validate": null
              },
              "total_items": {
                "description": "Total of items by the resource",
                "example": 100,
                "type": "integer",
                "x-struct": null,
                "x-validate": null
              },
              "total_pages": {
                "description": "Total pages by the resource",
                "example": 10,
                "type": "integer",
                "x-struct": null,
                "x-validate": null
              }
            },
            "readOnly": true,
            "title": "Pagination",
            "type": "object",
            "x-struct": "Elixir.MonoBankingAPI.Schemas.Components.PaginationSchema",
            "x-validate": null
          }
        },
        "readOnly": true,
        "title": "CollectionIntents",
        "type": "object",
        "x-struct": "Elixir.MonoBankingAPI.Schemas.CollectionIntents.ListCollectionIntentsSchema",
        "x-validate": null
      },
      "CardUsageSchema": {
        "properties": {
          "disabled_card_usages": {
            "items": {
              "enum": [
                "online_purchase",
                "physical_purchase",
                "atm_withdrawal"
              ],
              "example": "online_purchase",
              "type": "string",
              "x-struct": null,
              "x-validate": null
            },
            "maxItems": 3,
            "minItems": 1,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "type": {
            "default": "card_usage",
            "description": "String field",
            "example": "card_usage",
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": ["type", "disabled_card_usages"],
        "title": "CardUsageSchema",
        "type": "object",
        "x-struct": "Elixir.MonoBankingAPI.Schemas.SpendingControls.Rules.CardUsageSchema",
        "x-validate": null
      },
      "BatchTransfer": {
        "description": "A batch of transfers represents a group of transfers data.\n",
        "properties": {
          "account_id": {
            "description": "Represents the account of the client to which a debit entry will be made as a result of the transaction.\n",
            "example": "acc_5tgliBmzjZ6mpQPRbQjfKj",
            "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
            "readOnly": true,
            "type": "string",
            "x-context": "account",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
          },
          "id": {
            "description": "Indicates the format for resource's ID",
            "example": "bat_5tgliBmzjZ6mpQPRbQjfKj",
            "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
            "readOnly": true,
            "type": "string",
            "x-context": "batch_transfer",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
          },
          "inserted_at": {
            "description": "Indicates when a batch of transfers was created",
            "example": "2022-01-01T01:00:00Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.DateTimeSchema",
            "x-validation": {}
          },
          "origin": {
            "description": "Represents the creation origin of the transfer's batch.\n\n- file: When transfers were uploaded by an excel file.\n- manual: When transfers were created into the Mono Dashboard.\n- api: When transfers were uploaded through Mono Banking API.\n",
            "enum": ["file", "manual", "api", "core"],
            "example": "api",
            "readOnly": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "state": {
            "description": "Represents the batch state\n",
            "enum": [
              "created",
              "pending_otp",
              "verified_otp",
              "cancelled",
              "processing_transactions",
              "partially_approved",
              "declined",
              "approved",
              "duplicated"
            ],
            "example": "created",
            "readOnly": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "total_amount": {
            "description": "Represents the total amount of money of the batch.\n",
            "properties": {
              "amount": {
                "description": "Amount of money in `cents` with the format is int64. Thus, you\nsend an integer \"10.000.000\", we will interpret it as \"100.000,00\"\n",
                "example": 100000000,
                "format": "int64",
                "maximum": 100000000000000,
                "minimum": -100000000000000,
                "type": "integer",
                "x-struct": null,
                "x-validate": null
              },
              "currency": {
                "default": "COP",
                "description": "Currency of money",
                "enum": ["COP"],
                "example": "COP",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              }
            },
            "readOnly": true,
            "required": ["amount", "currency"],
            "type": "object",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MoneySchema"
          },
          "updated_at": {
            "description": "Indicates when a batch of transfers was updated",
            "example": "2022-01-01T01:00:00Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.DateTimeSchema",
            "x-validation": {}
          }
        },
        "readOnly": true,
        "required": ["account_id"],
        "title": "BatchTransfer",
        "type": "object",
        "x-struct": "Elixir.MonoBankingAPI.Schemas.BankTransfers.BatchSchema",
        "x-validate": null
      },
      "SpendingControlTargetsId": {
        "description": "Indicates the format for target's ID",
        "example": "car_5tgliBmzjZ6mpQPRbQjfKj",
        "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
        "title": "SpendingControlTargetsId",
        "type": "string",
        "x-struct": null,
        "x-validate": null
      },
      "LedgerAccount": {
        "description": "A ledger account is a dedicated account managed by our Mono Ledger system.\n",
        "properties": {
          "currency_code": {
            "description": "The currency associated with the account balance.",
            "enum": ["COP", "USD", "MXN", "CLP", "BRL", "PEN"],
            "nullable": false,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "holder_id": {
            "description": "Identifier of the third-party account holder.",
            "example": "acch_5tgliBmzjZ6mpQPRbQjfKj",
            "nullable": false,
            "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
            "type": "string",
            "x-context": "account_holder",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
          },
          "id": {
            "description": "Indicates the format for resource's ID",
            "example": "lacc_5tgliBmzjZ6mpQPRbQjfKj",
            "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
            "readOnly": true,
            "type": "string",
            "x-context": "ledger_account",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
          },
          "inserted_at": {
            "description": "Indicates when a ledger account was created",
            "example": "2022-01-01T01:00:00Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.DateTimeSchema",
            "x-validation": {}
          },
          "metadata": {
            "additionalProperties": true,
            "description": "A tenant-managed flat map for providing additional data about the account. The values are stored and displayed as strings, and the provided information will be returned as-is in the account details.\n",
            "example": { "id": 3, "reference": 123 },
            "nullable": true,
            "type": "object",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MetadataSchema"
          },
          "name": {
            "description": "Name of the account, which is used to describe the account's purpose better.",
            "example": "Main account",
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "program_id": {
            "description": "Program identifier. If the value is empty, the account is associated with the tenant default program.",
            "example": "pro_5tgliBmzjZ6mpQPRbQjfKj",
            "nullable": true,
            "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
            "type": "string",
            "x-context": "program",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
          },
          "provider": {
            "description": "Specifies the provider of the account, for ledger accounts, the provider will be always `mono_ledger`",
            "enum": ["mono_ledger"],
            "readOnly": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "state": {
            "description": "State of the account, it can be one of the following values:\n- active: it's enabled to perform operations with the account balance.\n- blocked: it's disabled by a tenant and couldn't perform any operation with the account balance.\n- canceled: it's disabled by Mono and couldn't perform any operation with the account balance.\n",
            "enum": ["active", "blocked", "canceled"],
            "readOnly": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "state_reason": {
            "description": "It provides the reason why the account could be blocked or canceled. It is required when the account is transitioned to being blocked or canceled.",
            "enum": ["temporary", "user_request", "unused", "fraud", "other"],
            "nullable": true,
            "readOnly": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "state_reason_detail": {
            "description": "It provides a textual reason why the account is blocked in case of the state_reason value is `other`.",
            "nullable": true,
            "readOnly": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "type": {
            "description": "Type of the account, it can be one of the following values:\n\n- subaccount: Account that belongs to a third-party account holder, you can create an unlimited number of accounts for any third-party account holder.\n- current: This is an special account that provides a clear overview of the available funds for a tenant. It serves as a read-only account, showcasing the current financial standing without the capability to create new ledger accounts.\n",
            "enum": ["subaccount", "current"],
            "readOnly": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "updated_at": {
            "description": "Indicates when a ledger account was updated",
            "example": "2022-01-01T01:00:00Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.DateTimeSchema",
            "x-validation": {}
          }
        },
        "required": ["holder_id", "currency_code"],
        "title": "LedgerAccount",
        "type": "object",
        "x-struct": "Elixir.MonoBankingAPI.Schemas.Ledger.AccountSchema",
        "x-validate": null
      },
      "CommonPayoutTarget": {
        "properties": {
          "country": {
            "description": "An ISO 3166-1 alpha-2 country code representing the country where the target amount will be\ncredited. The method and currency must support it.\n",
            "example": "CO",
            "pattern": "^[A-Z]{2}$",
            "type": "string",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.CountryCodeSchema"
          },
          "currency": {
            "description": "An ISO 4217 currency code representing the currency in which the amount will be credited.\nThe method and country must support it.\n",
            "enum": ["COP", "USD", "MXN", "CLP", "BRL", "PEN"],
            "example": "COP",
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "kind": {
            "description": "String field",
            "enum": ["co_bank_account"],
            "example": "co_bank_account",
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": ["kind", "country", "currency"],
        "title": "CommonPayoutTarget",
        "type": "object",
        "x-struct": null,
        "x-validate": null
      },
      "ListAccounts": {
        "description": "It contains a set of account. It also contains pagination information",
        "properties": {
          "accounts": {
            "description": "It contains a list with accounts",
            "items": {
              "description": "A ledger account is a dedicated account managed by our Mono Ledger system.\n",
              "properties": {
                "currency_code": {
                  "description": "The currency associated with the account balance.",
                  "enum": ["COP", "USD", "MXN", "CLP", "BRL", "PEN"],
                  "nullable": false,
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                },
                "holder_id": {
                  "description": "Identifier of the third-party account holder.",
                  "example": "acch_5tgliBmzjZ6mpQPRbQjfKj",
                  "nullable": false,
                  "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                  "type": "string",
                  "x-context": "account_holder",
                  "x-struct": null,
                  "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
                },
                "id": {
                  "description": "Indicates the format for resource's ID",
                  "example": "lacc_5tgliBmzjZ6mpQPRbQjfKj",
                  "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                  "readOnly": true,
                  "type": "string",
                  "x-context": "ledger_account",
                  "x-struct": null,
                  "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
                },
                "inserted_at": {
                  "description": "Indicates when a ledger account was created",
                  "example": "2022-01-01T01:00:00Z",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string",
                  "x-struct": null,
                  "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.DateTimeSchema",
                  "x-validation": {}
                },
                "metadata": {
                  "additionalProperties": true,
                  "description": "A tenant-managed flat map for providing additional data about the account. The values are stored and displayed as strings, and the provided information will be returned as-is in the account details.\n",
                  "example": { "id": 3, "reference": 123 },
                  "nullable": true,
                  "type": "object",
                  "x-struct": null,
                  "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MetadataSchema"
                },
                "name": {
                  "description": "Name of the account, which is used to describe the account's purpose better.",
                  "example": "Main account",
                  "nullable": true,
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                },
                "program_id": {
                  "description": "Program identifier. If the value is empty, the account is associated with the tenant default program.",
                  "example": "pro_5tgliBmzjZ6mpQPRbQjfKj",
                  "nullable": true,
                  "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                  "type": "string",
                  "x-context": "program",
                  "x-struct": null,
                  "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
                },
                "provider": {
                  "description": "Specifies the provider of the account, for ledger accounts, the provider will be always `mono_ledger`",
                  "enum": ["mono_ledger"],
                  "readOnly": true,
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                },
                "state": {
                  "description": "State of the account, it can be one of the following values:\n- active: it's enabled to perform operations with the account balance.\n- blocked: it's disabled by a tenant and couldn't perform any operation with the account balance.\n- canceled: it's disabled by Mono and couldn't perform any operation with the account balance.\n",
                  "enum": ["active", "blocked", "canceled"],
                  "readOnly": true,
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                },
                "state_reason": {
                  "description": "It provides the reason why the account could be blocked or canceled. It is required when the account is transitioned to being blocked or canceled.",
                  "enum": [
                    "temporary",
                    "user_request",
                    "unused",
                    "fraud",
                    "other"
                  ],
                  "nullable": true,
                  "readOnly": true,
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                },
                "state_reason_detail": {
                  "description": "It provides a textual reason why the account is blocked in case of the state_reason value is `other`.",
                  "nullable": true,
                  "readOnly": true,
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                },
                "type": {
                  "description": "Type of the account, it can be one of the following values:\n\n- subaccount: Account that belongs to a third-party account holder, you can create an unlimited number of accounts for any third-party account holder.\n- current: This is an special account that provides a clear overview of the available funds for a tenant. It serves as a read-only account, showcasing the current financial standing without the capability to create new ledger accounts.\n",
                  "enum": ["subaccount", "current"],
                  "readOnly": true,
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                },
                "updated_at": {
                  "description": "Indicates when a ledger account was updated",
                  "example": "2022-01-01T01:00:00Z",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string",
                  "x-struct": null,
                  "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.DateTimeSchema",
                  "x-validation": {}
                }
              },
              "required": ["holder_id", "currency_code"],
              "title": "LedgerAccount",
              "type": "object",
              "x-struct": "Elixir.MonoBankingAPI.Schemas.Ledger.AccountSchema",
              "x-validate": null
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "pagination": {
            "description": "Pagination schema",
            "properties": {
              "page_number": {
                "description": "Current page number",
                "example": 1,
                "type": "integer",
                "x-struct": null,
                "x-validate": null
              },
              "page_size": {
                "description": "Amount of items by page",
                "example": 10,
                "type": "integer",
                "x-struct": null,
                "x-validate": null
              },
              "total_items": {
                "description": "Total of items by the resource",
                "example": 100,
                "type": "integer",
                "x-struct": null,
                "x-validate": null
              },
              "total_pages": {
                "description": "Total pages by the resource",
                "example": 10,
                "type": "integer",
                "x-struct": null,
                "x-validate": null
              }
            },
            "readOnly": true,
            "title": "Pagination",
            "type": "object",
            "x-struct": "Elixir.MonoBankingAPI.Schemas.Components.PaginationSchema",
            "x-validate": null
          }
        },
        "readOnly": true,
        "title": "ListAccounts",
        "type": "object",
        "x-struct": "Elixir.MonoBankingAPI.Schemas.Ledger.ListAccountsSchema",
        "x-validate": null
      },
      "CardTransaction": {
        "description": "Represents the card transactions",
        "properties": {
          "amount": {
            "description": "Transaction amount",
            "properties": {
              "amount": {
                "description": "Amount of money in `cents` with the format is int64. Thus, you\nsend an integer \"10.000.000\", we will interpret it as \"100.000,00\"\n",
                "example": 100000000,
                "format": "int64",
                "maximum": 100000000000000,
                "minimum": -100000000000000,
                "type": "integer",
                "x-struct": null,
                "x-validate": null
              },
              "currency": {
                "default": "COP",
                "description": "Currency of money",
                "enum": ["COP"],
                "example": "COP",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              }
            },
            "required": ["amount", "currency"],
            "type": "object",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MoneySchema"
          },
          "declination_reason": {
            "description": "String field",
            "example": "declination reason when a transaction is declined",
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "description": {
            "description": "String field",
            "example": "Purchase at Apple Store",
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "gmf_amount": {
            "description": "GMF amount",
            "properties": {
              "amount": {
                "description": "Amount of money in `cents` with the format is int64. Thus, you\nsend an integer \"10.000.000\", we will interpret it as \"100.000,00\"\n",
                "example": 100000000,
                "format": "int64",
                "maximum": 100000000000000,
                "minimum": -100000000000000,
                "type": "integer",
                "x-struct": null,
                "x-validate": null
              },
              "currency": {
                "default": "COP",
                "description": "Currency of money",
                "enum": ["COP"],
                "example": "COP",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              }
            },
            "required": ["amount", "currency"],
            "type": "object",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MoneySchema"
          },
          "id": {
            "description": "Indicates the format for resource's ID",
            "example": "ctx_5tgliBmzjZ6mpQPRbQjfKj",
            "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
            "type": "string",
            "x-context": "card_transaction",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
          },
          "merchant": {
            "description": "Information about the merchant where the transaction was made",
            "properties": {
              "country": {
                "description": "Country where the merchant is located",
                "example": "COL",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "id": {
                "description": "ID of the merchant where the transaction was made",
                "example": "10000",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "mcc": {
                "description": "Code that classifies the type of services provided by the merchant",
                "example": "1010",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "name": {
                "description": "Name of the merchant where the transaction was made",
                "example": "Mono merchant",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              }
            },
            "readOnly": true,
            "type": "object",
            "x-struct": null,
            "x-validate": null
          },
          "operation_type": {
            "description": "Transaction operation type",
            "enum": ["debit", "credit"],
            "example": "debit",
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "scope": {
            "description": "Scope of the card transaction",
            "enum": ["local", "international"],
            "example": "local",
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "state": {
            "description": "State of the card transaction",
            "enum": ["approved", "reversed", "declined"],
            "example": "approved",
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "transaction_at": {
            "description": "Date and time when the card transaction was made",
            "example": "2022-01-01T01:00:00Z",
            "format": "date-time",
            "type": "string",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.DateTimeSchema",
            "x-validation": {}
          }
        },
        "readOnly": true,
        "required": [
          "id",
          "transaction_at",
          "amount",
          "gmf_amount",
          "description",
          "state",
          "scope",
          "operation_type"
        ],
        "title": "CardTransaction",
        "type": "object",
        "x-struct": null,
        "x-validate": null
      },
      "VelocitySchema": {
        "minProperties": 2,
        "properties": {
          "daily": {
            "description": "Limit amount for daily spending",
            "properties": {
              "amount": {
                "description": "Amount of money in `cents` with the format is int64. Thus, you\nsend an integer \"10.000.000\", we will interpret it as \"100.000,00\"\n",
                "example": 100000000,
                "format": "int64",
                "maximum": 100000000000000,
                "minimum": -100000000000000,
                "type": "integer",
                "x-struct": null,
                "x-validate": null
              },
              "currency": {
                "default": "COP",
                "description": "Currency of money",
                "enum": ["COP", "USD", "MXN", "CLP", "BRL", "PEN"],
                "example": "COP",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              }
            },
            "required": ["amount", "currency"],
            "type": "object",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MoneySchema"
          },
          "monthly": {
            "description": "Limit amount for monthly spending",
            "properties": {
              "amount": {
                "description": "Amount of money in `cents` with the format is int64. Thus, you\nsend an integer \"10.000.000\", we will interpret it as \"100.000,00\"\n",
                "example": 100000000,
                "format": "int64",
                "maximum": 100000000000000,
                "minimum": -100000000000000,
                "type": "integer",
                "x-struct": null,
                "x-validate": null
              },
              "currency": {
                "default": "COP",
                "description": "Currency of money",
                "enum": ["COP", "USD", "MXN", "CLP", "BRL", "PEN"],
                "example": "COP",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              }
            },
            "required": ["amount", "currency"],
            "type": "object",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MoneySchema"
          },
          "type": {
            "default": "velocity",
            "description": "String field",
            "example": "velocity",
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "weekly": {
            "description": "Limit amount for weekly spending",
            "properties": {
              "amount": {
                "description": "Amount of money in `cents` with the format is int64. Thus, you\nsend an integer \"10.000.000\", we will interpret it as \"100.000,00\"\n",
                "example": 100000000,
                "format": "int64",
                "maximum": 100000000000000,
                "minimum": -100000000000000,
                "type": "integer",
                "x-struct": null,
                "x-validate": null
              },
              "currency": {
                "default": "COP",
                "description": "Currency of money",
                "enum": ["COP", "USD", "MXN", "CLP", "BRL", "PEN"],
                "example": "COP",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              }
            },
            "required": ["amount", "currency"],
            "type": "object",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MoneySchema"
          }
        },
        "required": ["type"],
        "title": "VelocitySchema",
        "type": "object",
        "x-struct": "Elixir.MonoBankingAPI.Schemas.SpendingControls.Rules.VelocitySchema",
        "x-validate": null
      },
      "CardBalance": {
        "properties": {
          "balance": {
            "description": "Amount available on the card",
            "example": { "amount": 16900000, "currency": "COP" },
            "properties": {
              "amount": {
                "description": "Amount of money in `cents` with the format is int64. Thus, you\nsend an integer \"10.000.000\", we will interpret it as \"100.000,00\"\n",
                "example": 100000000,
                "format": "int64",
                "maximum": 100000000000000,
                "minimum": -100000000000000,
                "type": "integer",
                "x-struct": null,
                "x-validate": null
              },
              "currency": {
                "default": "COP",
                "description": "Currency of money",
                "enum": ["COP"],
                "example": "COP",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              }
            },
            "required": ["amount", "currency"],
            "type": "object",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MoneySchema"
          },
          "card_id": {
            "description": "Card ID",
            "example": "car_5tgliBmzjZ6mpQPRbQjfKj",
            "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
            "type": "string",
            "x-context": "card",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
          }
        },
        "title": "CardBalance",
        "type": "object",
        "x-struct": "Elixir.MonoBankingAPI.Schemas.Cards.CardBalanceSchema",
        "x-validate": null
      },
      "SpendingControlUpdate": {
        "description": "Spending control update schema",
        "properties": {
          "id": {
            "description": "Spending Control ID",
            "example": "spc_5tgliBmzjZ6mpQPRbQjfKj",
            "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
            "readOnly": true,
            "type": "string",
            "x-context": "spending_control",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
          },
          "nickname": {
            "description": "Spending control nickname",
            "example": "Holiday Spending Control",
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "title": "SpendingControlUpdate",
        "type": "object",
        "x-struct": "Elixir.MonoBankingAPI.Schemas.SpendingControls.SpendingControlUpdateSchema",
        "x-validate": null
      },
      "SubaccountOperationOriginDetail": {
        "allOf": [
          {
            "description": "Represents the account movements in the ledger.",
            "properties": {
              "amount": {
                "description": "Money schema",
                "properties": {
                  "amount": {
                    "description": "Amount of money in `cents` with the format is int64. Thus, you\nsend an integer \"10.000.000\", we will interpret it as \"100.000,00\"\n",
                    "example": 100000000,
                    "format": "int64",
                    "maximum": 100000000000000,
                    "minimum": -100000000000000,
                    "type": "integer",
                    "x-struct": null,
                    "x-validate": null
                  },
                  "currency": {
                    "default": "COP",
                    "description": "Currency of money",
                    "enum": ["COP", "USD", "MXN", "CLP", "BRL", "PEN"],
                    "example": "COP",
                    "type": "string",
                    "x-struct": null,
                    "x-validate": null
                  }
                },
                "required": ["amount", "currency"],
                "type": "object",
                "x-struct": null,
                "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MoneySchema"
              },
              "description": {
                "description": "useful infomation about the transaction",
                "example": "Purchase on ABC Commerce",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "id": {
                "description": "Indicates the format for resource's ID",
                "example": "ltx_5tgliBmzjZ6mpQPRbQjfKj",
                "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                "type": "string",
                "x-context": "ledger_transaction",
                "x-struct": null,
                "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
              },
              "id_in_origin": {
                "description": "String field",
                "example": "accop_5tgliBmzjZ6mpQPRbQjfKj",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "operation_type": {
                "description": "The four common transaction operations are credit, debit, hold, and release:\n\n- credit: Increases the balance of the account. It is typically used to represent income.\n- debit: Decreases the balance of the account. It is typically used to represent expenses.\n- hold: Setting aside of funds for a specific purpose, such as a pending transaction.\n- release: Represent the release of previously held funds for a pending transaction.\n",
                "enum": ["debit", "credit", "hold", "release"],
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "origin": {
                "description": "The operation from which the transaction originated",
                "example": "subaccount_operation",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "origin_transaction_at": {
                "description": "Date and Time at which the transaction was created",
                "example": "2022-01-01T01:00:00Z",
                "format": "date-time",
                "type": "string",
                "x-struct": null,
                "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.DateTimeSchema",
                "x-validation": {}
              },
              "reverted_by_id": {
                "description": "The ID of the transaction that reverts this ledger transaction",
                "example": "ltx_5tgliBmzjZ6mpQPRbQjfKj",
                "nullable": true,
                "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                "type": "string",
                "x-context": "ledger_transaction",
                "x-struct": null,
                "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
              },
              "reverts_id": {
                "description": "The ID of the transaction that this ledger transaction reverts",
                "example": "ltx_5tgliBmzjZ6mpQPRbQjfKj",
                "nullable": true,
                "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                "type": "string",
                "x-context": "ledger_transaction",
                "x-struct": null,
                "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
              },
              "transaction_at": {
                "description": "Date and Time at which the transaction was actually performed",
                "example": "2022-01-01T01:00:00Z",
                "format": "date-time",
                "type": "string",
                "x-struct": null,
                "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.DateTimeSchema",
                "x-validation": {}
              }
            },
            "title": "LedgerAccountTransaction",
            "type": "object",
            "x-struct": null,
            "x-validate": null
          },
          {
            "properties": {
              "details": {
                "properties": {
                  "amount": {
                    "description": "Money schema",
                    "properties": {
                      "amount": {
                        "description": "Amount of money in `cents` with the format is int64. Thus, you\nsend an integer \"10.000.000\", we will interpret it as \"100.000,00\"\n",
                        "example": 100000000,
                        "format": "int64",
                        "maximum": 100000000000000,
                        "minimum": -100000000000000,
                        "type": "integer",
                        "x-struct": null,
                        "x-validate": null
                      },
                      "currency": {
                        "default": "COP",
                        "description": "Currency of money",
                        "enum": ["COP"],
                        "example": "COP",
                        "type": "string",
                        "x-struct": null,
                        "x-validate": null
                      }
                    },
                    "required": ["amount", "currency"],
                    "type": "object",
                    "x-struct": null,
                    "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MoneySchema"
                  },
                  "description": {
                    "description": "String field",
                    "example": "string",
                    "readOnly": true,
                    "type": "string",
                    "x-struct": null,
                    "x-validate": null
                  },
                  "destination_account_id": {
                    "description": "Indicates the format for resource's ID",
                    "example": "lacc_5tgliBmzjZ6mpQPRbQjfKj",
                    "nullable": true,
                    "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                    "type": "string",
                    "x-context": "ledger_account",
                    "x-struct": null,
                    "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
                  },
                  "external_id": {
                    "description": "String field",
                    "example": "string",
                    "type": "string",
                    "x-struct": null,
                    "x-validate": null
                  },
                  "id": {
                    "description": "Indicates the format for resource's ID",
                    "example": "accop_5tgliBmzjZ6mpQPRbQjfKj",
                    "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                    "type": "string",
                    "x-context": "subaccount_operation",
                    "x-struct": null,
                    "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
                  },
                  "metadata": {
                    "additionalProperties": true,
                    "example": { "id": 3, "reference": 123 },
                    "type": "object",
                    "x-struct": null,
                    "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MetadataSchema"
                  },
                  "operation_type": {
                    "description": "operation type",
                    "enum": ["topup", "withdrawal", "account_to_account"],
                    "type": "string",
                    "x-struct": null,
                    "x-validate": null
                  },
                  "origin_account_id": {
                    "description": "Indicates the format for resource's ID",
                    "example": "lacc_5tgliBmzjZ6mpQPRbQjfKj",
                    "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                    "type": "string",
                    "x-context": "ledger_account",
                    "x-struct": null,
                    "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
                  },
                  "reference": {
                    "description": "String field",
                    "example": "string",
                    "readOnly": true,
                    "type": "string",
                    "x-struct": null,
                    "x-validate": null
                  },
                  "state": {
                    "description": "operation state",
                    "enum": ["created", "successful", "rejected"],
                    "type": "string",
                    "x-struct": null,
                    "x-validate": null
                  },
                  "state_reasons": {
                    "description": "reason of the operation state",
                    "enum": ["insufficient_funds", "unknown"],
                    "nullable": true,
                    "type": "string",
                    "x-struct": null,
                    "x-validate": null
                  }
                },
                "title": "SubaccountOperationDetail",
                "type": "object",
                "x-struct": "Elixir.MonoBankingAPI.Schemas.Ledger.AccountTransactions.SubaccountOperationDetailSchema",
                "x-validate": null
              }
            },
            "type": "object",
            "x-struct": null,
            "x-validate": null
          }
        ],
        "title": "SubaccountOperationOriginDetail",
        "x-struct": "Elixir.MonoBankingAPI.Schemas.Ledger.AccountTransactions.SubaccountOperationOriginSchema",
        "x-validate": null
      },
      "MCCControlRule": {
        "description": "Spending control rule to limit spending based on merchant category codes",
        "properties": {
          "mccs": {
            "items": {
              "description": "MCC code",
              "example": "5411",
              "maxLength": 4,
              "minLength": 4,
              "type": "string",
              "x-struct": null,
              "x-validate": null
            },
            "minItems": 1,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "operation": {
            "description": "If `forbid_mccs`, payments for the listed MCCs are not authorized. If `allow_mccs`, payments are authorized only for the listed MCCs.",
            "enum": ["allow_mccs", "forbid_mccs"],
            "example": "allow_mccs",
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": ["mccs", "operation"],
        "title": "MCCControlRule",
        "type": "object",
        "x-struct": "Elixir.MonoBankingAPI.Schemas.SpendingControls.Rules.MCCRuleSchema",
        "x-validate": null
      },
      "ListPlasticCardActivations": {
        "description": "It contains a collection of plastic card activations. It also contains paging information",
        "properties": {
          "pagination": {
            "description": "Pagination schema",
            "properties": {
              "page_number": {
                "description": "Current page number",
                "example": 1,
                "type": "integer",
                "x-struct": null,
                "x-validate": null
              },
              "page_size": {
                "description": "Amount of items by page",
                "example": 10,
                "type": "integer",
                "x-struct": null,
                "x-validate": null
              },
              "total_items": {
                "description": "Total of items by the resource",
                "example": 100,
                "type": "integer",
                "x-struct": null,
                "x-validate": null
              },
              "total_pages": {
                "description": "Total pages by the resource",
                "example": 10,
                "type": "integer",
                "x-struct": null,
                "x-validate": null
              }
            },
            "readOnly": true,
            "title": "Pagination",
            "type": "object",
            "x-struct": "Elixir.MonoBankingAPI.Schemas.Components.PaginationSchema",
            "x-validate": null
          },
          "plastic_card_activations": {
            "description": "It contains a list with accounts",
            "items": {
              "description": "Plastic Card Activation Schema",
              "properties": {
                "account_id": {
                  "description": "Account ID acc_5tgliBmzjZ6mpQPRbQjfKj or lacc_5tgliBmzjZ6mpQPRbQjfKj",
                  "example": "acc_5tgliBmzjZ6mpQPRbQjfKj",
                  "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                  "type": "string",
                  "x-context": "account",
                  "x-struct": null,
                  "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
                },
                "card_id": {
                  "description": "Card ID",
                  "example": "car_5tgliBmzjZ6mpQPRbQjfKj",
                  "nullable": true,
                  "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                  "readOnly": true,
                  "type": "string",
                  "x-context": "card",
                  "x-struct": null,
                  "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
                },
                "cardholder_id": {
                  "description": "Cardholder ID",
                  "example": "carh_5tgliBmzjZ6mpQPRbQjfKj",
                  "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                  "type": "string",
                  "x-context": "cardholder",
                  "x-struct": null,
                  "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
                },
                "configuration_group_id": {
                  "description": "Card Config Group ID",
                  "example": "ccg_5tgliBmzjZ6mpQPRbQjfKj",
                  "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                  "type": "string",
                  "x-context": "card_config_group",
                  "x-struct": null,
                  "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
                },
                "id": {
                  "description": "Plastic Card Activation ID",
                  "example": "pca_5tgliBmzjZ6mpQPRbQjfKj",
                  "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                  "readOnly": true,
                  "type": "string",
                  "x-context": "plastic_card_activation",
                  "x-struct": null,
                  "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
                },
                "inserted_at": {
                  "description": "Indicates when an plastic card activation was created",
                  "example": "2022-01-01T01:00:00Z",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string",
                  "x-struct": null,
                  "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.DateTimeSchema",
                  "x-validation": {}
                },
                "nickname": {
                  "description": "Card nickname",
                  "example": "Travel card",
                  "minLength": 5,
                  "nullable": true,
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                },
                "spending_control_id": {
                  "description": "Spending Control ID",
                  "example": "spc_5tgliBmzjZ6mpQPRbQjfKj",
                  "nullable": true,
                  "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                  "type": "string",
                  "x-context": "spending_control",
                  "x-struct": null,
                  "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
                },
                "state": {
                  "description": "Plastic Card Activation State",
                  "enum": ["pending", "activated", "failed", "group_mismatch"],
                  "readOnly": true,
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                },
                "updated_at": {
                  "description": "Indicates when an plastic card activation was updated",
                  "example": "2022-01-01T01:00:00Z",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string",
                  "x-struct": null,
                  "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.DateTimeSchema",
                  "x-validation": {}
                },
                "url": {
                  "description": "Contains the plastic card activation link URL",
                  "example": "https://api.cuentamono.com/v1/cards/activation_links/pca_02wI65FjIGkn1xKeYMqdey",
                  "format": "uri-reference",
                  "readOnly": true,
                  "type": "string",
                  "x-struct": null,
                  "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.URLSchema"
                }
              },
              "required": [
                "account_id",
                "cardholder_id",
                "configuration_group_id"
              ],
              "title": "PlasticCardActivation",
              "type": "object",
              "x-struct": "Elixir.MonoBankingAPI.Schemas.Cards.PlasticCardActivationSchema",
              "x-validate": null
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          }
        },
        "readOnly": true,
        "title": "ListPlasticCardActivations",
        "type": "object",
        "x-struct": "Elixir.MonoBankingAPI.Schemas.Cards.ListPlasticCardActivationsSchema",
        "x-validate": null
      },
      "Accounts": {
        "description": "It contains a collection of accounts. It also contains paging information",
        "properties": {
          "accounts": {
            "description": "It contains a list with accounts",
            "items": {
              "description": "Represents a account.",
              "properties": {
                "balance": {
                  "description": "Sets balance data",
                  "properties": {
                    "available": {
                      "description": "Money schema",
                      "properties": {
                        "amount": {
                          "description": "Amount of money in `cents` with the format is int64. Thus, you\nsend an integer \"10.000.000\", we will interpret it as \"100.000,00\"\n",
                          "example": 100000000,
                          "format": "int64",
                          "maximum": 100000000000000,
                          "minimum": -100000000000000,
                          "type": "integer",
                          "x-struct": null,
                          "x-validate": null
                        },
                        "currency": {
                          "default": "COP",
                          "description": "Currency of money",
                          "enum": ["COP"],
                          "example": "COP",
                          "type": "string",
                          "x-struct": null,
                          "x-validate": null
                        }
                      },
                      "required": ["amount", "currency"],
                      "type": "object",
                      "x-struct": null,
                      "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MoneySchema"
                    },
                    "updated_at": {
                      "description": "Indicates when the balance was updated",
                      "example": "2022-01-01T01:00:00Z",
                      "format": "date-time",
                      "nullable": true,
                      "readOnly": true,
                      "type": "string",
                      "x-struct": null,
                      "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.DateTimeSchema",
                      "x-validation": {}
                    }
                  },
                  "type": "object",
                  "x-struct": null,
                  "x-validate": null
                },
                "id": {
                  "description": "Indicates the format for resource's ID",
                  "example": "acc_5tgliBmzjZ6mpQPRbQjfKj",
                  "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                  "type": "string",
                  "x-context": "account",
                  "x-struct": null,
                  "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
                },
                "inserted_at": {
                  "description": "Indicates when an account balance was created",
                  "example": "2022-01-01T01:00:00Z",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string",
                  "x-struct": null,
                  "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.DateTimeSchema",
                  "x-validation": {}
                },
                "name": {
                  "description": "Represents the name of the account, which is used to describe the account's purpose better.",
                  "example": "Main account",
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                },
                "number": {
                  "description": "Account number",
                  "example": "123456789",
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                },
                "provider": {
                  "description": "Bank Account provider",
                  "enum": ["coopcentral"],
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                },
                "state": {
                  "description": "- active: When the account is active.\n- canceled: When the account was canceled.\n",
                  "enum": ["active", "canceled"],
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                },
                "type": {
                  "description": "Account type",
                  "enum": ["savings_account"],
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                },
                "updated_at": {
                  "description": "Indicates when an account balance was updated",
                  "example": "2022-01-01T01:00:00Z",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string",
                  "x-struct": null,
                  "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.DateTimeSchema",
                  "x-validation": {}
                }
              },
              "title": "Account",
              "type": "object",
              "x-struct": "Elixir.MonoBankingAPI.Schemas.BankAccounts.AccountSchema",
              "x-validate": null
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "pagination": {
            "description": "Pagination schema",
            "properties": {
              "page_number": {
                "description": "Current page number",
                "example": 1,
                "type": "integer",
                "x-struct": null,
                "x-validate": null
              },
              "page_size": {
                "description": "Amount of items by page",
                "example": 10,
                "type": "integer",
                "x-struct": null,
                "x-validate": null
              },
              "total_items": {
                "description": "Total of items by the resource",
                "example": 100,
                "type": "integer",
                "x-struct": null,
                "x-validate": null
              },
              "total_pages": {
                "description": "Total pages by the resource",
                "example": 10,
                "type": "integer",
                "x-struct": null,
                "x-validate": null
              }
            },
            "readOnly": true,
            "title": "Pagination",
            "type": "object",
            "x-struct": "Elixir.MonoBankingAPI.Schemas.Components.PaginationSchema",
            "x-validate": null
          }
        },
        "readOnly": true,
        "title": "Accounts",
        "type": "object",
        "x-struct": "Elixir.MonoBankingAPI.Schemas.BankAccounts.ListAccountsSchema",
        "x-validate": null
      },
      "Account": {
        "description": "Represents a account.",
        "properties": {
          "balance": {
            "description": "Sets balance data",
            "properties": {
              "available": {
                "description": "Money schema",
                "properties": {
                  "amount": {
                    "description": "Amount of money in `cents` with the format is int64. Thus, you\nsend an integer \"10.000.000\", we will interpret it as \"100.000,00\"\n",
                    "example": 100000000,
                    "format": "int64",
                    "maximum": 100000000000000,
                    "minimum": -100000000000000,
                    "type": "integer",
                    "x-struct": null,
                    "x-validate": null
                  },
                  "currency": {
                    "default": "COP",
                    "description": "Currency of money",
                    "enum": ["COP"],
                    "example": "COP",
                    "type": "string",
                    "x-struct": null,
                    "x-validate": null
                  }
                },
                "required": ["amount", "currency"],
                "type": "object",
                "x-struct": null,
                "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MoneySchema"
              },
              "updated_at": {
                "description": "Indicates when the balance was updated",
                "example": "2022-01-01T01:00:00Z",
                "format": "date-time",
                "nullable": true,
                "readOnly": true,
                "type": "string",
                "x-struct": null,
                "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.DateTimeSchema",
                "x-validation": {}
              }
            },
            "type": "object",
            "x-struct": null,
            "x-validate": null
          },
          "id": {
            "description": "Indicates the format for resource's ID",
            "example": "acc_5tgliBmzjZ6mpQPRbQjfKj",
            "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
            "type": "string",
            "x-context": "account",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
          },
          "inserted_at": {
            "description": "Indicates when an account balance was created",
            "example": "2022-01-01T01:00:00Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.DateTimeSchema",
            "x-validation": {}
          },
          "name": {
            "description": "Represents the name of the account, which is used to describe the account's purpose better.",
            "example": "Main account",
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "number": {
            "description": "Account number",
            "example": "123456789",
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "provider": {
            "description": "Bank Account provider",
            "enum": ["coopcentral"],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "state": {
            "description": "- active: When the account is active.\n- canceled: When the account was canceled.\n",
            "enum": ["active", "canceled"],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "type": {
            "description": "Account type",
            "enum": ["savings_account"],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "updated_at": {
            "description": "Indicates when an account balance was updated",
            "example": "2022-01-01T01:00:00Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.DateTimeSchema",
            "x-validation": {}
          }
        },
        "title": "Account",
        "type": "object",
        "x-struct": "Elixir.MonoBankingAPI.Schemas.BankAccounts.AccountSchema",
        "x-validate": null
      },
      "ListCardTransaction": {
        "description": "It contains a set of card transactions. It also contains paging information",
        "properties": {
          "card_id": {
            "description": "Card ID",
            "example": "car_5tgliBmzjZ6mpQPRbQjfKj",
            "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
            "type": "string",
            "x-context": "card",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
          },
          "pagination": {
            "description": "Pagination schema",
            "properties": {
              "page_number": {
                "description": "Current page number",
                "example": 1,
                "type": "integer",
                "x-struct": null,
                "x-validate": null
              },
              "page_size": {
                "description": "Amount of items by page",
                "example": 10,
                "type": "integer",
                "x-struct": null,
                "x-validate": null
              },
              "total_items": {
                "description": "Total of items by the resource",
                "example": 100,
                "type": "integer",
                "x-struct": null,
                "x-validate": null
              },
              "total_pages": {
                "description": "Total pages by the resource",
                "example": 10,
                "type": "integer",
                "x-struct": null,
                "x-validate": null
              }
            },
            "readOnly": true,
            "title": "Pagination",
            "type": "object",
            "x-struct": "Elixir.MonoBankingAPI.Schemas.Components.PaginationSchema",
            "x-validate": null
          },
          "transactions": {
            "description": "It contains a list with card transactions",
            "items": {
              "description": "Represents the card transactions",
              "properties": {
                "amount": {
                  "description": "Transaction amount",
                  "properties": {
                    "amount": {
                      "description": "Amount of money in `cents` with the format is int64. Thus, you\nsend an integer \"10.000.000\", we will interpret it as \"100.000,00\"\n",
                      "example": 100000000,
                      "format": "int64",
                      "maximum": 100000000000000,
                      "minimum": -100000000000000,
                      "type": "integer",
                      "x-struct": null,
                      "x-validate": null
                    },
                    "currency": {
                      "default": "COP",
                      "description": "Currency of money",
                      "enum": ["COP"],
                      "example": "COP",
                      "type": "string",
                      "x-struct": null,
                      "x-validate": null
                    }
                  },
                  "required": ["amount", "currency"],
                  "type": "object",
                  "x-struct": null,
                  "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MoneySchema"
                },
                "declination_reason": {
                  "description": "String field",
                  "example": "declination reason when a transaction is declined",
                  "nullable": true,
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                },
                "description": {
                  "description": "String field",
                  "example": "Purchase at Apple Store",
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                },
                "gmf_amount": {
                  "description": "GMF amount",
                  "properties": {
                    "amount": {
                      "description": "Amount of money in `cents` with the format is int64. Thus, you\nsend an integer \"10.000.000\", we will interpret it as \"100.000,00\"\n",
                      "example": 100000000,
                      "format": "int64",
                      "maximum": 100000000000000,
                      "minimum": -100000000000000,
                      "type": "integer",
                      "x-struct": null,
                      "x-validate": null
                    },
                    "currency": {
                      "default": "COP",
                      "description": "Currency of money",
                      "enum": ["COP"],
                      "example": "COP",
                      "type": "string",
                      "x-struct": null,
                      "x-validate": null
                    }
                  },
                  "required": ["amount", "currency"],
                  "type": "object",
                  "x-struct": null,
                  "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MoneySchema"
                },
                "id": {
                  "description": "Indicates the format for resource's ID",
                  "example": "ctx_5tgliBmzjZ6mpQPRbQjfKj",
                  "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                  "type": "string",
                  "x-context": "card_transaction",
                  "x-struct": null,
                  "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
                },
                "merchant": {
                  "description": "Information about the merchant where the transaction was made",
                  "properties": {
                    "country": {
                      "description": "Country where the merchant is located",
                      "example": "COL",
                      "type": "string",
                      "x-struct": null,
                      "x-validate": null
                    },
                    "id": {
                      "description": "ID of the merchant where the transaction was made",
                      "example": "10000",
                      "type": "string",
                      "x-struct": null,
                      "x-validate": null
                    },
                    "mcc": {
                      "description": "Code that classifies the type of services provided by the merchant",
                      "example": "1010",
                      "type": "string",
                      "x-struct": null,
                      "x-validate": null
                    },
                    "name": {
                      "description": "Name of the merchant where the transaction was made",
                      "example": "Mono merchant",
                      "type": "string",
                      "x-struct": null,
                      "x-validate": null
                    }
                  },
                  "readOnly": true,
                  "type": "object",
                  "x-struct": null,
                  "x-validate": null
                },
                "operation_type": {
                  "description": "Transaction operation type",
                  "enum": ["debit", "credit"],
                  "example": "debit",
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                },
                "scope": {
                  "description": "Scope of the card transaction",
                  "enum": ["local", "international"],
                  "example": "local",
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                },
                "state": {
                  "description": "State of the card transaction",
                  "enum": ["approved", "reversed", "declined"],
                  "example": "approved",
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                },
                "transaction_at": {
                  "description": "Date and time when the card transaction was made",
                  "example": "2022-01-01T01:00:00Z",
                  "format": "date-time",
                  "type": "string",
                  "x-struct": null,
                  "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.DateTimeSchema",
                  "x-validation": {}
                }
              },
              "readOnly": true,
              "required": [
                "id",
                "transaction_at",
                "amount",
                "gmf_amount",
                "description",
                "state",
                "scope",
                "operation_type"
              ],
              "title": "CardTransaction",
              "type": "object",
              "x-struct": null,
              "x-validate": null
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          }
        },
        "readOnly": true,
        "title": "ListCardTransaction",
        "type": "object",
        "x-struct": "Elixir.MonoBankingAPI.Schemas.Cards.ListCardTransactionSchema",
        "x-validate": null
      },
      "Cardholder": {
        "description": "Represents the cardholder information",
        "properties": {
          "address": {
            "description": "Address schema",
            "properties": {
              "city": {
                "description": "City, district, suburb, town, or village",
                "example": "Chapinero",
                "maxLength": 100,
                "pattern": "^[A-Za-zÀ-ÿ0-9 -.]+$",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "country": {
                "description": "Country code ISO 3166-1 alpha-2",
                "example": "CO",
                "pattern": "^[A-Z]{2}$",
                "type": "string",
                "x-struct": null,
                "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.CountryCodeSchema"
              },
              "extra": {
                "description": "Additional information",
                "example": "Location near the southeast corner in front of the ABC mall. deliver to the security guard pedro pruebas",
                "maxLength": 144,
                "nullable": true,
                "pattern": "^[A-Za-zÀ-ÿ0-9 -.]+$",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "line_1": {
                "description": "Street, P.O. Box, or address information",
                "example": "Calle 97 # 15-24",
                "format": "address_line_1",
                "maxLength": 100,
                "pattern": "^[a-zA-Z0-9 -.°'#:,]+$",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "line_2": {
                "description": "Home, apartment, room, suite, office, or building",
                "example": "Apto. 208",
                "maxLength": 100,
                "nullable": true,
                "pattern": "^[A-Za-zÀ-ÿ0-9 -.]+$",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "state": {
                "description": "State, province, region, or county",
                "example": "Bogota D.C",
                "maxLength": 100,
                "pattern": "^[A-Za-zÀ-ÿ0-9 -.]+$",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "zip_code": {
                "example": "110221",
                "maxLength": 10,
                "pattern": "^[A-Za-zÀ-ÿ0-9 -.]+$",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              }
            },
            "required": ["country", "state", "city", "line_1", "zip_code"],
            "title": "Address",
            "type": "object",
            "x-struct": null,
            "x-validate": null
          },
          "birthdate": {
            "description": "Cardholder birthdate",
            "example": "1941-09-09",
            "format": "date",
            "type": "string",
            "writeOnly": true,
            "x-struct": null,
            "x-validate": null
          },
          "document": {
            "description": "Person document",
            "properties": {
              "country_code": {
                "description": "Country code ISO 3166-1 alpha-2",
                "example": "CO",
                "pattern": "^[A-Z]{2}$",
                "type": "string",
                "x-struct": null,
                "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.CountryCodeSchema"
              },
              "number": {
                "description": "Document number",
                "example": "1023711432",
                "minLength": 5,
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "person_type": {
                "default": "natural",
                "description": "  The person types can be:\n  - natural\n",
                "enum": ["natural"],
                "example": "natural",
                "title": "PersonTypes",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "type": {
                "default": "CC",
                "description": "  The document types are represented by codes and can be:\n\n  For Colombia:\n  - CC\n  - CE\n  - PPT\n\n  For other countries:\n  - PASS\n",
                "enum": ["CC", "CE", "PASS", "PPT"],
                "example": "CC",
                "title": "DocumentTypes",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              }
            },
            "required": ["type", "number"],
            "type": "object",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.PersonDocumentSchema"
          },
          "email": {
            "description": "Email",
            "example": "someone@gmail.com",
            "format": "email",
            "pattern": "^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+){1,2}$",
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "first_name": {
            "description": "String field",
            "example": "Dennis",
            "maxLength": 64,
            "minLength": 2,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "id": {
            "description": "Cardholder ID",
            "example": "carh_5tgliBmzjZ6mpQPRbQjfKj",
            "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
            "readOnly": true,
            "type": "string",
            "x-context": "cardholder",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
          },
          "last_name": {
            "description": "String field",
            "example": "Alistair",
            "maxLength": 64,
            "minLength": 2,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "middle_name": {
            "description": "String field",
            "example": "Mac",
            "maxLength": 64,
            "minLength": 2,
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "nationality": {
            "description": "Country code ISO 3166-1 alpha-2",
            "example": "CO",
            "pattern": "^[A-Z]{2}$",
            "type": "string",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.CountryCodeSchema"
          },
          "phone_number": {
            "description": "Phone number",
            "example": "+573000000000",
            "pattern": "^\\+[1-9]\\d{1,14}$",
            "type": "string",
            "x-region": "co",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.PhoneSchema"
          },
          "second_last_name": {
            "description": "String field",
            "example": "Ritchie",
            "maxLength": 64,
            "minLength": 2,
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "email",
          "first_name",
          "last_name",
          "document",
          "phone_number",
          "birthdate",
          "nationality",
          "address"
        ],
        "title": "Cardholder",
        "type": "object",
        "writeOnly": true,
        "x-struct": null,
        "x-validate": null
      },
      "SubaccountOperationDetail": {
        "properties": {
          "amount": {
            "description": "Money schema",
            "properties": {
              "amount": {
                "description": "Amount of money in `cents` with the format is int64. Thus, you\nsend an integer \"10.000.000\", we will interpret it as \"100.000,00\"\n",
                "example": 100000000,
                "format": "int64",
                "maximum": 100000000000000,
                "minimum": -100000000000000,
                "type": "integer",
                "x-struct": null,
                "x-validate": null
              },
              "currency": {
                "default": "COP",
                "description": "Currency of money",
                "enum": ["COP"],
                "example": "COP",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              }
            },
            "required": ["amount", "currency"],
            "type": "object",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MoneySchema"
          },
          "description": {
            "description": "String field",
            "example": "string",
            "readOnly": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "destination_account_id": {
            "description": "Indicates the format for resource's ID",
            "example": "lacc_5tgliBmzjZ6mpQPRbQjfKj",
            "nullable": true,
            "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
            "type": "string",
            "x-context": "ledger_account",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
          },
          "external_id": {
            "description": "String field",
            "example": "string",
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "id": {
            "description": "Indicates the format for resource's ID",
            "example": "accop_5tgliBmzjZ6mpQPRbQjfKj",
            "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
            "type": "string",
            "x-context": "subaccount_operation",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
          },
          "metadata": {
            "additionalProperties": true,
            "example": { "id": 3, "reference": 123 },
            "type": "object",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MetadataSchema"
          },
          "operation_type": {
            "description": "operation type",
            "enum": ["topup", "withdrawal", "account_to_account"],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "origin_account_id": {
            "description": "Indicates the format for resource's ID",
            "example": "lacc_5tgliBmzjZ6mpQPRbQjfKj",
            "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
            "type": "string",
            "x-context": "ledger_account",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
          },
          "reference": {
            "description": "String field",
            "example": "string",
            "readOnly": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "state": {
            "description": "operation state",
            "enum": ["created", "successful", "rejected"],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "state_reasons": {
            "description": "reason of the operation state",
            "enum": ["insufficient_funds", "unknown"],
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "title": "SubaccountOperationDetail",
        "type": "object",
        "x-struct": "Elixir.MonoBankingAPI.Schemas.Ledger.AccountTransactions.SubaccountOperationDetailSchema",
        "x-validate": null
      },
      "CollectionProviders": {
        "default": "pse",
        "description": "  The providers of the collections are the intermediaries to facilitate the collection of the money.\n  These are the current ones:\n  - pse\n",
        "enum": ["pse"],
        "example": "pse",
        "title": "CollectionProviders",
        "type": "string",
        "x-struct": null,
        "x-validate": null
      },
      "CardUpdate": {
        "properties": {
          "id": {
            "description": "Card ID",
            "example": "car_5tgliBmzjZ6mpQPRbQjfKj",
            "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
            "readOnly": true,
            "type": "string",
            "x-context": "card",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
          },
          "nickname": {
            "default": "",
            "description": "Card nickname",
            "example": "Travel card",
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "spending_controls": {
            "description": "Spending controls relate to the card",
            "nullable": true,
            "properties": {
              "card_target": {
                "description": "Spending control ID direct assigned to the card",
                "example": "spc_5tgliBmzjZ6mpQPRbQjfKj",
                "nullable": true,
                "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                "type": "string",
                "x-context": "spending_control",
                "x-struct": null,
                "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
              }
            },
            "type": "object",
            "x-struct": null,
            "x-validate": null
          },
          "state": {
            "default": "",
            "description": "State of the card",
            "enum": ["active", "frozen", "canceled", "created"],
            "example": "active",
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "title": "CardUpdate",
        "type": "object",
        "x-struct": "Elixir.MonoBankingAPI.Schemas.Cards.CardUpdateSchema",
        "x-validate": null
      },
      "ListTransferSchema": {
        "description": "It contains a collection of transfers. It also contains paging information",
        "properties": {
          "pagination": {
            "description": "Pagination schema",
            "properties": {
              "page_number": {
                "description": "Current page number",
                "example": 1,
                "type": "integer",
                "x-struct": null,
                "x-validate": null
              },
              "page_size": {
                "description": "Amount of items by page",
                "example": 10,
                "type": "integer",
                "x-struct": null,
                "x-validate": null
              },
              "total_items": {
                "description": "Total of items by the resource",
                "example": 100,
                "type": "integer",
                "x-struct": null,
                "x-validate": null
              },
              "total_pages": {
                "description": "Total pages by the resource",
                "example": 10,
                "type": "integer",
                "x-struct": null,
                "x-validate": null
              }
            },
            "readOnly": true,
            "title": "Pagination",
            "type": "object",
            "x-struct": "Elixir.MonoBankingAPI.Schemas.Components.PaginationSchema",
            "x-validate": null
          },
          "transfers": {
            "description": "It contains a list with transfers",
            "items": {
              "description": "A transfer object represents a movement of funds from your Mono Account to another bank account,\nby the moment we only support bank transfer through Colombian's bank account.\n",
              "properties": {
                "amount": {
                  "description": "Represents the amount of money to make the bank transfer\n",
                  "nullable": false,
                  "properties": {
                    "amount": {
                      "description": "Amount of money in `cents` with the format is int64. Thus, you\nsend an integer \"10.000.000\", we will interpret it as \"100.000,00\"\n",
                      "example": 100000000,
                      "format": "int64",
                      "maximum": 100000000000000,
                      "minimum": -100000000000000,
                      "type": "integer",
                      "x-struct": null,
                      "x-validate": null
                    },
                    "currency": {
                      "default": "COP",
                      "description": "Currency of money",
                      "enum": ["COP"],
                      "example": "COP",
                      "type": "string",
                      "x-struct": null,
                      "x-validate": null
                    }
                  },
                  "required": ["amount", "currency"],
                  "type": "object",
                  "x-struct": null,
                  "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MoneySchema"
                },
                "batch": {
                  "description": "A batch of transfers represents a group of transfers data.\n",
                  "properties": {
                    "account_id": {
                      "description": "Represents the account of the client to which a debit entry will be made as a result of the transaction.\n",
                      "example": "acc_5tgliBmzjZ6mpQPRbQjfKj",
                      "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                      "readOnly": true,
                      "type": "string",
                      "x-context": "account",
                      "x-struct": null,
                      "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
                    },
                    "id": {
                      "description": "Indicates the format for resource's ID",
                      "example": "bat_5tgliBmzjZ6mpQPRbQjfKj",
                      "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                      "readOnly": true,
                      "type": "string",
                      "x-context": "batch_transfer",
                      "x-struct": null,
                      "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
                    },
                    "inserted_at": {
                      "description": "Indicates when a batch of transfers was created",
                      "example": "2022-01-01T01:00:00Z",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string",
                      "x-struct": null,
                      "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.DateTimeSchema",
                      "x-validation": {}
                    },
                    "origin": {
                      "description": "Represents the creation origin of the transfer's batch.\n\n- file: When transfers were uploaded by an excel file.\n- manual: When transfers were created into the Mono Dashboard.\n- api: When transfers were uploaded through Mono Banking API.\n",
                      "enum": ["file", "manual", "api", "core"],
                      "example": "api",
                      "readOnly": true,
                      "type": "string",
                      "x-struct": null,
                      "x-validate": null
                    },
                    "state": {
                      "description": "Represents the batch state\n",
                      "enum": [
                        "created",
                        "pending_otp",
                        "verified_otp",
                        "cancelled",
                        "processing_transactions",
                        "partially_approved",
                        "declined",
                        "approved",
                        "duplicated"
                      ],
                      "example": "created",
                      "readOnly": true,
                      "type": "string",
                      "x-struct": null,
                      "x-validate": null
                    },
                    "total_amount": {
                      "description": "Represents the total amount of money of the batch.\n",
                      "properties": {
                        "amount": {
                          "description": "Amount of money in `cents` with the format is int64. Thus, you\nsend an integer \"10.000.000\", we will interpret it as \"100.000,00\"\n",
                          "example": 100000000,
                          "format": "int64",
                          "maximum": 100000000000000,
                          "minimum": -100000000000000,
                          "type": "integer",
                          "x-struct": null,
                          "x-validate": null
                        },
                        "currency": {
                          "default": "COP",
                          "description": "Currency of money",
                          "enum": ["COP"],
                          "example": "COP",
                          "type": "string",
                          "x-struct": null,
                          "x-validate": null
                        }
                      },
                      "readOnly": true,
                      "required": ["amount", "currency"],
                      "type": "object",
                      "x-struct": null,
                      "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MoneySchema"
                    },
                    "updated_at": {
                      "description": "Indicates when a batch of transfers was updated",
                      "example": "2022-01-01T01:00:00Z",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string",
                      "x-struct": null,
                      "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.DateTimeSchema",
                      "x-validation": {}
                    }
                  },
                  "readOnly": true,
                  "required": ["account_id"],
                  "title": "BatchTransfer",
                  "type": "object",
                  "x-struct": "Elixir.MonoBankingAPI.Schemas.BankTransfers.BatchSchema",
                  "x-validate": null
                },
                "declination_reason": {
                  "description": "Returns the reason why the bank transfer couldn't be approved by the destination bank.\n",
                  "enum": [
                    "account_closed",
                    "account_inactive_or_blocked",
                    "account_not_found",
                    "account_not_opened",
                    "account_type_mismatch",
                    "authorization_revoked",
                    "daily_amount_limit_exceeded",
                    "daily_count_limit_exceeded",
                    "debit_transaction_contingency_return",
                    "definition_product",
                    "delegate_dead",
                    "destination_signer_not_found",
                    "disabled_account",
                    "electronic_deposit_account",
                    "funds_unavailable",
                    "global_limit_exceeded",
                    "id_does_not_match",
                    "insufficient_funds",
                    "invalid_account",
                    "invalid_effective_date",
                    "invalid_payee_account_data",
                    "monthly_amount_limit_exceeded",
                    "monthly_count_limit_exceeded",
                    "order_no_payment",
                    "payee_dead",
                    "payee_electronic_deposit_not_enabled",
                    "payee_requested_return",
                    "payee_return_credit_transaction",
                    "payee_return_debit_transaction",
                    "payer_not_authorized",
                    "prenotification_does_not_exist",
                    "prenotification_not_processed_by_receiving_entity",
                    "return_request_efo",
                    "seizure_account",
                    "target_rejected_transfer",
                    "transaction_deadline_exceeded",
                    "transfer_information_is_invalid",
                    "user_abandoned_transaction_in_bank",
                    "lower_limit_reached",
                    "could_not_resolve_target_wallet",
                    "transaction_not_completed_by_transfiya",
                    "destination_bank_error_timeout",
                    "transaction_exceeds_configured_business_rules",
                    "user_exceeds_transactional_limit_authorized_by_bank",
                    "unexpected_error_in_destination_bank",
                    "unknown"
                  ],
                  "example": "insufficient_funds",
                  "nullable": true,
                  "readOnly": true,
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                },
                "description": {
                  "description": "Sets the description of the transfer\n",
                  "example": "string",
                  "nullable": true,
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                },
                "emails_to_notify": {
                  "description": "It contains a list with the emails that will receive the receipt of the bank transfer",
                  "items": {
                    "description": "Email",
                    "example": "someone@gmail.com",
                    "format": "email",
                    "nullable": true,
                    "pattern": "^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+){1,2}$",
                    "type": "string",
                    "x-struct": null,
                    "x-validate": null
                  },
                  "nullable": true,
                  "type": "array",
                  "x-struct": null,
                  "x-validate": null
                },
                "entity_id": {
                  "deprecated": true,
                  "description": "Represents a unique transfer id generated and provided by the API user. The API user is responsible to generate and provide a unique id for all their organization's transfers.\nNew transfers with a previously registered entity_id are going to be logged as duplicated. Duplicated transfers don't participate in any money movement.\nTransfers generated through mono's web application don't have an entity_id.\nDeprecated; will be removed in the future. Please use the external_id field instead.\n",
                  "example": "string",
                  "maxLength": 255,
                  "nullable": true,
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                },
                "external_id": {
                  "description": "Represents a unique transfer id generated and provided by the API user. The API user is responsible to generate and provide a unique id for all their organization's transfers.\nNew transfers with a previously registered external_id (or deprecated entity_id) are going to be logged as duplicated. Duplicated transfers don't participate in any money movement.\nTransfers generated through mono's web application don't have an external_id.\nThis field is the replacement of the entity_id field.\nThis field is required when the deprecated entity_id field is not provided.\n",
                  "example": "123456789",
                  "maxLength": 255,
                  "nullable": true,
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                },
                "fallback_routing": {
                  "default": [],
                  "description": "This field is used to specify a fallback routing option for bank transfers:\n\n- `ach`: This option sends the bank transfer through the ACH network if the initial attempt using the `turbo` routing option fails.\n\nUse case:\n\nif the `routing` field is `turbo` and `fallback_routing` is `[\"ach\"]`, which means that the bank transfer will be sent in real-time. However,\nif the initial attempt to send the transfer using the `turbo` option fails, the transfer will be sent through the ACH.\n\nThis field will only be used if the initial attempt to send the transfer using the `turbo` option fails.\nIf the initial attempt succeeds, no fallback routing option will be used.\n",
                  "example": [],
                  "items": {
                    "enum": ["ach", "transfiya"],
                    "type": "string",
                    "x-struct": null,
                    "x-validate": null
                  },
                  "maxItems": 1,
                  "type": "array",
                  "uniqueItems": true,
                  "x-struct": null,
                  "x-validate": null
                },
                "id": {
                  "description": "Indicates the format for resource's ID",
                  "example": "trn_5tgliBmzjZ6mpQPRbQjfKj",
                  "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                  "readOnly": true,
                  "type": "string",
                  "x-context": "transfer",
                  "x-struct": null,
                  "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
                },
                "inserted_at": {
                  "description": "Indicates when a transfer was created",
                  "example": "2022-01-01T01:00:00Z",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string",
                  "x-struct": null,
                  "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.DateTimeSchema",
                  "x-validation": {}
                },
                "payee": {
                  "description": "Sets the payee data, which will be used to specify the details about the destination bank account",
                  "properties": {
                    "bank_account": {
                      "description": "Sets the destination bank account information, which will be contain the bank, account type and the account number to be transferred the money.\n",
                      "nullable": true,
                      "properties": {
                        "bank_code": {
                          "description": "Sets the bank code, which is used to identify the bank where the money will be transferred.\n\nYou can find the bank code by using the GET banks endpoint and look the code field.\n",
                          "nullable": true,
                          "type": "string",
                          "x-return-bank": true,
                          "x-struct": null,
                          "x-validate": "Elixir.MonoBankingAPI.Schemas.BankTransfers.BankCodeSchema"
                        },
                        "number": {
                          "description": "Sets the payee's account number\n",
                          "example": "123456789",
                          "maxLength": 17,
                          "minLength": 5,
                          "nullable": true,
                          "type": "string",
                          "x-struct": null,
                          "x-validate": null
                        },
                        "type": {
                          "description": "Sets the payee's account type\n",
                          "enum": [
                            "savings_account",
                            "checking_account",
                            "electronic_deposit"
                          ],
                          "example": "savings_account",
                          "nullable": true,
                          "type": "string",
                          "x-struct": null,
                          "x-validate": null
                        }
                      },
                      "title": "PayeeBankAccountSchema",
                      "type": "object",
                      "x-struct": "Elixir.MonoBankingAPI.Schemas.BankTransfers.PayeeBankAccountSchema",
                      "x-validate": "Elixir.MonoBankingAPI.Schemas.BankTransfers.PayeeBankAccountSchema"
                    },
                    "document_number": {
                      "description": "Sets the payee's document number",
                      "example": "string",
                      "maxLength": 15,
                      "minLength": 5,
                      "nullable": false,
                      "type": "string",
                      "x-struct": null,
                      "x-validate": null
                    },
                    "document_type": {
                      "default": "CC",
                      "description": "  The document types are represented by codes and can be:\n\n  For Colombia:\n  - CC\n  - TI\n  - NUIP\n  - TE\n  - CE\n  - NIT\n  - PASS\n  - PEP\n  - PPT\n  - FDO\n  - RC\n\n  For other countries:\n  - NID (National Identification)\n  - DL (Driver License)\n  - PASS\n",
                      "enum": [
                        "CC",
                        "TI",
                        "NUIP",
                        "TE",
                        "CE",
                        "NIT",
                        "PASS",
                        "PEP",
                        "PPT",
                        "FDO",
                        "RC",
                        "DL",
                        "NID"
                      ],
                      "example": "CC",
                      "nullable": false,
                      "title": "DocumentTypes",
                      "type": "string",
                      "x-struct": null,
                      "x-validate": null
                    },
                    "email": {
                      "description": "Sets the payee's email",
                      "example": "someone@gmail.com",
                      "format": "email",
                      "nullable": true,
                      "pattern": "^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+){1,2}$",
                      "type": "string",
                      "x-struct": null,
                      "x-validate": null
                    },
                    "name": {
                      "description": "Sets the payee's full name",
                      "example": "string",
                      "nullable": false,
                      "type": "string",
                      "x-struct": null,
                      "x-validate": null
                    },
                    "phone_number": {
                      "description": "Sets the payee's phone number",
                      "example": "+573001000000",
                      "nullable": true,
                      "pattern": "^\\+[1-9]\\d{1,14}$",
                      "type": "string",
                      "x-region": "co",
                      "x-struct": null,
                      "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.PhoneSchema"
                    }
                  },
                  "required": ["name", "document_type", "document_number"],
                  "title": "TransferPayee",
                  "type": "object",
                  "x-struct": "Elixir.MonoBankingAPI.Schemas.BankTransfers.TransferPayeeSchema",
                  "x-validate": "Elixir.MonoBankingAPI.Schemas.BankTransfers.TransferPayeeSchema"
                },
                "reference": {
                  "description": "Sets the reference of the transfer\n",
                  "example": "string",
                  "nullable": true,
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                },
                "routing": {
                  "default": "ach",
                  "description": "Represents where the bank transfers will be processed:\n\n- `ach`: This option sends the bank transfer through the ACH network. ACH is a batch processing system that is used to transfer funds between banks. This option takes 1 or 2 days to complete.\n- `turbo`: This option sends the bank transfer in real-time. It's important to note that it is only available to certain banks. You can check the supported banks by making a GET request to the `/banks` endpoint.\n- `transfiya`: This option sends the bank transfer in real-time to a cellphone number.\n",
                  "enum": ["ach", "turbo", "transfiya"],
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                },
                "state": {
                  "description": "Represents the current transfer state, it can have the following states:\n\n- created: Indicates that the bank transfer has been created in our system, but it has not yet been sent to the bank for processing.\n- in_progress: Indicates that the bank transfer is currently being processed by the bank. This includes steps such as verifying the account information, transferring the funds between accounts, and updating the account balances. This state occurs when the bank is working on executing the bank transfer, but it has not yet been completed.\n- approved: Indicates that the bank transfer has been approved by the bank and has been successfully executed. This means that the funds have been transferred from the source account to the destination account, and the account balances have been updated accordingly.\n- declined: Indicates that the bank transfer has been rejected by the bank and will not be executed. This may occur due to a variety of reasons, such as insufficient funds in the source account, invalid account information, or regulatory restrictions.\n- cancelled: Indicates that the bank transfer has been canceled by a user. This occurs if the client decides to cancel the transfer before it has been sent to the bank.\n- duplicated: Indicates that the bank transfer has already been received in our system, and the repeated record will not be taken into account. This could be because the transfer was sent multiple times with the same \"entity_id\" field.\n",
                  "enum": [
                    "created",
                    "in_progress",
                    "cancelled",
                    "declined",
                    "approved",
                    "duplicated"
                  ],
                  "example": "created",
                  "readOnly": true,
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                },
                "updated_at": {
                  "description": "Indicates when a transfer was updated",
                  "example": "2022-01-01T01:00:00Z",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string",
                  "x-struct": null,
                  "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.DateTimeSchema",
                  "x-validation": {}
                }
              },
              "required": ["amount", "payee"],
              "title": "Transfer",
              "type": "object",
              "x-struct": "Elixir.MonoBankingAPI.Schemas.BankTransfers.TransferSchema",
              "x-validate": "Elixir.MonoBankingAPI.Schemas.BankTransfers.TransferSchema"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          }
        },
        "readOnly": true,
        "title": "ListTransferSchema",
        "type": "object",
        "x-struct": "Elixir.MonoBankingAPI.Schemas.BankTransfers.ListTransferSchema",
        "x-validate": null
      },
      "CreateTransferSchema": {
        "description": "A batch of transfers represents a group of transfers data.\n",
        "properties": {
          "account_id": {
            "description": "Represents the account of the client to which a debit entry will be made as a result of the transaction.\n",
            "example": "acc_5tgliBmzjZ6mpQPRbQjfKj",
            "nullable": false,
            "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
            "type": "string",
            "writeOnly": true,
            "x-context": "account",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
          },
          "transfers": {
            "description": "It contains a list with transfers",
            "items": {
              "description": "A transfer object represents a movement of funds from your Mono Account to another bank account,\nby the moment we only support bank transfer through Colombian's bank account.\n",
              "properties": {
                "amount": {
                  "description": "Represents the amount of money to make the bank transfer\n",
                  "nullable": false,
                  "properties": {
                    "amount": {
                      "description": "Amount of money in `cents` with the format is int64. Thus, you\nsend an integer \"10.000.000\", we will interpret it as \"100.000,00\"\n",
                      "example": 100000000,
                      "format": "int64",
                      "maximum": 100000000000000,
                      "minimum": -100000000000000,
                      "type": "integer",
                      "x-struct": null,
                      "x-validate": null
                    },
                    "currency": {
                      "default": "COP",
                      "description": "Currency of money",
                      "enum": ["COP"],
                      "example": "COP",
                      "type": "string",
                      "x-struct": null,
                      "x-validate": null
                    }
                  },
                  "required": ["amount", "currency"],
                  "type": "object",
                  "x-struct": null,
                  "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MoneySchema"
                },
                "batch": {
                  "description": "A batch of transfers represents a group of transfers data.\n",
                  "properties": {
                    "account_id": {
                      "description": "Represents the account of the client to which a debit entry will be made as a result of the transaction.\n",
                      "example": "acc_5tgliBmzjZ6mpQPRbQjfKj",
                      "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                      "readOnly": true,
                      "type": "string",
                      "x-context": "account",
                      "x-struct": null,
                      "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
                    },
                    "id": {
                      "description": "Indicates the format for resource's ID",
                      "example": "bat_5tgliBmzjZ6mpQPRbQjfKj",
                      "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                      "readOnly": true,
                      "type": "string",
                      "x-context": "batch_transfer",
                      "x-struct": null,
                      "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
                    },
                    "inserted_at": {
                      "description": "Indicates when a batch of transfers was created",
                      "example": "2022-01-01T01:00:00Z",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string",
                      "x-struct": null,
                      "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.DateTimeSchema",
                      "x-validation": {}
                    },
                    "origin": {
                      "description": "Represents the creation origin of the transfer's batch.\n\n- file: When transfers were uploaded by an excel file.\n- manual: When transfers were created into the Mono Dashboard.\n- api: When transfers were uploaded through Mono Banking API.\n",
                      "enum": ["file", "manual", "api", "core"],
                      "example": "api",
                      "readOnly": true,
                      "type": "string",
                      "x-struct": null,
                      "x-validate": null
                    },
                    "state": {
                      "description": "Represents the batch state\n",
                      "enum": [
                        "created",
                        "pending_otp",
                        "verified_otp",
                        "cancelled",
                        "processing_transactions",
                        "partially_approved",
                        "declined",
                        "approved",
                        "duplicated"
                      ],
                      "example": "created",
                      "readOnly": true,
                      "type": "string",
                      "x-struct": null,
                      "x-validate": null
                    },
                    "total_amount": {
                      "description": "Represents the total amount of money of the batch.\n",
                      "properties": {
                        "amount": {
                          "description": "Amount of money in `cents` with the format is int64. Thus, you\nsend an integer \"10.000.000\", we will interpret it as \"100.000,00\"\n",
                          "example": 100000000,
                          "format": "int64",
                          "maximum": 100000000000000,
                          "minimum": -100000000000000,
                          "type": "integer",
                          "x-struct": null,
                          "x-validate": null
                        },
                        "currency": {
                          "default": "COP",
                          "description": "Currency of money",
                          "enum": ["COP"],
                          "example": "COP",
                          "type": "string",
                          "x-struct": null,
                          "x-validate": null
                        }
                      },
                      "readOnly": true,
                      "required": ["amount", "currency"],
                      "type": "object",
                      "x-struct": null,
                      "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MoneySchema"
                    },
                    "updated_at": {
                      "description": "Indicates when a batch of transfers was updated",
                      "example": "2022-01-01T01:00:00Z",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string",
                      "x-struct": null,
                      "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.DateTimeSchema",
                      "x-validation": {}
                    }
                  },
                  "readOnly": true,
                  "required": ["account_id"],
                  "title": "BatchTransfer",
                  "type": "object",
                  "x-struct": "Elixir.MonoBankingAPI.Schemas.BankTransfers.BatchSchema",
                  "x-validate": null
                },
                "declination_reason": {
                  "description": "Returns the reason why the bank transfer couldn't be approved by the destination bank.\n",
                  "enum": [
                    "account_closed",
                    "account_inactive_or_blocked",
                    "account_not_found",
                    "account_not_opened",
                    "account_type_mismatch",
                    "authorization_revoked",
                    "daily_amount_limit_exceeded",
                    "daily_count_limit_exceeded",
                    "debit_transaction_contingency_return",
                    "definition_product",
                    "delegate_dead",
                    "destination_signer_not_found",
                    "disabled_account",
                    "electronic_deposit_account",
                    "funds_unavailable",
                    "global_limit_exceeded",
                    "id_does_not_match",
                    "insufficient_funds",
                    "invalid_account",
                    "invalid_effective_date",
                    "invalid_payee_account_data",
                    "monthly_amount_limit_exceeded",
                    "monthly_count_limit_exceeded",
                    "order_no_payment",
                    "payee_dead",
                    "payee_electronic_deposit_not_enabled",
                    "payee_requested_return",
                    "payee_return_credit_transaction",
                    "payee_return_debit_transaction",
                    "payer_not_authorized",
                    "prenotification_does_not_exist",
                    "prenotification_not_processed_by_receiving_entity",
                    "return_request_efo",
                    "seizure_account",
                    "target_rejected_transfer",
                    "transaction_deadline_exceeded",
                    "transfer_information_is_invalid",
                    "user_abandoned_transaction_in_bank",
                    "lower_limit_reached",
                    "could_not_resolve_target_wallet",
                    "transaction_not_completed_by_transfiya",
                    "destination_bank_error_timeout",
                    "transaction_exceeds_configured_business_rules",
                    "user_exceeds_transactional_limit_authorized_by_bank",
                    "unexpected_error_in_destination_bank",
                    "unknown"
                  ],
                  "example": "insufficient_funds",
                  "nullable": true,
                  "readOnly": true,
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                },
                "description": {
                  "description": "Sets the description of the transfer\n",
                  "example": "string",
                  "nullable": true,
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                },
                "emails_to_notify": {
                  "description": "It contains a list with the emails that will receive the receipt of the bank transfer",
                  "items": {
                    "description": "Email",
                    "example": "someone@gmail.com",
                    "format": "email",
                    "nullable": true,
                    "pattern": "^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+){1,2}$",
                    "type": "string",
                    "x-struct": null,
                    "x-validate": null
                  },
                  "nullable": true,
                  "type": "array",
                  "x-struct": null,
                  "x-validate": null
                },
                "entity_id": {
                  "deprecated": true,
                  "description": "Represents a unique transfer id generated and provided by the API user. The API user is responsible to generate and provide a unique id for all their organization's transfers.\nNew transfers with a previously registered entity_id are going to be logged as duplicated. Duplicated transfers don't participate in any money movement.\nTransfers generated through mono's web application don't have an entity_id.\nDeprecated; will be removed in the future. Please use the external_id field instead.\n",
                  "example": "string",
                  "maxLength": 255,
                  "nullable": true,
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                },
                "external_id": {
                  "description": "Represents a unique transfer id generated and provided by the API user. The API user is responsible to generate and provide a unique id for all their organization's transfers.\nNew transfers with a previously registered external_id (or deprecated entity_id) are going to be logged as duplicated. Duplicated transfers don't participate in any money movement.\nTransfers generated through mono's web application don't have an external_id.\nThis field is the replacement of the entity_id field.\nThis field is required when the deprecated entity_id field is not provided.\n",
                  "example": "123456789",
                  "maxLength": 255,
                  "nullable": true,
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                },
                "fallback_routing": {
                  "default": [],
                  "description": "This field is used to specify a fallback routing option for bank transfers:\n\n- `ach`: This option sends the bank transfer through the ACH network if the initial attempt using the `turbo` routing option fails.\n\nUse case:\n\nif the `routing` field is `turbo` and `fallback_routing` is `[\"ach\"]`, which means that the bank transfer will be sent in real-time. However,\nif the initial attempt to send the transfer using the `turbo` option fails, the transfer will be sent through the ACH.\n\nThis field will only be used if the initial attempt to send the transfer using the `turbo` option fails.\nIf the initial attempt succeeds, no fallback routing option will be used.\n",
                  "example": [],
                  "items": {
                    "enum": ["ach", "transfiya"],
                    "type": "string",
                    "x-struct": null,
                    "x-validate": null
                  },
                  "maxItems": 1,
                  "type": "array",
                  "uniqueItems": true,
                  "x-struct": null,
                  "x-validate": null
                },
                "id": {
                  "description": "Indicates the format for resource's ID",
                  "example": "trn_5tgliBmzjZ6mpQPRbQjfKj",
                  "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                  "readOnly": true,
                  "type": "string",
                  "x-context": "transfer",
                  "x-struct": null,
                  "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
                },
                "inserted_at": {
                  "description": "Indicates when a transfer was created",
                  "example": "2022-01-01T01:00:00Z",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string",
                  "x-struct": null,
                  "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.DateTimeSchema",
                  "x-validation": {}
                },
                "payee": {
                  "description": "Sets the payee data, which will be used to specify the details about the destination bank account",
                  "properties": {
                    "bank_account": {
                      "description": "Sets the destination bank account information, which will be contain the bank, account type and the account number to be transferred the money.\n",
                      "nullable": true,
                      "properties": {
                        "bank_code": {
                          "description": "Sets the bank code, which is used to identify the bank where the money will be transferred.\n\nYou can find the bank code by using the GET banks endpoint and look the code field.\n",
                          "nullable": true,
                          "type": "string",
                          "x-return-bank": true,
                          "x-struct": null,
                          "x-validate": "Elixir.MonoBankingAPI.Schemas.BankTransfers.BankCodeSchema"
                        },
                        "number": {
                          "description": "Sets the payee's account number\n",
                          "example": "123456789",
                          "maxLength": 17,
                          "minLength": 5,
                          "nullable": true,
                          "type": "string",
                          "x-struct": null,
                          "x-validate": null
                        },
                        "type": {
                          "description": "Sets the payee's account type\n",
                          "enum": [
                            "savings_account",
                            "checking_account",
                            "electronic_deposit"
                          ],
                          "example": "savings_account",
                          "nullable": true,
                          "type": "string",
                          "x-struct": null,
                          "x-validate": null
                        }
                      },
                      "title": "PayeeBankAccountSchema",
                      "type": "object",
                      "x-struct": "Elixir.MonoBankingAPI.Schemas.BankTransfers.PayeeBankAccountSchema",
                      "x-validate": "Elixir.MonoBankingAPI.Schemas.BankTransfers.PayeeBankAccountSchema"
                    },
                    "document_number": {
                      "description": "Sets the payee's document number",
                      "example": "string",
                      "maxLength": 15,
                      "minLength": 5,
                      "nullable": false,
                      "type": "string",
                      "x-struct": null,
                      "x-validate": null
                    },
                    "document_type": {
                      "default": "CC",
                      "description": "  The document types are represented by codes and can be:\n\n  For Colombia:\n  - CC\n  - TI\n  - NUIP\n  - TE\n  - CE\n  - NIT\n  - PASS\n  - PEP\n  - PPT\n  - FDO\n  - RC\n\n  For other countries:\n  - NID (National Identification)\n  - DL (Driver License)\n  - PASS\n",
                      "enum": [
                        "CC",
                        "TI",
                        "NUIP",
                        "TE",
                        "CE",
                        "NIT",
                        "PASS",
                        "PEP",
                        "PPT",
                        "FDO",
                        "RC",
                        "DL",
                        "NID"
                      ],
                      "example": "CC",
                      "nullable": false,
                      "title": "DocumentTypes",
                      "type": "string",
                      "x-struct": null,
                      "x-validate": null
                    },
                    "email": {
                      "description": "Sets the payee's email",
                      "example": "someone@gmail.com",
                      "format": "email",
                      "nullable": true,
                      "pattern": "^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+){1,2}$",
                      "type": "string",
                      "x-struct": null,
                      "x-validate": null
                    },
                    "name": {
                      "description": "Sets the payee's full name",
                      "example": "string",
                      "nullable": false,
                      "type": "string",
                      "x-struct": null,
                      "x-validate": null
                    },
                    "phone_number": {
                      "description": "Sets the payee's phone number",
                      "example": "+573001000000",
                      "nullable": true,
                      "pattern": "^\\+[1-9]\\d{1,14}$",
                      "type": "string",
                      "x-region": "co",
                      "x-struct": null,
                      "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.PhoneSchema"
                    }
                  },
                  "required": ["name", "document_type", "document_number"],
                  "title": "TransferPayee",
                  "type": "object",
                  "x-struct": "Elixir.MonoBankingAPI.Schemas.BankTransfers.TransferPayeeSchema",
                  "x-validate": "Elixir.MonoBankingAPI.Schemas.BankTransfers.TransferPayeeSchema"
                },
                "reference": {
                  "description": "Sets the reference of the transfer\n",
                  "example": "string",
                  "nullable": true,
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                },
                "routing": {
                  "default": "ach",
                  "description": "Represents where the bank transfers will be processed:\n\n- `ach`: This option sends the bank transfer through the ACH network. ACH is a batch processing system that is used to transfer funds between banks. This option takes 1 or 2 days to complete.\n- `turbo`: This option sends the bank transfer in real-time. It's important to note that it is only available to certain banks. You can check the supported banks by making a GET request to the `/banks` endpoint.\n- `transfiya`: This option sends the bank transfer in real-time to a cellphone number.\n",
                  "enum": ["ach", "turbo", "transfiya"],
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                },
                "state": {
                  "description": "Represents the current transfer state, it can have the following states:\n\n- created: Indicates that the bank transfer has been created in our system, but it has not yet been sent to the bank for processing.\n- in_progress: Indicates that the bank transfer is currently being processed by the bank. This includes steps such as verifying the account information, transferring the funds between accounts, and updating the account balances. This state occurs when the bank is working on executing the bank transfer, but it has not yet been completed.\n- approved: Indicates that the bank transfer has been approved by the bank and has been successfully executed. This means that the funds have been transferred from the source account to the destination account, and the account balances have been updated accordingly.\n- declined: Indicates that the bank transfer has been rejected by the bank and will not be executed. This may occur due to a variety of reasons, such as insufficient funds in the source account, invalid account information, or regulatory restrictions.\n- cancelled: Indicates that the bank transfer has been canceled by a user. This occurs if the client decides to cancel the transfer before it has been sent to the bank.\n- duplicated: Indicates that the bank transfer has already been received in our system, and the repeated record will not be taken into account. This could be because the transfer was sent multiple times with the same \"entity_id\" field.\n",
                  "enum": [
                    "created",
                    "in_progress",
                    "cancelled",
                    "declined",
                    "approved",
                    "duplicated"
                  ],
                  "example": "created",
                  "readOnly": true,
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                },
                "updated_at": {
                  "description": "Indicates when a transfer was updated",
                  "example": "2022-01-01T01:00:00Z",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string",
                  "x-struct": null,
                  "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.DateTimeSchema",
                  "x-validation": {}
                }
              },
              "required": ["amount", "payee"],
              "title": "Transfer",
              "type": "object",
              "x-struct": "Elixir.MonoBankingAPI.Schemas.BankTransfers.TransferSchema",
              "x-validate": "Elixir.MonoBankingAPI.Schemas.BankTransfers.TransferSchema"
            },
            "maxItems": 1000,
            "minItems": 1,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": ["account_id", "transfers"],
        "title": "CreateTransferSchema",
        "type": "object",
        "x-struct": "Elixir.MonoBankingAPI.Schemas.BankTransfers.CreateTransferSchema",
        "x-validate": null
      },
      "Transfer": {
        "description": "A transfer object represents a movement of funds from your Mono Account to another bank account,\nby the moment we only support bank transfer through Colombian's bank account.\n",
        "properties": {
          "amount": {
            "description": "Represents the amount of money to make the bank transfer\n",
            "nullable": false,
            "properties": {
              "amount": {
                "description": "Amount of money in `cents` with the format is int64. Thus, you\nsend an integer \"10.000.000\", we will interpret it as \"100.000,00\"\n",
                "example": 100000000,
                "format": "int64",
                "maximum": 100000000000000,
                "minimum": -100000000000000,
                "type": "integer",
                "x-struct": null,
                "x-validate": null
              },
              "currency": {
                "default": "COP",
                "description": "Currency of money",
                "enum": ["COP"],
                "example": "COP",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              }
            },
            "required": ["amount", "currency"],
            "type": "object",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MoneySchema"
          },
          "batch": {
            "description": "A batch of transfers represents a group of transfers data.\n",
            "properties": {
              "account_id": {
                "description": "Represents the account of the client to which a debit entry will be made as a result of the transaction.\n",
                "example": "acc_5tgliBmzjZ6mpQPRbQjfKj",
                "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                "readOnly": true,
                "type": "string",
                "x-context": "account",
                "x-struct": null,
                "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
              },
              "id": {
                "description": "Indicates the format for resource's ID",
                "example": "bat_5tgliBmzjZ6mpQPRbQjfKj",
                "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                "readOnly": true,
                "type": "string",
                "x-context": "batch_transfer",
                "x-struct": null,
                "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
              },
              "inserted_at": {
                "description": "Indicates when a batch of transfers was created",
                "example": "2022-01-01T01:00:00Z",
                "format": "date-time",
                "readOnly": true,
                "type": "string",
                "x-struct": null,
                "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.DateTimeSchema",
                "x-validation": {}
              },
              "origin": {
                "description": "Represents the creation origin of the transfer's batch.\n\n- file: When transfers were uploaded by an excel file.\n- manual: When transfers were created into the Mono Dashboard.\n- api: When transfers were uploaded through Mono Banking API.\n",
                "enum": ["file", "manual", "api", "core"],
                "example": "api",
                "readOnly": true,
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "state": {
                "description": "Represents the batch state\n",
                "enum": [
                  "created",
                  "pending_otp",
                  "verified_otp",
                  "cancelled",
                  "processing_transactions",
                  "partially_approved",
                  "declined",
                  "approved",
                  "duplicated"
                ],
                "example": "created",
                "readOnly": true,
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "total_amount": {
                "description": "Represents the total amount of money of the batch.\n",
                "properties": {
                  "amount": {
                    "description": "Amount of money in `cents` with the format is int64. Thus, you\nsend an integer \"10.000.000\", we will interpret it as \"100.000,00\"\n",
                    "example": 100000000,
                    "format": "int64",
                    "maximum": 100000000000000,
                    "minimum": -100000000000000,
                    "type": "integer",
                    "x-struct": null,
                    "x-validate": null
                  },
                  "currency": {
                    "default": "COP",
                    "description": "Currency of money",
                    "enum": ["COP"],
                    "example": "COP",
                    "type": "string",
                    "x-struct": null,
                    "x-validate": null
                  }
                },
                "readOnly": true,
                "required": ["amount", "currency"],
                "type": "object",
                "x-struct": null,
                "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MoneySchema"
              },
              "updated_at": {
                "description": "Indicates when a batch of transfers was updated",
                "example": "2022-01-01T01:00:00Z",
                "format": "date-time",
                "readOnly": true,
                "type": "string",
                "x-struct": null,
                "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.DateTimeSchema",
                "x-validation": {}
              }
            },
            "readOnly": true,
            "required": ["account_id"],
            "title": "BatchTransfer",
            "type": "object",
            "x-struct": "Elixir.MonoBankingAPI.Schemas.BankTransfers.BatchSchema",
            "x-validate": null
          },
          "declination_reason": {
            "description": "Returns the reason why the bank transfer couldn't be approved by the destination bank.\n",
            "enum": [
              "account_closed",
              "account_inactive_or_blocked",
              "account_not_found",
              "account_not_opened",
              "account_type_mismatch",
              "authorization_revoked",
              "daily_amount_limit_exceeded",
              "daily_count_limit_exceeded",
              "debit_transaction_contingency_return",
              "definition_product",
              "delegate_dead",
              "destination_signer_not_found",
              "disabled_account",
              "electronic_deposit_account",
              "funds_unavailable",
              "global_limit_exceeded",
              "id_does_not_match",
              "insufficient_funds",
              "invalid_account",
              "invalid_effective_date",
              "invalid_payee_account_data",
              "monthly_amount_limit_exceeded",
              "monthly_count_limit_exceeded",
              "order_no_payment",
              "payee_dead",
              "payee_electronic_deposit_not_enabled",
              "payee_requested_return",
              "payee_return_credit_transaction",
              "payee_return_debit_transaction",
              "payer_not_authorized",
              "prenotification_does_not_exist",
              "prenotification_not_processed_by_receiving_entity",
              "return_request_efo",
              "seizure_account",
              "target_rejected_transfer",
              "transaction_deadline_exceeded",
              "transfer_information_is_invalid",
              "user_abandoned_transaction_in_bank",
              "lower_limit_reached",
              "could_not_resolve_target_wallet",
              "transaction_not_completed_by_transfiya",
              "destination_bank_error_timeout",
              "transaction_exceeds_configured_business_rules",
              "user_exceeds_transactional_limit_authorized_by_bank",
              "unexpected_error_in_destination_bank",
              "unknown"
            ],
            "example": "insufficient_funds",
            "nullable": true,
            "readOnly": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "description": {
            "description": "Sets the description of the transfer\n",
            "example": "string",
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "emails_to_notify": {
            "description": "It contains a list with the emails that will receive the receipt of the bank transfer",
            "items": {
              "description": "Email",
              "example": "someone@gmail.com",
              "format": "email",
              "nullable": true,
              "pattern": "^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+){1,2}$",
              "type": "string",
              "x-struct": null,
              "x-validate": null
            },
            "nullable": true,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "entity_id": {
            "deprecated": true,
            "description": "Represents a unique transfer id generated and provided by the API user. The API user is responsible to generate and provide a unique id for all their organization's transfers.\nNew transfers with a previously registered entity_id are going to be logged as duplicated. Duplicated transfers don't participate in any money movement.\nTransfers generated through mono's web application don't have an entity_id.\nDeprecated; will be removed in the future. Please use the external_id field instead.\n",
            "example": "string",
            "maxLength": 255,
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "external_id": {
            "description": "Represents a unique transfer id generated and provided by the API user. The API user is responsible to generate and provide a unique id for all their organization's transfers.\nNew transfers with a previously registered external_id (or deprecated entity_id) are going to be logged as duplicated. Duplicated transfers don't participate in any money movement.\nTransfers generated through mono's web application don't have an external_id.\nThis field is the replacement of the entity_id field.\nThis field is required when the deprecated entity_id field is not provided.\n",
            "example": "123456789",
            "maxLength": 255,
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "fallback_routing": {
            "default": [],
            "description": "This field is used to specify a fallback routing option for bank transfers:\n\n- `ach`: This option sends the bank transfer through the ACH network if the initial attempt using the `turbo` routing option fails.\n\nUse case:\n\nif the `routing` field is `turbo` and `fallback_routing` is `[\"ach\"]`, which means that the bank transfer will be sent in real-time. However,\nif the initial attempt to send the transfer using the `turbo` option fails, the transfer will be sent through the ACH.\n\nThis field will only be used if the initial attempt to send the transfer using the `turbo` option fails.\nIf the initial attempt succeeds, no fallback routing option will be used.\n",
            "example": [],
            "items": {
              "enum": ["ach", "transfiya"],
              "type": "string",
              "x-struct": null,
              "x-validate": null
            },
            "maxItems": 1,
            "type": "array",
            "uniqueItems": true,
            "x-struct": null,
            "x-validate": null
          },
          "id": {
            "description": "Indicates the format for resource's ID",
            "example": "trn_5tgliBmzjZ6mpQPRbQjfKj",
            "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
            "readOnly": true,
            "type": "string",
            "x-context": "transfer",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
          },
          "inserted_at": {
            "description": "Indicates when a transfer was created",
            "example": "2022-01-01T01:00:00Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.DateTimeSchema",
            "x-validation": {}
          },
          "payee": {
            "description": "Sets the payee data, which will be used to specify the details about the destination bank account",
            "properties": {
              "bank_account": {
                "description": "Sets the destination bank account information, which will be contain the bank, account type and the account number to be transferred the money.\n",
                "nullable": true,
                "properties": {
                  "bank_code": {
                    "description": "Sets the bank code, which is used to identify the bank where the money will be transferred.\n\nYou can find the bank code by using the GET banks endpoint and look the code field.\n",
                    "nullable": true,
                    "type": "string",
                    "x-return-bank": true,
                    "x-struct": null,
                    "x-validate": "Elixir.MonoBankingAPI.Schemas.BankTransfers.BankCodeSchema"
                  },
                  "number": {
                    "description": "Sets the payee's account number\n",
                    "example": "123456789",
                    "maxLength": 17,
                    "minLength": 5,
                    "nullable": true,
                    "type": "string",
                    "x-struct": null,
                    "x-validate": null
                  },
                  "type": {
                    "description": "Sets the payee's account type\n",
                    "enum": [
                      "savings_account",
                      "checking_account",
                      "electronic_deposit"
                    ],
                    "example": "savings_account",
                    "nullable": true,
                    "type": "string",
                    "x-struct": null,
                    "x-validate": null
                  }
                },
                "title": "PayeeBankAccountSchema",
                "type": "object",
                "x-struct": "Elixir.MonoBankingAPI.Schemas.BankTransfers.PayeeBankAccountSchema",
                "x-validate": "Elixir.MonoBankingAPI.Schemas.BankTransfers.PayeeBankAccountSchema"
              },
              "document_number": {
                "description": "Sets the payee's document number",
                "example": "string",
                "maxLength": 15,
                "minLength": 5,
                "nullable": false,
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "document_type": {
                "default": "CC",
                "description": "  The document types are represented by codes and can be:\n\n  For Colombia:\n  - CC\n  - TI\n  - NUIP\n  - TE\n  - CE\n  - NIT\n  - PASS\n  - PEP\n  - PPT\n  - FDO\n  - RC\n\n  For other countries:\n  - NID (National Identification)\n  - DL (Driver License)\n  - PASS\n",
                "enum": [
                  "CC",
                  "TI",
                  "NUIP",
                  "TE",
                  "CE",
                  "NIT",
                  "PASS",
                  "PEP",
                  "PPT",
                  "FDO",
                  "RC",
                  "DL",
                  "NID"
                ],
                "example": "CC",
                "nullable": false,
                "title": "DocumentTypes",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "email": {
                "description": "Sets the payee's email",
                "example": "someone@gmail.com",
                "format": "email",
                "nullable": true,
                "pattern": "^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+){1,2}$",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "name": {
                "description": "Sets the payee's full name",
                "example": "string",
                "nullable": false,
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "phone_number": {
                "description": "Sets the payee's phone number",
                "example": "+573001000000",
                "nullable": true,
                "pattern": "^\\+[1-9]\\d{1,14}$",
                "type": "string",
                "x-region": "co",
                "x-struct": null,
                "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.PhoneSchema"
              }
            },
            "required": ["name", "document_type", "document_number"],
            "title": "TransferPayee",
            "type": "object",
            "x-struct": "Elixir.MonoBankingAPI.Schemas.BankTransfers.TransferPayeeSchema",
            "x-validate": "Elixir.MonoBankingAPI.Schemas.BankTransfers.TransferPayeeSchema"
          },
          "reference": {
            "description": "Sets the reference of the transfer\n",
            "example": "string",
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "routing": {
            "default": "ach",
            "description": "Represents where the bank transfers will be processed:\n\n- `ach`: This option sends the bank transfer through the ACH network. ACH is a batch processing system that is used to transfer funds between banks. This option takes 1 or 2 days to complete.\n- `turbo`: This option sends the bank transfer in real-time. It's important to note that it is only available to certain banks. You can check the supported banks by making a GET request to the `/banks` endpoint.\n- `transfiya`: This option sends the bank transfer in real-time to a cellphone number.\n",
            "enum": ["ach", "turbo", "transfiya"],
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "state": {
            "description": "Represents the current transfer state, it can have the following states:\n\n- created: Indicates that the bank transfer has been created in our system, but it has not yet been sent to the bank for processing.\n- in_progress: Indicates that the bank transfer is currently being processed by the bank. This includes steps such as verifying the account information, transferring the funds between accounts, and updating the account balances. This state occurs when the bank is working on executing the bank transfer, but it has not yet been completed.\n- approved: Indicates that the bank transfer has been approved by the bank and has been successfully executed. This means that the funds have been transferred from the source account to the destination account, and the account balances have been updated accordingly.\n- declined: Indicates that the bank transfer has been rejected by the bank and will not be executed. This may occur due to a variety of reasons, such as insufficient funds in the source account, invalid account information, or regulatory restrictions.\n- cancelled: Indicates that the bank transfer has been canceled by a user. This occurs if the client decides to cancel the transfer before it has been sent to the bank.\n- duplicated: Indicates that the bank transfer has already been received in our system, and the repeated record will not be taken into account. This could be because the transfer was sent multiple times with the same \"entity_id\" field.\n",
            "enum": [
              "created",
              "in_progress",
              "cancelled",
              "declined",
              "approved",
              "duplicated"
            ],
            "example": "created",
            "readOnly": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "updated_at": {
            "description": "Indicates when a transfer was updated",
            "example": "2022-01-01T01:00:00Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.DateTimeSchema",
            "x-validation": {}
          }
        },
        "required": ["amount", "payee"],
        "title": "Transfer",
        "type": "object",
        "x-struct": "Elixir.MonoBankingAPI.Schemas.BankTransfers.TransferSchema",
        "x-validate": "Elixir.MonoBankingAPI.Schemas.BankTransfers.TransferSchema"
      },
      "UnknownOrigin": {
        "allOf": [
          {
            "description": "Represents the account movements in the ledger.",
            "properties": {
              "amount": {
                "description": "Money schema",
                "properties": {
                  "amount": {
                    "description": "Amount of money in `cents` with the format is int64. Thus, you\nsend an integer \"10.000.000\", we will interpret it as \"100.000,00\"\n",
                    "example": 100000000,
                    "format": "int64",
                    "maximum": 100000000000000,
                    "minimum": -100000000000000,
                    "type": "integer",
                    "x-struct": null,
                    "x-validate": null
                  },
                  "currency": {
                    "default": "COP",
                    "description": "Currency of money",
                    "enum": ["COP", "USD", "MXN", "CLP", "BRL", "PEN"],
                    "example": "COP",
                    "type": "string",
                    "x-struct": null,
                    "x-validate": null
                  }
                },
                "required": ["amount", "currency"],
                "type": "object",
                "x-struct": null,
                "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MoneySchema"
              },
              "description": {
                "description": "useful infomation about the transaction",
                "example": "Purchase on ABC Commerce",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "id": {
                "description": "Indicates the format for resource's ID",
                "example": "ltx_5tgliBmzjZ6mpQPRbQjfKj",
                "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                "type": "string",
                "x-context": "ledger_transaction",
                "x-struct": null,
                "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
              },
              "id_in_origin": {
                "description": "String field",
                "example": "018d673c-5d65-7fff-8051-e970f13f9ca1",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "operation_type": {
                "description": "The four common transaction operations are credit, debit, hold, and release:\n\n- credit: Increases the balance of the account. It is typically used to represent income.\n- debit: Decreases the balance of the account. It is typically used to represent expenses.\n- hold: Setting aside of funds for a specific purpose, such as a pending transaction.\n- release: Represent the release of previously held funds for a pending transaction.\n",
                "enum": ["debit", "credit", "hold", "release"],
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "origin": {
                "description": "The operation from which the transaction originated",
                "example": "unknown",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "origin_transaction_at": {
                "description": "Date and Time at which the transaction was created",
                "example": "2022-01-01T01:00:00Z",
                "format": "date-time",
                "type": "string",
                "x-struct": null,
                "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.DateTimeSchema",
                "x-validation": {}
              },
              "reverted_by_id": {
                "description": "The ID of the transaction that reverts this ledger transaction",
                "example": "ltx_5tgliBmzjZ6mpQPRbQjfKj",
                "nullable": true,
                "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                "type": "string",
                "x-context": "ledger_transaction",
                "x-struct": null,
                "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
              },
              "reverts_id": {
                "description": "The ID of the transaction that this ledger transaction reverts",
                "example": "ltx_5tgliBmzjZ6mpQPRbQjfKj",
                "nullable": true,
                "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                "type": "string",
                "x-context": "ledger_transaction",
                "x-struct": null,
                "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
              },
              "transaction_at": {
                "description": "Date and Time at which the transaction was actually performed",
                "example": "2022-01-01T01:00:00Z",
                "format": "date-time",
                "type": "string",
                "x-struct": null,
                "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.DateTimeSchema",
                "x-validation": {}
              }
            },
            "title": "LedgerAccountTransaction",
            "type": "object",
            "x-struct": null,
            "x-validate": null
          },
          {
            "properties": {
              "details": {
                "nullable": true,
                "x-struct": null,
                "x-validate": null
              }
            },
            "type": "object",
            "x-struct": null,
            "x-validate": null
          }
        ],
        "title": "UnknownOrigin",
        "x-struct": "Elixir.MonoBankingAPI.Schemas.Ledger.AccountTransactions.UnknownOriginSchema",
        "x-validate": null
      },
      "ApplePayTokenProvisioning": {
        "description": "Attributes for Apple Pay token provisioning",
        "properties": {
          "certificates": {
            "description": "List of certificates for token provisioning",
            "items": { "type": "string", "x-struct": null, "x-validate": null },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "nonce": {
            "description": "Nonce for token provisioning",
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "nonce_signature": {
            "description": "Nonce signature for token provisioning",
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": ["certificates", "nonce", "nonce_signature"],
        "title": "ApplePayTokenProvisioning",
        "type": "object",
        "x-struct": null,
        "x-validate": null
      },
      "ManageSpendingControlRule": {
        "description": "Manage an expense control by adding or updating a spending control rule",
        "discriminator": {
          "mapping": {
            "card_usage": "#/components/schemas/CardUsageSchema",
            "mcc": "#/components/schemas/MCCSchema",
            "merchant_name": "#/components/schemas/MerchantNameControlRule",
            "mid": "#/components/schemas/MIDSchema",
            "velocity": "#/components/schemas/VelocitySchema",
            "withdrawal_velocity": "#/components/schemas/WithdrawalVelocitySchema"
          },
          "propertyName": "type"
        },
        "oneOf": [
          { "$ref": "#/components/schemas/VelocitySchema" },
          { "$ref": "#/components/schemas/CardUsageSchema" },
          { "$ref": "#/components/schemas/WithdrawalVelocitySchema" },
          { "$ref": "#/components/schemas/MCCSchema" },
          { "$ref": "#/components/schemas/MIDSchema" }
        ],
        "title": "ManageSpendingControlRule",
        "type": "object",
        "x-struct": "Elixir.MonoBankingAPI.Schemas.SpendingControls.Rules.ManageRuleSchema",
        "x-validate": null
      },
      "ListCardSchema": {
        "description": "It contains a set of cards. Paging information is also included.",
        "properties": {
          "cards": {
            "description": "Contains a cards list",
            "items": {
              "properties": {
                "account_id": {
                  "description": "Account ID",
                  "example": "lacc_5tgliBmzjZ6mpQPRbQjfKj",
                  "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                  "type": "string",
                  "x-context": "ledger_account",
                  "x-struct": null,
                  "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
                },
                "cardholder": {
                  "description": "Represents the cardholder information",
                  "properties": {
                    "address": {
                      "description": "Address schema",
                      "properties": {
                        "city": {
                          "description": "City, district, suburb, town, or village",
                          "example": "Chapinero",
                          "maxLength": 100,
                          "pattern": "^[A-Za-zÀ-ÿ0-9 -.]+$",
                          "type": "string",
                          "x-struct": null,
                          "x-validate": null
                        },
                        "country": {
                          "description": "Country code ISO 3166-1 alpha-2",
                          "example": "CO",
                          "pattern": "^[A-Z]{2}$",
                          "type": "string",
                          "x-struct": null,
                          "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.CountryCodeSchema"
                        },
                        "extra": {
                          "description": "Additional information",
                          "example": "Location near the southeast corner in front of the ABC mall. deliver to the security guard pedro pruebas",
                          "maxLength": 144,
                          "nullable": true,
                          "pattern": "^[A-Za-zÀ-ÿ0-9 -.]+$",
                          "type": "string",
                          "x-struct": null,
                          "x-validate": null
                        },
                        "line_1": {
                          "description": "Street, P.O. Box, or address information",
                          "example": "Calle 97 # 15-24",
                          "format": "address_line_1",
                          "maxLength": 100,
                          "pattern": "^[a-zA-Z0-9 -.°'#:,]+$",
                          "type": "string",
                          "x-struct": null,
                          "x-validate": null
                        },
                        "line_2": {
                          "description": "Home, apartment, room, suite, office, or building",
                          "example": "Apto. 208",
                          "maxLength": 100,
                          "nullable": true,
                          "pattern": "^[A-Za-zÀ-ÿ0-9 -.]+$",
                          "type": "string",
                          "x-struct": null,
                          "x-validate": null
                        },
                        "state": {
                          "description": "State, province, region, or county",
                          "example": "Bogota D.C",
                          "maxLength": 100,
                          "pattern": "^[A-Za-zÀ-ÿ0-9 -.]+$",
                          "type": "string",
                          "x-struct": null,
                          "x-validate": null
                        },
                        "zip_code": {
                          "example": "110221",
                          "maxLength": 10,
                          "pattern": "^[A-Za-zÀ-ÿ0-9 -.]+$",
                          "type": "string",
                          "x-struct": null,
                          "x-validate": null
                        }
                      },
                      "required": [
                        "country",
                        "state",
                        "city",
                        "line_1",
                        "zip_code"
                      ],
                      "title": "Address",
                      "type": "object",
                      "x-struct": null,
                      "x-validate": null
                    },
                    "birthdate": {
                      "description": "Cardholder birthdate",
                      "example": "1941-09-09",
                      "format": "date",
                      "type": "string",
                      "writeOnly": true,
                      "x-struct": null,
                      "x-validate": null
                    },
                    "document": {
                      "description": "Person document",
                      "properties": {
                        "country_code": {
                          "description": "Country code ISO 3166-1 alpha-2",
                          "example": "CO",
                          "pattern": "^[A-Z]{2}$",
                          "type": "string",
                          "x-struct": null,
                          "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.CountryCodeSchema"
                        },
                        "number": {
                          "description": "Document number",
                          "example": "1023711432",
                          "minLength": 5,
                          "type": "string",
                          "x-struct": null,
                          "x-validate": null
                        },
                        "person_type": {
                          "default": "natural",
                          "description": "  The person types can be:\n  - natural\n",
                          "enum": ["natural"],
                          "example": "natural",
                          "title": "PersonTypes",
                          "type": "string",
                          "x-struct": null,
                          "x-validate": null
                        },
                        "type": {
                          "default": "CC",
                          "description": "  The document types are represented by codes and can be:\n\n  For Colombia:\n  - CC\n  - CE\n  - PPT\n\n  For other countries:\n  - PASS\n",
                          "enum": ["CC", "CE", "PASS", "PPT"],
                          "example": "CC",
                          "title": "DocumentTypes",
                          "type": "string",
                          "x-struct": null,
                          "x-validate": null
                        }
                      },
                      "required": ["type", "number"],
                      "type": "object",
                      "x-struct": null,
                      "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.PersonDocumentSchema"
                    },
                    "email": {
                      "description": "Email",
                      "example": "someone@gmail.com",
                      "format": "email",
                      "pattern": "^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+){1,2}$",
                      "type": "string",
                      "x-struct": null,
                      "x-validate": null
                    },
                    "first_name": {
                      "description": "String field",
                      "example": "Dennis",
                      "maxLength": 64,
                      "minLength": 2,
                      "type": "string",
                      "x-struct": null,
                      "x-validate": null
                    },
                    "id": {
                      "description": "Cardholder ID",
                      "example": "carh_5tgliBmzjZ6mpQPRbQjfKj",
                      "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                      "readOnly": true,
                      "type": "string",
                      "x-context": "cardholder",
                      "x-struct": null,
                      "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
                    },
                    "last_name": {
                      "description": "String field",
                      "example": "Alistair",
                      "maxLength": 64,
                      "minLength": 2,
                      "type": "string",
                      "x-struct": null,
                      "x-validate": null
                    },
                    "middle_name": {
                      "description": "String field",
                      "example": "Mac",
                      "maxLength": 64,
                      "minLength": 2,
                      "nullable": true,
                      "type": "string",
                      "x-struct": null,
                      "x-validate": null
                    },
                    "nationality": {
                      "description": "Country code ISO 3166-1 alpha-2",
                      "example": "CO",
                      "pattern": "^[A-Z]{2}$",
                      "type": "string",
                      "x-struct": null,
                      "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.CountryCodeSchema"
                    },
                    "phone_number": {
                      "description": "Phone number",
                      "example": "+573000000000",
                      "pattern": "^\\+[1-9]\\d{1,14}$",
                      "type": "string",
                      "x-region": "co",
                      "x-struct": null,
                      "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.PhoneSchema"
                    },
                    "second_last_name": {
                      "description": "String field",
                      "example": "Ritchie",
                      "maxLength": 64,
                      "minLength": 2,
                      "nullable": true,
                      "type": "string",
                      "x-struct": null,
                      "x-validate": null
                    }
                  },
                  "required": [
                    "email",
                    "first_name",
                    "last_name",
                    "document",
                    "phone_number",
                    "birthdate",
                    "nationality",
                    "address"
                  ],
                  "title": "Cardholder",
                  "type": "object",
                  "writeOnly": true,
                  "x-struct": null,
                  "x-validate": null
                },
                "cardholder_id": {
                  "description": "Cardholder ID",
                  "example": "carh_5tgliBmzjZ6mpQPRbQjfKj",
                  "nullable": true,
                  "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                  "type": "string",
                  "x-context": "cardholder",
                  "x-struct": null,
                  "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
                },
                "configuration_group_id": {
                  "description": "Identifier of the card configuration, you can check it on the endpoint /v1/ledger/tenant/config",
                  "example": "ccg_5tgliBmzjZ6mpQPRbQjfKj",
                  "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                  "type": "string",
                  "x-context": "card_config_group",
                  "x-struct": null,
                  "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
                },
                "id": {
                  "description": "Card ID",
                  "example": "car_5tgliBmzjZ6mpQPRbQjfKj",
                  "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                  "readOnly": true,
                  "type": "string",
                  "x-context": "card",
                  "x-struct": null,
                  "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
                },
                "last_four": {
                  "description": "Last four digits of the card",
                  "example": "0745",
                  "readOnly": true,
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                },
                "nickname": {
                  "description": "Card nickname",
                  "example": "Travel card",
                  "nullable": true,
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                },
                "spending_controls": {
                  "description": "Spending controls relate to the card",
                  "nullable": true,
                  "properties": {
                    "card_target": {
                      "description": "Spending control ID direct assigned to the card",
                      "example": "spc_5tgliBmzjZ6mpQPRbQjfKj",
                      "nullable": true,
                      "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                      "type": "string",
                      "x-context": "spending_control",
                      "x-struct": null,
                      "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
                    },
                    "configuration_group_target": {
                      "description": "Spending control ID assigned to the card's configuration group",
                      "example": "spc_5tgliBmzjZ6mpQPRbQjfKj",
                      "nullable": true,
                      "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                      "readOnly": true,
                      "type": "string",
                      "x-context": "spending_control",
                      "x-struct": null,
                      "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
                    }
                  },
                  "type": "object",
                  "x-struct": null,
                  "x-validate": null
                },
                "state": {
                  "description": "State of the card",
                  "enum": ["active", "frozen", "canceled", "created"],
                  "example": "active",
                  "readOnly": true,
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                },
                "type": {
                  "description": "Specifies whether the card is virtual or plastic.\n- \"virtual\": The card is exclusively digital; Credentials numbers are accessed digitally through an online HTML iframe\n- \"plastic\": Refers to a physical card that contains the specified credentials numbers on it.\nBoth types of cards can be used to make online (e-commerce) or card present (POS) purchases, and these can be used in Apple Pay or Google Wallet.\nThis is a paid feature. Please check with your sales representative.\n",
                  "enum": ["virtual", "plastic"],
                  "example": "virtual",
                  "readOnly": true,
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                }
              },
              "required": ["account_id", "configuration_group_id"],
              "type": "object",
              "x-struct": null,
              "x-validate": "Elixir.MonoBankingAPI.Schemas.Cards.CommonCardSchema"
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "pagination": {
            "description": "Pagination schema",
            "properties": {
              "page_number": {
                "description": "Current page number",
                "example": 1,
                "type": "integer",
                "x-struct": null,
                "x-validate": null
              },
              "page_size": {
                "description": "Amount of items by page",
                "example": 10,
                "type": "integer",
                "x-struct": null,
                "x-validate": null
              },
              "total_items": {
                "description": "Total of items by the resource",
                "example": 100,
                "type": "integer",
                "x-struct": null,
                "x-validate": null
              },
              "total_pages": {
                "description": "Total pages by the resource",
                "example": 10,
                "type": "integer",
                "x-struct": null,
                "x-validate": null
              }
            },
            "readOnly": true,
            "title": "Pagination",
            "type": "object",
            "x-struct": "Elixir.MonoBankingAPI.Schemas.Components.PaginationSchema",
            "x-validate": null
          }
        },
        "readOnly": true,
        "title": "ListCardSchema",
        "type": "object",
        "x-struct": "Elixir.MonoBankingAPI.Schemas.Cards.ListCardSchema",
        "x-validate": null
      },
      "ListTargetsSchema": {
        "description": "It contains a list with spending controls targets and pagination information",
        "properties": {
          "pagination": {
            "description": "Pagination schema",
            "properties": {
              "page_number": {
                "description": "Current page number",
                "example": 1,
                "type": "integer",
                "x-struct": null,
                "x-validate": null
              },
              "page_size": {
                "description": "Amount of items by page",
                "example": 10,
                "type": "integer",
                "x-struct": null,
                "x-validate": null
              },
              "total_items": {
                "description": "Total of items by the resource",
                "example": 100,
                "type": "integer",
                "x-struct": null,
                "x-validate": null
              },
              "total_pages": {
                "description": "Total pages by the resource",
                "example": 10,
                "type": "integer",
                "x-struct": null,
                "x-validate": null
              }
            },
            "readOnly": true,
            "title": "Pagination",
            "type": "object",
            "x-struct": "Elixir.MonoBankingAPI.Schemas.Components.PaginationSchema",
            "x-validate": null
          },
          "target_type": {
            "description": "Target type",
            "enum": ["card", "card_config_group"],
            "example": "card",
            "readOnly": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "targets": {
            "description": "It contains a list with spending controls targets ids",
            "items": {
              "description": "Indicates the format for target's ID",
              "example": "car_5tgliBmzjZ6mpQPRbQjfKj",
              "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
              "title": "SpendingControlTargetsId",
              "type": "string",
              "x-struct": null,
              "x-validate": null
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          }
        },
        "readOnly": true,
        "title": "ListTargetsSchema",
        "type": "object",
        "x-struct": "Elixir.MonoBankingAPI.Schemas.SpendingControls.ListTargetsSchema",
        "x-validate": null
      },
      "CardPresentmentPaymentDetail": {
        "allOf": [
          {
            "description": "Represents the account movements in the ledger.",
            "properties": {
              "amount": {
                "description": "Money schema",
                "properties": {
                  "amount": {
                    "description": "Amount of money in `cents` with the format is int64. Thus, you\nsend an integer \"10.000.000\", we will interpret it as \"100.000,00\"\n",
                    "example": 100000000,
                    "format": "int64",
                    "maximum": 100000000000000,
                    "minimum": -100000000000000,
                    "type": "integer",
                    "x-struct": null,
                    "x-validate": null
                  },
                  "currency": {
                    "default": "COP",
                    "description": "Currency of money",
                    "enum": ["COP", "USD", "MXN", "CLP", "BRL", "PEN"],
                    "example": "COP",
                    "type": "string",
                    "x-struct": null,
                    "x-validate": null
                  }
                },
                "required": ["amount", "currency"],
                "type": "object",
                "x-struct": null,
                "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MoneySchema"
              },
              "description": {
                "description": "useful infomation about the transaction",
                "example": "Purchase on ABC Commerce",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "id": {
                "description": "Indicates the format for resource's ID",
                "example": "ltx_5tgliBmzjZ6mpQPRbQjfKj",
                "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                "type": "string",
                "x-context": "ledger_transaction",
                "x-struct": null,
                "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
              },
              "id_in_origin": {
                "description": "String field",
                "example": "cpp_5tgliBmzjZ6mpQPRbQjfKj",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "operation_type": {
                "description": "The four common transaction operations are credit, debit, hold, and release:\n\n- credit: Increases the balance of the account. It is typically used to represent income.\n- debit: Decreases the balance of the account. It is typically used to represent expenses.\n- hold: Setting aside of funds for a specific purpose, such as a pending transaction.\n- release: Represent the release of previously held funds for a pending transaction.\n",
                "enum": ["debit", "credit", "hold", "release"],
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "origin": {
                "description": "The operation from which the transaction originated",
                "example": "card_presentment_payment",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "origin_transaction_at": {
                "description": "Date and Time at which the transaction was created",
                "example": "2022-01-01T01:00:00Z",
                "format": "date-time",
                "type": "string",
                "x-struct": null,
                "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.DateTimeSchema",
                "x-validation": {}
              },
              "reverted_by_id": {
                "description": "The ID of the transaction that reverts this ledger transaction",
                "example": "ltx_5tgliBmzjZ6mpQPRbQjfKj",
                "nullable": true,
                "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                "type": "string",
                "x-context": "ledger_transaction",
                "x-struct": null,
                "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
              },
              "reverts_id": {
                "description": "The ID of the transaction that this ledger transaction reverts",
                "example": "ltx_5tgliBmzjZ6mpQPRbQjfKj",
                "nullable": true,
                "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                "type": "string",
                "x-context": "ledger_transaction",
                "x-struct": null,
                "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
              },
              "transaction_at": {
                "description": "Date and Time at which the transaction was actually performed",
                "example": "2022-01-01T01:00:00Z",
                "format": "date-time",
                "type": "string",
                "x-struct": null,
                "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.DateTimeSchema",
                "x-validation": {}
              }
            },
            "title": "LedgerAccountTransaction",
            "type": "object",
            "x-struct": null,
            "x-validate": null
          },
          {
            "properties": {
              "details": {
                "properties": {
                  "fx_rate": {
                    "description": "Rate in COP according to the payment date",
                    "example": "4000.00",
                    "type": "string",
                    "x-struct": null,
                    "x-validate": null
                  },
                  "id": {
                    "description": "Indicates the format for resource's ID",
                    "example": "cpp_5tgliBmzjZ6mpQPRbQjfKj",
                    "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                    "type": "string",
                    "x-context": "card_presentment_payment",
                    "x-struct": null,
                    "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
                  },
                  "paid_at": {
                    "description": "Date of the payment of the presentments",
                    "example": "1941-09-09",
                    "format": "date",
                    "type": "string",
                    "x-struct": null,
                    "x-validate": null
                  }
                },
                "type": "object",
                "x-struct": null,
                "x-validate": null
              }
            },
            "type": "object",
            "x-struct": null,
            "x-validate": null
          }
        ],
        "title": "CardPresentmentPaymentDetail",
        "x-struct": "Elixir.MonoBankingAPI.Schemas.Ledger.AccountTransactions.CardPresentmentPaymentSchema",
        "x-validate": null
      },
      "AccountBalance": {
        "description": "This scheme gets your current account balance, and it handles a parameter of the available amount and the dates of creation and update.",
        "properties": {
          "available": {
            "description": "Money schema",
            "properties": {
              "amount": {
                "description": "Amount of money in `cents` with the format is int64. Thus, you\nsend an integer \"10.000.000\", we will interpret it as \"100.000,00\"\n",
                "example": 100000000,
                "format": "int64",
                "maximum": 100000000000000,
                "minimum": -100000000000000,
                "type": "integer",
                "x-struct": null,
                "x-validate": null
              },
              "currency": {
                "default": "COP",
                "description": "Currency of money",
                "enum": ["COP"],
                "example": "COP",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              }
            },
            "required": ["amount", "currency"],
            "type": "object",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MoneySchema"
          },
          "id": {
            "description": "Indicates the format for resource's ID",
            "example": "acc_5tgliBmzjZ6mpQPRbQjfKj",
            "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
            "type": "string",
            "x-context": "account",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
          },
          "inserted_at": {
            "description": "Indicates when an account balance was created",
            "example": "2022-01-01T01:00:00Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.DateTimeSchema",
            "x-validation": {}
          },
          "updated_at": {
            "description": "Indicates when an account balance was updated",
            "example": "2022-01-01T01:00:00Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.DateTimeSchema",
            "x-validation": {}
          }
        },
        "title": "AccountBalance",
        "type": "object",
        "x-struct": "Elixir.MonoBankingAPI.Schemas.BankAccounts.BalanceSchema",
        "x-validate": null
      },
      "LedgerTenantConfig": {
        "description": "This customizable configuration is established when a tenant affiliates with the Mono Ledger API",
        "properties": {
          "card_configuration_groups": {
            "description": "Information about the customized card configurations specifically defined for the tenant.\n",
            "items": {
              "properties": {
                "card_type": {
                  "enum": ["virtual", "plastic"],
                  "readOnly": true,
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                },
                "country_code": {
                  "description": "Country code of the card configuration",
                  "example": "CO",
                  "pattern": "^[A-Z]{2}$",
                  "type": "string",
                  "x-struct": null,
                  "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.CountryCodeSchema"
                },
                "id": {
                  "description": "Indicates the format for resource's ID",
                  "example": "ccg_5tgliBmzjZ6mpQPRbQjfKj",
                  "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                  "readOnly": true,
                  "type": "string",
                  "x-context": "card_config_group",
                  "x-struct": null,
                  "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
                },
                "name": {
                  "description": "Name of the card configuration",
                  "example": "string",
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                }
              },
              "type": "object",
              "x-struct": null,
              "x-validate": null
            },
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "self_account_holder_id": {
            "description": "Indicates the format for resource's ID",
            "example": "acch_5tgliBmzjZ6mpQPRbQjfKj",
            "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
            "readOnly": true,
            "type": "string",
            "x-context": "account_holder",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
          },
          "supported_currencies": {
            "description": "Denotes the configured currency codes that the tenant acknowledges within the Mono Ledger API environment.",
            "items": {
              "enum": ["COP", "USD", "MXN", "CLP", "BRL", "PEN"],
              "type": "string",
              "x-struct": null,
              "x-validate": null
            },
            "readOnly": true,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          }
        },
        "title": "LedgerTenantConfig",
        "type": "object",
        "x-struct": "Elixir.MonoBankingAPI.Schemas.Ledger.TenantConfigSchema",
        "x-validate": null
      },
      "MCCSchema": {
        "minProperties": 2,
        "properties": {
          "mccs": {
            "items": {
              "description": "MCC code",
              "example": "5411",
              "maxLength": 4,
              "minLength": 4,
              "type": "string",
              "x-struct": null,
              "x-validate": null
            },
            "minItems": 1,
            "nullable": false,
            "type": "array",
            "x-struct": null,
            "x-validate": null
          },
          "operation": {
            "description": "If `forbid_mccs`, payments for the listed MCCs are not authorized. If `allow_mccs`, payments are authorized only for the listed MCCs.",
            "enum": ["allow_mccs", "forbid_mccs"],
            "example": "allow_mccs",
            "nullable": false,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "type": {
            "default": "mcc",
            "description": "String field",
            "example": "mcc",
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": ["type"],
        "title": "MCCSchema",
        "type": "object",
        "x-struct": "Elixir.MonoBankingAPI.Schemas.SpendingControls.Rules.MCCSchema",
        "x-validate": null
      },
      "LedgerTransfer": {
        "description": "Transfer funds smoothly between any two of your accounts",
        "properties": {
          "amount": {
            "description": "Money schema",
            "nullable": false,
            "properties": {
              "amount": {
                "description": "Amount of money in `cents` with the format is int64. Thus, you\nsend an integer \"10.000.000\", we will interpret it as \"100.000,00\"\n",
                "example": 100000000,
                "format": "int64",
                "maximum": 100000000000000,
                "minimum": 1,
                "type": "integer",
                "x-struct": null,
                "x-validate": null
              },
              "currency": {
                "default": "COP",
                "description": "Currency of money",
                "enum": ["COP", "USD", "MXN", "CLP", "BRL", "PEN"],
                "example": "COP",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              }
            },
            "required": ["amount", "currency"],
            "type": "object",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MoneySchema"
          },
          "description": {
            "description": "String field",
            "example": "Transfer XYZ",
            "maxLength": 255,
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "external_id": {
            "description": "Unique identifier of the transfer operation",
            "example": "37979c4d-9a6b-40de-b258-42e62f7ee4f1",
            "maxLength": 255,
            "nullable": false,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "id": {
            "description": "Indicates the format for resource's ID",
            "example": "accop_5tgliBmzjZ6mpQPRbQjfKj",
            "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
            "readOnly": true,
            "type": "string",
            "x-context": "subaccount_operation",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
          },
          "metadata": {
            "additionalProperties": true,
            "description": "A tenant-managed flat map for providing additional data about the transfer. The values are stored and displayed as strings, and the provided information will be returned as-is in the account transaction details.\n",
            "example": { "id": 3, "reference": 123 },
            "nullable": true,
            "type": "object",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MetadataSchema"
          },
          "payer_account_id": {
            "description": "Indicates the format for resource's ID",
            "example": "lacc_5tgliBmzjZ6mpQPRbQjfKj",
            "nullable": false,
            "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
            "type": "string",
            "x-context": "ledger_account",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
          },
          "receiving_account_id": {
            "description": "Indicates the format for resource's ID",
            "example": "lacc_5tgliBmzjZ6mpQPRbQjfKj",
            "nullable": false,
            "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
            "type": "string",
            "x-context": "ledger_account",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
          },
          "reference": {
            "description": "String field",
            "example": "123",
            "maxLength": 255,
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": [
          "payer_account_id",
          "receiving_account_id",
          "external_id",
          "amount"
        ],
        "title": "LedgerTransfer",
        "type": "object",
        "x-struct": "Elixir.MonoBankingAPI.Schemas.Ledger.AccountTransferSchema",
        "x-validate": null
      },
      "CardLook": {
        "description": "Contains the card look or appearance information",
        "properties": {
          "card_id": {
            "description": "Card ID",
            "example": "car_5tgliBmzjZ6mpQPRbQjfKj",
            "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
            "type": "string",
            "x-context": "card",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
          },
          "url": {
            "description": "URL using to embed the card information on web apps or sites using an iframe",
            "example": "https://the-card.cuentamono.com/card/car_9zgliCmzjZ9mpQPRbQifkJ",
            "format": "uri-reference",
            "readOnly": true,
            "type": "string",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.URLSchema"
          }
        },
        "title": "CardLook",
        "type": "object",
        "x-struct": null,
        "x-validate": null
      },
      "CardBalanceOperation": {
        "description": "Represents the card balance operations like topup or withdrawal",
        "properties": {
          "amount": {
            "description": "deposit balance amount",
            "properties": {
              "amount": {
                "description": "Amount of money in `cents` with the format is int64. Thus, you\nsend an integer \"10.000.000\", we will interpret it as \"100.000,00\"\n",
                "example": 100000000,
                "format": "int64",
                "maximum": 100000000000000,
                "minimum": -100000000000000,
                "type": "integer",
                "x-struct": null,
                "x-validate": null
              },
              "currency": {
                "default": "COP",
                "description": "Currency of money",
                "enum": ["COP"],
                "example": "COP",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              }
            },
            "required": ["amount", "currency"],
            "type": "object",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MoneySchema"
          },
          "card_id": {
            "description": "Indicates the format for resource's ID",
            "example": "car_5tgliBmzjZ6mpQPRbQjfKj",
            "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
            "readOnly": true,
            "type": "string",
            "x-context": "card",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
          },
          "description": {
            "description": "String field",
            "example": "Topup for suscripcion",
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "entity_id": {
            "description": "String field",
            "example": "Entity ID used for idempotency requests",
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "id": {
            "description": "Indicates the format for resource's ID",
            "example": "cbo_5tgliBmzjZ6mpQPRbQjfKj",
            "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
            "readOnly": true,
            "type": "string",
            "x-context": "card_balance_operation",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
          },
          "operation": {
            "description": "  there are two operation types:\n  - topup: Increments the card balance.\n  - withdrawal: Reduces the card balance.\n",
            "enum": ["topup", "withdrawal"],
            "example": "topup",
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "performed_at": {
            "description": "Date and time when the card balance operation was performed",
            "example": "2022-01-01T01:00:00Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.DateTimeSchema",
            "x-validation": {}
          }
        },
        "required": ["amount", "operation"],
        "title": "CardBalanceOperation",
        "type": "object",
        "x-struct": null,
        "x-validate": null
      },
      "LedgerCard": {
        "allOf": [
          {
            "properties": {
              "account_id": {
                "description": "Account ID",
                "example": "lacc_5tgliBmzjZ6mpQPRbQjfKj",
                "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                "type": "string",
                "x-context": "ledger_account",
                "x-struct": null,
                "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
              },
              "cardholder": {
                "description": "Represents the cardholder information",
                "properties": {
                  "address": {
                    "description": "Address schema",
                    "properties": {
                      "city": {
                        "description": "City, district, suburb, town, or village",
                        "example": "Chapinero",
                        "maxLength": 100,
                        "pattern": "^[A-Za-zÀ-ÿ0-9 -.]+$",
                        "type": "string",
                        "x-struct": null,
                        "x-validate": null
                      },
                      "country": {
                        "description": "Country code ISO 3166-1 alpha-2",
                        "example": "CO",
                        "pattern": "^[A-Z]{2}$",
                        "type": "string",
                        "x-struct": null,
                        "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.CountryCodeSchema"
                      },
                      "extra": {
                        "description": "Additional information",
                        "example": "Location near the southeast corner in front of the ABC mall. deliver to the security guard pedro pruebas",
                        "maxLength": 144,
                        "nullable": true,
                        "pattern": "^[A-Za-zÀ-ÿ0-9 -.]+$",
                        "type": "string",
                        "x-struct": null,
                        "x-validate": null
                      },
                      "line_1": {
                        "description": "Street, P.O. Box, or address information",
                        "example": "Calle 97 # 15-24",
                        "format": "address_line_1",
                        "maxLength": 100,
                        "pattern": "^[a-zA-Z0-9 -.°'#:,]+$",
                        "type": "string",
                        "x-struct": null,
                        "x-validate": null
                      },
                      "line_2": {
                        "description": "Home, apartment, room, suite, office, or building",
                        "example": "Apto. 208",
                        "maxLength": 100,
                        "nullable": true,
                        "pattern": "^[A-Za-zÀ-ÿ0-9 -.]+$",
                        "type": "string",
                        "x-struct": null,
                        "x-validate": null
                      },
                      "state": {
                        "description": "State, province, region, or county",
                        "example": "Bogota D.C",
                        "maxLength": 100,
                        "pattern": "^[A-Za-zÀ-ÿ0-9 -.]+$",
                        "type": "string",
                        "x-struct": null,
                        "x-validate": null
                      },
                      "zip_code": {
                        "example": "110221",
                        "maxLength": 10,
                        "pattern": "^[A-Za-zÀ-ÿ0-9 -.]+$",
                        "type": "string",
                        "x-struct": null,
                        "x-validate": null
                      }
                    },
                    "required": [
                      "country",
                      "state",
                      "city",
                      "line_1",
                      "zip_code"
                    ],
                    "title": "Address",
                    "type": "object",
                    "x-struct": null,
                    "x-validate": null
                  },
                  "birthdate": {
                    "description": "Cardholder birthdate",
                    "example": "1941-09-09",
                    "format": "date",
                    "type": "string",
                    "writeOnly": true,
                    "x-struct": null,
                    "x-validate": null
                  },
                  "document": {
                    "description": "Person document",
                    "properties": {
                      "country_code": {
                        "description": "Country code ISO 3166-1 alpha-2",
                        "example": "CO",
                        "pattern": "^[A-Z]{2}$",
                        "type": "string",
                        "x-struct": null,
                        "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.CountryCodeSchema"
                      },
                      "number": {
                        "description": "Document number",
                        "example": "1023711432",
                        "minLength": 5,
                        "type": "string",
                        "x-struct": null,
                        "x-validate": null
                      },
                      "person_type": {
                        "default": "natural",
                        "description": "  The person types can be:\n  - natural\n",
                        "enum": ["natural"],
                        "example": "natural",
                        "title": "PersonTypes",
                        "type": "string",
                        "x-struct": null,
                        "x-validate": null
                      },
                      "type": {
                        "default": "CC",
                        "description": "  The document types are represented by codes and can be:\n\n  For Colombia:\n  - CC\n  - CE\n  - PPT\n\n  For other countries:\n  - PASS\n",
                        "enum": ["CC", "CE", "PASS", "PPT"],
                        "example": "CC",
                        "title": "DocumentTypes",
                        "type": "string",
                        "x-struct": null,
                        "x-validate": null
                      }
                    },
                    "required": [
                      "type",
                      "number",
                      "person_type",
                      "country_code"
                    ],
                    "type": "object",
                    "x-struct": null,
                    "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.PersonDocumentSchema"
                  },
                  "email": {
                    "description": "Email",
                    "example": "someone@gmail.com",
                    "format": "email",
                    "pattern": "^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+){1,2}$",
                    "type": "string",
                    "x-struct": null,
                    "x-validate": null
                  },
                  "first_name": {
                    "description": "String field",
                    "example": "Dennis",
                    "maxLength": 64,
                    "minLength": 2,
                    "type": "string",
                    "x-struct": null,
                    "x-validate": null
                  },
                  "id": {
                    "description": "Cardholder ID",
                    "example": "carh_5tgliBmzjZ6mpQPRbQjfKj",
                    "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                    "readOnly": true,
                    "type": "string",
                    "x-context": "cardholder",
                    "x-struct": null,
                    "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
                  },
                  "last_name": {
                    "description": "String field",
                    "example": "Alistair",
                    "maxLength": 64,
                    "minLength": 2,
                    "type": "string",
                    "x-struct": null,
                    "x-validate": null
                  },
                  "middle_name": {
                    "description": "String field",
                    "example": "Mac",
                    "maxLength": 64,
                    "minLength": 2,
                    "nullable": true,
                    "type": "string",
                    "x-struct": null,
                    "x-validate": null
                  },
                  "nationality": {
                    "description": "Country code ISO 3166-1 alpha-2",
                    "example": "CO",
                    "pattern": "^[A-Z]{2}$",
                    "type": "string",
                    "x-struct": null,
                    "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.CountryCodeSchema"
                  },
                  "phone_number": {
                    "description": "Phone number",
                    "example": "+573000000000",
                    "pattern": "^\\+[1-9]\\d{1,14}$",
                    "type": "string",
                    "x-region": "co",
                    "x-struct": null,
                    "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.PhoneSchema"
                  },
                  "second_last_name": {
                    "description": "String field",
                    "example": "Ritchie",
                    "maxLength": 64,
                    "minLength": 2,
                    "nullable": true,
                    "type": "string",
                    "x-struct": null,
                    "x-validate": null
                  }
                },
                "required": [
                  "email",
                  "first_name",
                  "last_name",
                  "document",
                  "phone_number",
                  "birthdate",
                  "nationality",
                  "address"
                ],
                "title": "Cardholder",
                "type": "object",
                "writeOnly": true,
                "x-struct": null,
                "x-validate": null
              },
              "cardholder_id": {
                "description": "Cardholder ID",
                "example": "carh_5tgliBmzjZ6mpQPRbQjfKj",
                "nullable": true,
                "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                "type": "string",
                "x-context": "cardholder",
                "x-struct": null,
                "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
              },
              "configuration_group_id": {
                "description": "Identifier of the card configuration, you can check it on the endpoint /v1/ledger/tenant/config",
                "example": "ccg_5tgliBmzjZ6mpQPRbQjfKj",
                "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                "type": "string",
                "x-context": "card_config_group",
                "x-struct": null,
                "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
              },
              "id": {
                "description": "Card ID",
                "example": "car_5tgliBmzjZ6mpQPRbQjfKj",
                "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                "readOnly": true,
                "type": "string",
                "x-context": "card",
                "x-struct": null,
                "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
              },
              "last_four": {
                "description": "Last four digits of the card",
                "example": "0745",
                "readOnly": true,
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "nickname": {
                "description": "Card nickname",
                "example": "Travel card",
                "nullable": true,
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "spending_controls": {
                "description": "Spending controls relate to the card",
                "nullable": true,
                "properties": {
                  "card_target": {
                    "description": "Spending control ID direct assigned to the card",
                    "example": "spc_5tgliBmzjZ6mpQPRbQjfKj",
                    "nullable": true,
                    "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                    "type": "string",
                    "x-context": "spending_control",
                    "x-struct": null,
                    "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
                  },
                  "configuration_group_target": {
                    "description": "Spending control ID assigned to the card's configuration group",
                    "example": "spc_5tgliBmzjZ6mpQPRbQjfKj",
                    "nullable": true,
                    "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                    "readOnly": true,
                    "type": "string",
                    "x-context": "spending_control",
                    "x-struct": null,
                    "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
                  }
                },
                "type": "object",
                "x-struct": null,
                "x-validate": null
              },
              "state": {
                "description": "State of the card",
                "enum": ["active", "frozen", "canceled", "created"],
                "example": "active",
                "readOnly": true,
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "type": {
                "description": "Specifies whether the card is virtual or plastic.\n- \"virtual\": The card is exclusively digital; Credentials numbers are accessed digitally through an online HTML iframe\n- \"plastic\": Refers to a physical card that contains the specified credentials numbers on it.\nBoth types of cards can be used to make online (e-commerce) or card present (POS) purchases, and these can be used in Apple Pay or Google Wallet.\nThis is a paid feature. Please check with your sales representative.\n",
                "enum": ["virtual", "plastic"],
                "example": "virtual",
                "readOnly": true,
                "type": "string",
                "x-struct": null,
                "x-validate": null
              }
            },
            "required": ["account_id", "configuration_group_id"],
            "type": "object",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Cards.CommonCardSchema"
          }
        ],
        "title": "LedgerCard",
        "x-struct": "Elixir.MonoBankingAPI.Schemas.Ledger.LedgerCardSchema",
        "x-validate": null
      },
      "UpdateLedgerAccountBalance": {
        "description": "Topup or withdraw a ledger account balance.",
        "properties": {
          "amount": {
            "description": "Money schema",
            "nullable": false,
            "properties": {
              "amount": {
                "description": "Amount of money in `cents` with the format is int64. Thus, you\nsend an integer \"10.000.000\", we will interpret it as \"100.000,00\"\n",
                "example": 100000000,
                "format": "int64",
                "maximum": 100000000000000,
                "minimum": 1,
                "type": "integer",
                "x-struct": null,
                "x-validate": null
              },
              "currency": {
                "default": "COP",
                "description": "Currency of money",
                "enum": ["COP", "USD", "MXN", "CLP", "BRL", "PEN"],
                "example": "COP",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              }
            },
            "required": ["amount", "currency"],
            "type": "object",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MoneySchema"
          },
          "description": {
            "description": "String field",
            "example": "Topup #23",
            "maxLength": 255,
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "external_id": {
            "description": "Unique identifier of the update balance operation",
            "example": "37979c4d-9a6b-40de-b258-42e62f7ee4f1",
            "nullable": false,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "id": {
            "description": "Indicates the format for resource's ID",
            "example": "accop_5tgliBmzjZ6mpQPRbQjfKj",
            "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
            "readOnly": true,
            "type": "string",
            "x-context": "subaccount_operation",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
          },
          "metadata": {
            "additionalProperties": true,
            "example": { "id": 3, "reference": 123 },
            "nullable": true,
            "type": "object",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MetadataSchema"
          },
          "operation": {
            "description": "Operation type to perform an update balance, it can be one of the following options:\n- `topup`: Increment the account balance.\n- `withdrawal`: Decrease the account balance.\n",
            "enum": ["topup", "withdrawal"],
            "nullable": false,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "reference": {
            "description": "String field",
            "example": "231",
            "maxLength": 255,
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": ["operation", "amount", "external_id"],
        "title": "UpdateLedgerAccountBalance",
        "type": "object",
        "x-struct": "Elixir.MonoBankingAPI.Schemas.Ledger.UpdateBalanceSchema",
        "x-validate": null
      },
      "Pagination": {
        "description": "Pagination schema",
        "properties": {
          "page_number": {
            "description": "Current page number",
            "example": 1,
            "type": "integer",
            "x-struct": null,
            "x-validate": null
          },
          "page_size": {
            "description": "Amount of items by page",
            "example": 10,
            "type": "integer",
            "x-struct": null,
            "x-validate": null
          },
          "total_items": {
            "description": "Total of items by the resource",
            "example": 100,
            "type": "integer",
            "x-struct": null,
            "x-validate": null
          },
          "total_pages": {
            "description": "Total pages by the resource",
            "example": 10,
            "type": "integer",
            "x-struct": null,
            "x-validate": null
          }
        },
        "readOnly": true,
        "title": "Pagination",
        "type": "object",
        "x-struct": "Elixir.MonoBankingAPI.Schemas.Components.PaginationSchema",
        "x-validate": null
      },
      "CardTransactionOriginDetail": {
        "allOf": [
          {
            "description": "Represents the account movements in the ledger.",
            "properties": {
              "amount": {
                "description": "Money schema",
                "properties": {
                  "amount": {
                    "description": "Amount of money in `cents` with the format is int64. Thus, you\nsend an integer \"10.000.000\", we will interpret it as \"100.000,00\"\n",
                    "example": 100000000,
                    "format": "int64",
                    "maximum": 100000000000000,
                    "minimum": -100000000000000,
                    "type": "integer",
                    "x-struct": null,
                    "x-validate": null
                  },
                  "currency": {
                    "default": "COP",
                    "description": "Currency of money",
                    "enum": ["COP", "USD", "MXN", "CLP", "BRL", "PEN"],
                    "example": "COP",
                    "type": "string",
                    "x-struct": null,
                    "x-validate": null
                  }
                },
                "required": ["amount", "currency"],
                "type": "object",
                "x-struct": null,
                "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MoneySchema"
              },
              "description": {
                "description": "useful infomation about the transaction",
                "example": "Purchase on ABC Commerce",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "id": {
                "description": "Indicates the format for resource's ID",
                "example": "ltx_5tgliBmzjZ6mpQPRbQjfKj",
                "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                "type": "string",
                "x-context": "ledger_transaction",
                "x-struct": null,
                "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
              },
              "id_in_origin": {
                "description": "String field",
                "example": "ctx_02vc3Wvuv6WaaDM81m8Utv",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "operation_type": {
                "description": "The four common transaction operations are credit, debit, hold, and release:\n\n- credit: Increases the balance of the account. It is typically used to represent income.\n- debit: Decreases the balance of the account. It is typically used to represent expenses.\n- hold: Setting aside of funds for a specific purpose, such as a pending transaction.\n- release: Represent the release of previously held funds for a pending transaction.\n",
                "enum": ["debit", "credit", "hold", "release"],
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "origin": {
                "description": "The operation from which the transaction originated",
                "example": "card_transaction",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "origin_transaction_at": {
                "description": "Date and Time at which the transaction was created",
                "example": "2022-01-01T01:00:00Z",
                "format": "date-time",
                "type": "string",
                "x-struct": null,
                "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.DateTimeSchema",
                "x-validation": {}
              },
              "reverted_by_id": {
                "description": "The ID of the transaction that reverts this ledger transaction",
                "example": "ltx_5tgliBmzjZ6mpQPRbQjfKj",
                "nullable": true,
                "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                "type": "string",
                "x-context": "ledger_transaction",
                "x-struct": null,
                "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
              },
              "reverts_id": {
                "description": "The ID of the transaction that this ledger transaction reverts",
                "example": "ltx_5tgliBmzjZ6mpQPRbQjfKj",
                "nullable": true,
                "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                "type": "string",
                "x-context": "ledger_transaction",
                "x-struct": null,
                "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
              },
              "transaction_at": {
                "description": "Date and Time at which the transaction was actually performed",
                "example": "2022-01-01T01:00:00Z",
                "format": "date-time",
                "type": "string",
                "x-struct": null,
                "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.DateTimeSchema",
                "x-validation": {}
              }
            },
            "title": "LedgerAccountTransaction",
            "type": "object",
            "x-struct": null,
            "x-validate": null
          },
          {
            "properties": {
              "details": {
                "properties": {
                  "amount": {
                    "description": "Money schema",
                    "properties": {
                      "amount": {
                        "description": "Amount of money in `cents` with the format is int64. Thus, you\nsend an integer \"10.000.000\", we will interpret it as \"100.000,00\"\n",
                        "example": 100000000,
                        "format": "int64",
                        "maximum": 100000000000000,
                        "minimum": -100000000000000,
                        "type": "integer",
                        "x-struct": null,
                        "x-validate": null
                      },
                      "currency": {
                        "default": "COP",
                        "description": "Currency of money",
                        "enum": ["COP"],
                        "example": "COP",
                        "type": "string",
                        "x-struct": null,
                        "x-validate": null
                      }
                    },
                    "required": ["amount", "currency"],
                    "type": "object",
                    "x-struct": null,
                    "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MoneySchema"
                  },
                  "card": {
                    "properties": {
                      "id": {
                        "description": "Identifier of the card where the transaction was made",
                        "example": "car_5tgliBmzjZ6mpQPRbQjfKj",
                        "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                        "type": "string",
                        "x-context": "card",
                        "x-struct": null,
                        "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
                      },
                      "last_four": {
                        "description": "Last four digits of the card",
                        "type": "string",
                        "x-struct": null,
                        "x-validate": null
                      }
                    },
                    "type": "object",
                    "x-struct": null,
                    "x-validate": null
                  },
                  "card_id": {
                    "description": "Indicates the format for resource's ID",
                    "example": "car_5tgliBmzjZ6mpQPRbQjfKj",
                    "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                    "type": "string",
                    "x-context": "card",
                    "x-struct": null,
                    "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
                  },
                  "declination_reason": {
                    "description": "declination reason",
                    "enum": [
                      "account_blocked",
                      "account_canceled",
                      "account_holder_blocked",
                      "account_holder_canceled",
                      "card_daily_limit_exceeded",
                      "card_weekly_limit_exceeded",
                      "card_monthly_limit_exceeded",
                      "daily_limit_exceeded",
                      "monthly_limit_exceeded",
                      "insufficient_funds",
                      "insufficient_funds_tenant",
                      "insufficient_funds_gmf",
                      "card_insufficient_funds",
                      "card_insufficient_funds_gmf",
                      "pending_transfers",
                      "bank_connection_issue",
                      "provider_no_request",
                      "provider_timeout",
                      "velocity_daily_exceeded",
                      "velocity_weekly_exceeded",
                      "velocity_monthly_exceeded",
                      "withdrawal_velocity_daily_exceeded",
                      "withdrawal_velocity_monthly_exceeded",
                      "card_frozen",
                      "card_canceled",
                      "card_expired",
                      "invalid_cvc",
                      "invalid_exp_date",
                      "invalid_pin",
                      "pin_try_limit",
                      "online_purchase_disabled",
                      "physical_purchase_disabled",
                      "atm_withdrawal_disabled",
                      "not_allowed_mcc",
                      "not_allowed_mid",
                      "tokenizated_wallet_not_enabled",
                      "not_allowed_merchant_name",
                      "other"
                    ],
                    "nullable": true,
                    "type": "string",
                    "x-struct": null,
                    "x-validate": null
                  },
                  "id": {
                    "description": "Indicates the format for resource's ID",
                    "example": "ctx_5tgliBmzjZ6mpQPRbQjfKj",
                    "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                    "type": "string",
                    "x-context": "card_transaction",
                    "x-struct": null,
                    "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
                  },
                  "merchant": {
                    "description": "Information about the merchant where the transaction was made",
                    "properties": {
                      "country": {
                        "description": "Country where the merchant is located",
                        "example": "COL",
                        "type": "string",
                        "x-struct": null,
                        "x-validate": null
                      },
                      "id": {
                        "description": "ID of the merchant where the transaction was made",
                        "example": "10000",
                        "type": "string",
                        "x-struct": null,
                        "x-validate": null
                      },
                      "mcc": {
                        "description": "Code that classifies the type of services provided by the merchant",
                        "example": "1010",
                        "type": "string",
                        "x-struct": null,
                        "x-validate": null
                      },
                      "name": {
                        "description": "Name of the merchant where the transaction was made",
                        "example": "Mono merchant",
                        "type": "string",
                        "x-struct": null,
                        "x-validate": null
                      }
                    },
                    "readOnly": true,
                    "type": "object",
                    "x-struct": null,
                    "x-validate": null
                  },
                  "merchant_amount": {
                    "description": "Money schema",
                    "properties": {
                      "amount": {
                        "description": "Amount of money in `cents` with the format is int64. Thus, you\nsend an integer \"10.000.000\", we will interpret it as \"100.000,00\"\n",
                        "example": 100000000,
                        "format": "int64",
                        "maximum": 100000000000000,
                        "minimum": -100000000000000,
                        "type": "integer",
                        "x-struct": null,
                        "x-validate": null
                      },
                      "currency": {
                        "default": "COP",
                        "description": "Currency of money",
                        "enum": ["COP"],
                        "example": "COP",
                        "type": "string",
                        "x-struct": null,
                        "x-validate": null
                      }
                    },
                    "required": ["amount", "currency"],
                    "type": "object",
                    "x-struct": null,
                    "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MoneySchema"
                  },
                  "merchant_name": {
                    "description": "String field",
                    "example": "string",
                    "type": "string",
                    "x-struct": null,
                    "x-validate": null
                  },
                  "state": {
                    "description": "transaction state",
                    "enum": ["approved", "reversed", "declined"],
                    "type": "string",
                    "x-struct": null,
                    "x-validate": null
                  },
                  "transaction_at": {
                    "description": "Date and Time at which the transaction was made",
                    "example": "2022-01-01T01:00:00Z",
                    "format": "date-time",
                    "type": "string",
                    "x-struct": null,
                    "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.DateTimeSchema",
                    "x-validation": {}
                  },
                  "type": {
                    "description": "transaction type",
                    "enum": [
                      "authorization",
                      "authorization",
                      "capture",
                      "refund"
                    ],
                    "type": "string",
                    "x-struct": null,
                    "x-validate": null
                  }
                },
                "type": "object",
                "x-struct": null,
                "x-validate": null
              }
            },
            "type": "object",
            "x-struct": null,
            "x-validate": null
          }
        ],
        "title": "CardTransactionOriginDetail",
        "x-struct": "Elixir.MonoBankingAPI.Schemas.Ledger.AccountTransactions.CardTransactionOriginSchema",
        "x-validate": null
      },
      "PayoutCOACH": {
        "allOf": [
          {
            "properties": {
              "target": {
                "allOf": [
                  {
                    "properties": {
                      "country": {
                        "description": "An ISO 3166-1 alpha-2 country code representing the country where the target amount will be\ncredited. The method and currency must support it.\n",
                        "example": "CO",
                        "pattern": "^[A-Z]{2}$",
                        "type": "string",
                        "x-struct": null,
                        "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.CountryCodeSchema"
                      },
                      "currency": {
                        "description": "An ISO 4217 currency code representing the currency in which the amount will be credited.\nThe method and country must support it.\n",
                        "enum": ["COP", "USD", "MXN", "CLP", "BRL", "PEN"],
                        "example": "COP",
                        "type": "string",
                        "x-struct": null,
                        "x-validate": null
                      },
                      "kind": {
                        "description": "String field",
                        "enum": ["co_bank_account"],
                        "example": "co_bank_account",
                        "type": "string",
                        "x-struct": null,
                        "x-validate": null
                      }
                    },
                    "required": ["kind", "country", "currency"],
                    "title": "CommonPayoutTarget",
                    "type": "object",
                    "x-struct": null,
                    "x-validate": null
                  },
                  { "$ref": "#/components/schemas/COACHBankAccount" }
                ],
                "type": "object",
                "x-struct": null,
                "x-validate": null
              }
            },
            "required": ["target"],
            "type": "object",
            "x-struct": null,
            "x-validate": null
          },
          {
            "properties": {
              "account_id": {
                "description": "A core account identifier",
                "example": "lacc_5tgliBmzjZ6mpQPRbQjfKj",
                "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                "type": "string",
                "x-context": "ledger_account",
                "x-struct": null,
                "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
              },
              "calculated_fees": {
                "additionalProperties": {
                  "description": "A JSON of fees that were calculated for the payout.\nthe key will be the fee type:\n\n- `bank_transfer_fee`\n- `bank_transfer_gmf`\n",
                  "properties": {
                    "amount": {
                      "description": "Amount of the fee",
                      "properties": {
                        "amount": {
                          "description": "Amount of money in `cents` with the format is int64. Thus, you\nsend an integer \"10.000.000\", we will interpret it as \"100.000,00\"\n",
                          "example": 100000000,
                          "format": "int64",
                          "maximum": 100000000000000,
                          "minimum": -100000000000000,
                          "type": "integer",
                          "x-struct": null,
                          "x-validate": null
                        },
                        "currency": {
                          "default": "COP",
                          "description": "Currency of money",
                          "enum": ["COP"],
                          "example": "COP",
                          "type": "string",
                          "x-struct": null,
                          "x-validate": null
                        }
                      },
                      "required": ["amount", "currency"],
                      "type": "object",
                      "x-struct": null,
                      "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MoneySchema"
                    },
                    "id": {
                      "description": "Indicates the format for resource's ID",
                      "example": "fee_5tgliBmzjZ6mpQPRbQjfKj",
                      "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                      "readOnly": true,
                      "type": "string",
                      "x-context": "fee",
                      "x-struct": null,
                      "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
                    }
                  },
                  "type": "object",
                  "x-struct": null,
                  "x-validate": null
                },
                "example": {
                  "bank_transfer_fee": {
                    "amount": { "amount": 100000000, "currency": "COP" },
                    "id": "fee_5tgliBmzjZ6mpQPRbQjfKj"
                  },
                  "bank_transfer_gmf": {
                    "amount": { "amount": 100000000, "currency": "COP" },
                    "id": "fee_5tgliBmzjZ6mpQPRbQjfKj"
                  }
                },
                "readOnly": true,
                "type": "object",
                "x-struct": null,
                "x-validate": null
              },
              "description": {
                "description": "A description for the payout",
                "example": "string",
                "nullable": true,
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "external_id": {
                "description": "A unique identifier to handle idempotency. If the identifier already exists,\nthe payout creation is skipped and the HTTP code response is 200. If not,\na new payout is created and the HTTP code response is 201.\n",
                "example": "1234859",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "id": {
                "description": "A payout identifier",
                "example": "cpout_5tgliBmzjZ6mpQPRbQjfKj",
                "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                "readOnly": true,
                "type": "string",
                "x-context": "payout",
                "x-struct": null,
                "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
              },
              "metadata": {
                "additionalProperties": true,
                "description": "A tenant-managed flat map for providing additional data about the payout. The values are stored and displayed as strings, and the provided information will be returned as-is in the payout details.\n",
                "example": { "id": 3, "reference": 123 },
                "nullable": true,
                "type": "object",
                "x-struct": null,
                "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MetadataSchema"
              },
              "method": {
                "description": "Specifies the way or process used to execute the payout. Each method is only available\nfor certain countries and currencies, and the processing time for completing a payout\nwill vary depending on the selected method.\n",
                "enum": ["co_ach", "co_transfiya", "co_mono_turbo"],
                "example": "co_ach",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "method_params": {
                "nullable": true,
                "type": "object",
                "x-struct": null,
                "x-validate": null
              },
              "reference": {
                "description": "A reference for the payout",
                "example": "string",
                "nullable": true,
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "source_amount": {
                "description": "The amount to be debited from the source account, specified in the same currency as\nthe source account, <b>This amount include the fees if were configured</b>. If this field\nis null, its value can be automatically calculated from the target amount.\n",
                "nullable": true,
                "properties": {
                  "amount": {
                    "description": "Amount of money in `cents` with the format is int64. Thus, you\nsend an integer \"10.000.000\", we will interpret it as \"100.000,00\"\n",
                    "example": 100000000,
                    "format": "int64",
                    "maximum": 100000000000000,
                    "minimum": 100,
                    "type": "integer",
                    "x-struct": null,
                    "x-validate": null
                  },
                  "currency": {
                    "default": "COP",
                    "description": "Currency of money",
                    "enum": ["COP"],
                    "example": "COP",
                    "type": "string",
                    "x-struct": null,
                    "x-validate": null
                  }
                },
                "required": ["amount", "currency"],
                "type": "object",
                "x-struct": null,
                "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MoneySchema"
              },
              "target_amount": {
                "description": "The amount to be credited to the target account, specified in the same currency as\nthe target account. If this field is null, its value can be automatically calculated\nfrom the source amount.\n",
                "nullable": true,
                "properties": {
                  "amount": {
                    "description": "Amount of money in `cents` with the format is int64. Thus, you\nsend an integer \"10.000.000\", we will interpret it as \"100.000,00\"\n",
                    "example": 100000000,
                    "format": "int64",
                    "maximum": 100000000000000,
                    "minimum": 100,
                    "type": "integer",
                    "x-struct": null,
                    "x-validate": null
                  },
                  "currency": {
                    "default": "COP",
                    "description": "Currency of money",
                    "enum": ["COP"],
                    "example": "COP",
                    "type": "string",
                    "x-struct": null,
                    "x-validate": null
                  }
                },
                "required": ["amount", "currency"],
                "type": "object",
                "x-struct": null,
                "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MoneySchema"
              }
            },
            "required": ["external_id", "account_id", "method"],
            "title": "CommonPayoutSchema",
            "type": "object",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Core.Payouts.CommonSchema"
          }
        ],
        "title": "PayoutCOACH",
        "type": "object",
        "x-struct": null,
        "x-validate": null
      },
      "PlasticCardActivation": {
        "description": "Plastic Card Activation Schema",
        "properties": {
          "account_id": {
            "description": "Account ID acc_5tgliBmzjZ6mpQPRbQjfKj or lacc_5tgliBmzjZ6mpQPRbQjfKj",
            "example": "acc_5tgliBmzjZ6mpQPRbQjfKj",
            "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
            "type": "string",
            "x-context": "account",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
          },
          "card_id": {
            "description": "Card ID",
            "example": "car_5tgliBmzjZ6mpQPRbQjfKj",
            "nullable": true,
            "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
            "readOnly": true,
            "type": "string",
            "x-context": "card",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
          },
          "cardholder_id": {
            "description": "Cardholder ID",
            "example": "carh_5tgliBmzjZ6mpQPRbQjfKj",
            "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
            "type": "string",
            "x-context": "cardholder",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
          },
          "configuration_group_id": {
            "description": "Card Config Group ID",
            "example": "ccg_5tgliBmzjZ6mpQPRbQjfKj",
            "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
            "type": "string",
            "x-context": "card_config_group",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
          },
          "id": {
            "description": "Plastic Card Activation ID",
            "example": "pca_5tgliBmzjZ6mpQPRbQjfKj",
            "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
            "readOnly": true,
            "type": "string",
            "x-context": "plastic_card_activation",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
          },
          "inserted_at": {
            "description": "Indicates when an plastic card activation was created",
            "example": "2022-01-01T01:00:00Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.DateTimeSchema",
            "x-validation": {}
          },
          "nickname": {
            "description": "Card nickname",
            "example": "Travel card",
            "minLength": 5,
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "spending_control_id": {
            "description": "Spending Control ID",
            "example": "spc_5tgliBmzjZ6mpQPRbQjfKj",
            "nullable": true,
            "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
            "type": "string",
            "x-context": "spending_control",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
          },
          "state": {
            "description": "Plastic Card Activation State",
            "enum": ["pending", "activated", "failed", "group_mismatch"],
            "readOnly": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "updated_at": {
            "description": "Indicates when an plastic card activation was updated",
            "example": "2022-01-01T01:00:00Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.DateTimeSchema",
            "x-validation": {}
          },
          "url": {
            "description": "Contains the plastic card activation link URL",
            "example": "https://api.cuentamono.com/v1/cards/activation_links/pca_02wI65FjIGkn1xKeYMqdey",
            "format": "uri-reference",
            "readOnly": true,
            "type": "string",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.URLSchema"
          }
        },
        "required": ["account_id", "cardholder_id", "configuration_group_id"],
        "title": "PlasticCardActivation",
        "type": "object",
        "x-struct": "Elixir.MonoBankingAPI.Schemas.Cards.PlasticCardActivationSchema",
        "x-validate": null
      },
      "SpendingControl": {
        "description": "Spending control schema",
        "properties": {
          "currency_code": {
            "description": "Spending control currency code",
            "enum": ["COP", "USD", "MXN", "CLP", "BRL", "PEN"],
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "id": {
            "description": "Spending Control ID",
            "example": "spc_5tgliBmzjZ6mpQPRbQjfKj",
            "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
            "readOnly": true,
            "type": "string",
            "x-context": "spending_control",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
          },
          "nickname": {
            "description": "Spending control nickname",
            "example": "Holiday Spending Control",
            "nullable": true,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "rules": {
            "description": "Configured spending control rules",
            "minProperties": 1,
            "properties": {
              "card_usage": {
                "description": "Spending control rule to disable card usage for specific card payments",
                "properties": {
                  "disabled_card_usages": {
                    "items": {
                      "enum": [
                        "online_purchase",
                        "physical_purchase",
                        "atm_withdrawal"
                      ],
                      "example": "online_purchase",
                      "type": "string",
                      "x-struct": null,
                      "x-validate": null
                    },
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array",
                    "x-struct": null,
                    "x-validate": null
                  }
                },
                "required": ["disabled_card_usages"],
                "title": "CardUsageSpendingControlRule",
                "type": "object",
                "x-struct": "Elixir.MonoBankingAPI.Schemas.SpendingControls.Rules.CardUsageRuleSchema",
                "x-validate": null
              },
              "mcc": {
                "description": "Spending control rule to limit spending based on merchant category codes",
                "properties": {
                  "mccs": {
                    "items": {
                      "description": "MCC code",
                      "example": "5411",
                      "maxLength": 4,
                      "minLength": 4,
                      "type": "string",
                      "x-struct": null,
                      "x-validate": null
                    },
                    "minItems": 1,
                    "type": "array",
                    "x-struct": null,
                    "x-validate": null
                  },
                  "operation": {
                    "description": "If `forbid_mccs`, payments for the listed MCCs are not authorized. If `allow_mccs`, payments are authorized only for the listed MCCs.",
                    "enum": ["allow_mccs", "forbid_mccs"],
                    "example": "allow_mccs",
                    "type": "string",
                    "x-struct": null,
                    "x-validate": null
                  }
                },
                "required": ["mccs", "operation"],
                "title": "MCCControlRule",
                "type": "object",
                "x-struct": "Elixir.MonoBankingAPI.Schemas.SpendingControls.Rules.MCCRuleSchema",
                "x-validate": null
              },
              "merchant_name": {
                "description": "Spending control rule to limit spending based on merchant names",
                "properties": {
                  "operation": {
                    "description": "If `allow_pattern`, only payments with merchant names that match the pattern are authorized. If `forbid_pattern` is used,  payments with merchant names that match the pattern are not authorized.",
                    "enum": ["allow_pattern", "forbid_pattern"],
                    "example": "allow_pattern",
                    "type": "string",
                    "x-struct": null,
                    "x-validate": null
                  },
                  "regex": {
                    "description": "Merchant name regex",
                    "example": "^AMAZON.*",
                    "type": "string",
                    "x-struct": null,
                    "x-validate": null
                  }
                },
                "required": ["regex", "operation"],
                "title": "MerchantNameControlRule",
                "type": "object",
                "x-struct": "Elixir.MonoBankingAPI.Schemas.SpendingControls.Rules.MerchantNameRuleSchema",
                "x-validate": null
              },
              "mid": {
                "description": "Spending control rule to limit spending based on merchant ids",
                "properties": {
                  "mids": {
                    "items": {
                      "description": "Merchant ID",
                      "example": "012345678",
                      "type": "string",
                      "x-struct": null,
                      "x-validate": null
                    },
                    "minItems": 1,
                    "type": "array",
                    "x-struct": null,
                    "x-validate": null
                  },
                  "operation": {
                    "description": "If `forbid_mids`, payments for the listed MIDs are not authorized. If `allow_mids`, payments are authorized only for the listed MIDs.",
                    "enum": ["allow_mids", "forbid_mids"],
                    "example": "allow_mids",
                    "type": "string",
                    "x-struct": null,
                    "x-validate": null
                  }
                },
                "required": ["mids", "operation"],
                "title": "MIDControlRule",
                "type": "object",
                "x-struct": "Elixir.MonoBankingAPI.Schemas.SpendingControls.Rules.MIDRuleSchema",
                "x-validate": null
              },
              "velocity": {
                "minProperties": 1,
                "properties": {
                  "daily": {
                    "description": "Limit amount for daily spending",
                    "properties": {
                      "amount": {
                        "description": "Amount of money in `cents` with the format is int64. Thus, you\nsend an integer \"10.000.000\", we will interpret it as \"100.000,00\"\n",
                        "example": 100000000,
                        "format": "int64",
                        "maximum": 100000000000000,
                        "minimum": -100000000000000,
                        "type": "integer",
                        "x-struct": null,
                        "x-validate": null
                      },
                      "currency": {
                        "default": "COP",
                        "description": "Currency of money",
                        "enum": ["COP", "USD", "MXN", "CLP", "BRL", "PEN"],
                        "example": "COP",
                        "type": "string",
                        "x-struct": null,
                        "x-validate": null
                      }
                    },
                    "required": ["amount", "currency"],
                    "type": "object",
                    "x-struct": null,
                    "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MoneySchema"
                  },
                  "monthly": {
                    "description": "Limit amount for monthly spending",
                    "properties": {
                      "amount": {
                        "description": "Amount of money in `cents` with the format is int64. Thus, you\nsend an integer \"10.000.000\", we will interpret it as \"100.000,00\"\n",
                        "example": 100000000,
                        "format": "int64",
                        "maximum": 100000000000000,
                        "minimum": -100000000000000,
                        "type": "integer",
                        "x-struct": null,
                        "x-validate": null
                      },
                      "currency": {
                        "default": "COP",
                        "description": "Currency of money",
                        "enum": ["COP", "USD", "MXN", "CLP", "BRL", "PEN"],
                        "example": "COP",
                        "type": "string",
                        "x-struct": null,
                        "x-validate": null
                      }
                    },
                    "required": ["amount", "currency"],
                    "type": "object",
                    "x-struct": null,
                    "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MoneySchema"
                  },
                  "weekly": {
                    "description": "Limit amount for weekly spending",
                    "properties": {
                      "amount": {
                        "description": "Amount of money in `cents` with the format is int64. Thus, you\nsend an integer \"10.000.000\", we will interpret it as \"100.000,00\"\n",
                        "example": 100000000,
                        "format": "int64",
                        "maximum": 100000000000000,
                        "minimum": -100000000000000,
                        "type": "integer",
                        "x-struct": null,
                        "x-validate": null
                      },
                      "currency": {
                        "default": "COP",
                        "description": "Currency of money",
                        "enum": ["COP", "USD", "MXN", "CLP", "BRL", "PEN"],
                        "example": "COP",
                        "type": "string",
                        "x-struct": null,
                        "x-validate": null
                      }
                    },
                    "required": ["amount", "currency"],
                    "type": "object",
                    "x-struct": null,
                    "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MoneySchema"
                  }
                },
                "title": "VelocitySpendingControlRule",
                "type": "object",
                "x-struct": "Elixir.MonoBankingAPI.Schemas.SpendingControls.Rules.VelocityRuleSchema",
                "x-validate": null
              },
              "withdrawal_velocity": {
                "description": "Spending control rule to limit spending based on withdrawal velocity",
                "minProperties": 1,
                "properties": {
                  "daily": {
                    "description": "Limit amount for daily withdrawal spending",
                    "properties": {
                      "amount": {
                        "description": "Amount of money in `cents` with the format is int64. Thus, you\nsend an integer \"10.000.000\", we will interpret it as \"100.000,00\"\n",
                        "example": 100000000,
                        "format": "int64",
                        "maximum": 100000000000000,
                        "minimum": -100000000000000,
                        "type": "integer",
                        "x-struct": null,
                        "x-validate": null
                      },
                      "currency": {
                        "default": "COP",
                        "description": "Currency of money",
                        "enum": ["COP", "USD", "MXN", "CLP", "BRL", "PEN"],
                        "example": "COP",
                        "type": "string",
                        "x-struct": null,
                        "x-validate": null
                      }
                    },
                    "required": ["amount", "currency"],
                    "type": "object",
                    "x-struct": null,
                    "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MoneySchema"
                  },
                  "monthly": {
                    "description": "Limit amount for monthly withdrawal spending",
                    "properties": {
                      "amount": {
                        "description": "Amount of money in `cents` with the format is int64. Thus, you\nsend an integer \"10.000.000\", we will interpret it as \"100.000,00\"\n",
                        "example": 100000000,
                        "format": "int64",
                        "maximum": 100000000000000,
                        "minimum": -100000000000000,
                        "type": "integer",
                        "x-struct": null,
                        "x-validate": null
                      },
                      "currency": {
                        "default": "COP",
                        "description": "Currency of money",
                        "enum": ["COP", "USD", "MXN", "CLP", "BRL", "PEN"],
                        "example": "COP",
                        "type": "string",
                        "x-struct": null,
                        "x-validate": null
                      }
                    },
                    "required": ["amount", "currency"],
                    "type": "object",
                    "x-struct": null,
                    "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MoneySchema"
                  }
                },
                "title": "WithdrawalVelocitySpendingControlRule",
                "type": "object",
                "x-struct": "Elixir.MonoBankingAPI.Schemas.SpendingControls.Rules.WithdrawalVelocityRuleSchema",
                "x-validate": null
              }
            },
            "type": "object",
            "x-struct": null,
            "x-validate": null
          },
          "target": {
            "default": "card",
            "description": "Spending control target",
            "enum": ["card", "card_config_group"],
            "nullable": false,
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": ["rules"],
        "title": "SpendingControl",
        "type": "object",
        "x-struct": "Elixir.MonoBankingAPI.Schemas.SpendingControls.SpendingControlSchema",
        "x-validate": null
      },
      "LedgerAccountHolderUpdateState": {
        "description": "This entity is used to update the state of an account holder, it could be transitioned to `active` or `blocked` ",
        "properties": {
          "detail": {
            "description": "It provides a textual reason why the account holder is blocked in case of the state_reason value is `other`.",
            "example": "breach of terms",
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "reason": {
            "description": "It provides the reason why the account holder could be blocked. It is required when the account holder is transitioned to being blocked.",
            "enum": ["fraud", "user_request", "other"],
            "example": "fraud",
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "state": {
            "description": "It represents the current state of the account holder, and these are the possible states of an account holder:\n- active: it is enable to manage and perform actions with its accounts.\n- blocked: it is blocked by the tenant, but you could also make it active again.\n",
            "enum": ["active", "blocked"],
            "example": "blocked",
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": ["state"],
        "title": "LedgerAccountHolderUpdateState",
        "type": "object",
        "x-struct": "Elixir.MonoBankingAPI.Schemas.Ledger.AccountHolderUpdateStateSchema",
        "x-validate": null
      },
      "WithdrawalVelocitySpendingControlRule": {
        "description": "Spending control rule to limit spending based on withdrawal velocity",
        "minProperties": 1,
        "properties": {
          "daily": {
            "description": "Limit amount for daily withdrawal spending",
            "properties": {
              "amount": {
                "description": "Amount of money in `cents` with the format is int64. Thus, you\nsend an integer \"10.000.000\", we will interpret it as \"100.000,00\"\n",
                "example": 100000000,
                "format": "int64",
                "maximum": 100000000000000,
                "minimum": -100000000000000,
                "type": "integer",
                "x-struct": null,
                "x-validate": null
              },
              "currency": {
                "default": "COP",
                "description": "Currency of money",
                "enum": ["COP", "USD", "MXN", "CLP", "BRL", "PEN"],
                "example": "COP",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              }
            },
            "required": ["amount", "currency"],
            "type": "object",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MoneySchema"
          },
          "monthly": {
            "description": "Limit amount for monthly withdrawal spending",
            "properties": {
              "amount": {
                "description": "Amount of money in `cents` with the format is int64. Thus, you\nsend an integer \"10.000.000\", we will interpret it as \"100.000,00\"\n",
                "example": 100000000,
                "format": "int64",
                "maximum": 100000000000000,
                "minimum": -100000000000000,
                "type": "integer",
                "x-struct": null,
                "x-validate": null
              },
              "currency": {
                "default": "COP",
                "description": "Currency of money",
                "enum": ["COP", "USD", "MXN", "CLP", "BRL", "PEN"],
                "example": "COP",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              }
            },
            "required": ["amount", "currency"],
            "type": "object",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MoneySchema"
          }
        },
        "title": "WithdrawalVelocitySpendingControlRule",
        "type": "object",
        "x-struct": "Elixir.MonoBankingAPI.Schemas.SpendingControls.Rules.WithdrawalVelocityRuleSchema",
        "x-validate": null
      },
      "Address": {
        "description": "Address schema",
        "properties": {
          "city": {
            "description": "City, district, suburb, town, or village",
            "example": "Chapinero",
            "maxLength": 100,
            "pattern": "^[A-Za-zÀ-ÿ0-9 -.]+$",
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "country": {
            "description": "Country code ISO 3166-1 alpha-2",
            "example": "CO",
            "pattern": "^[A-Z]{2}$",
            "type": "string",
            "x-struct": null,
            "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.CountryCodeSchema"
          },
          "extra": {
            "description": "Additional information",
            "example": "Location near the southeast corner in front of the ABC mall. deliver to the security guard pedro pruebas",
            "maxLength": 144,
            "nullable": true,
            "pattern": "^[A-Za-zÀ-ÿ0-9 -.]+$",
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "line_1": {
            "description": "Street, P.O. Box, or address information",
            "example": "Calle 97 # 15-24",
            "format": "address_line_1",
            "maxLength": 100,
            "pattern": "^[a-zA-Z0-9 -.°'#:,]+$",
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "line_2": {
            "description": "Home, apartment, room, suite, office, or building",
            "example": "Apto. 208",
            "maxLength": 100,
            "nullable": true,
            "pattern": "^[A-Za-zÀ-ÿ0-9 -.]+$",
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "state": {
            "description": "State, province, region, or county",
            "example": "Bogota D.C",
            "maxLength": 100,
            "pattern": "^[A-Za-zÀ-ÿ0-9 -.]+$",
            "type": "string",
            "x-struct": null,
            "x-validate": null
          },
          "zip_code": {
            "example": "110221",
            "maxLength": 10,
            "pattern": "^[A-Za-zÀ-ÿ0-9 -.]+$",
            "type": "string",
            "x-struct": null,
            "x-validate": null
          }
        },
        "required": ["country", "state", "city", "line_1", "zip_code"],
        "title": "Address",
        "type": "object",
        "x-struct": null,
        "x-validate": null
      },
      "SyncedBankTransactionDetail": {
        "allOf": [
          {
            "description": "Represents the account movements in the ledger.",
            "properties": {
              "amount": {
                "description": "Money schema",
                "properties": {
                  "amount": {
                    "description": "Amount of money in `cents` with the format is int64. Thus, you\nsend an integer \"10.000.000\", we will interpret it as \"100.000,00\"\n",
                    "example": 100000000,
                    "format": "int64",
                    "maximum": 100000000000000,
                    "minimum": -100000000000000,
                    "type": "integer",
                    "x-struct": null,
                    "x-validate": null
                  },
                  "currency": {
                    "default": "COP",
                    "description": "Currency of money",
                    "enum": ["COP", "USD", "MXN", "CLP", "BRL", "PEN"],
                    "example": "COP",
                    "type": "string",
                    "x-struct": null,
                    "x-validate": null
                  }
                },
                "required": ["amount", "currency"],
                "type": "object",
                "x-struct": null,
                "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MoneySchema"
              },
              "description": {
                "description": "useful infomation about the transaction",
                "example": "Purchase on ABC Commerce",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "id": {
                "description": "Indicates the format for resource's ID",
                "example": "ltx_5tgliBmzjZ6mpQPRbQjfKj",
                "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                "type": "string",
                "x-context": "ledger_transaction",
                "x-struct": null,
                "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
              },
              "id_in_origin": {
                "description": "String field",
                "example": "sbtx_5tgliBmzjZ6mpQPRbQjfKj",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "operation_type": {
                "description": "The four common transaction operations are credit, debit, hold, and release:\n\n- credit: Increases the balance of the account. It is typically used to represent income.\n- debit: Decreases the balance of the account. It is typically used to represent expenses.\n- hold: Setting aside of funds for a specific purpose, such as a pending transaction.\n- release: Represent the release of previously held funds for a pending transaction.\n",
                "enum": ["debit", "credit", "hold", "release"],
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "origin": {
                "description": "The operation from which the transaction originated",
                "example": "synced_bank_transaction",
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "origin_transaction_at": {
                "description": "Date and Time at which the transaction was created",
                "example": "2022-01-01T01:00:00Z",
                "format": "date-time",
                "type": "string",
                "x-struct": null,
                "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.DateTimeSchema",
                "x-validation": {}
              },
              "reverted_by_id": {
                "description": "The ID of the transaction that reverts this ledger transaction",
                "example": "ltx_5tgliBmzjZ6mpQPRbQjfKj",
                "nullable": true,
                "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                "type": "string",
                "x-context": "ledger_transaction",
                "x-struct": null,
                "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
              },
              "reverts_id": {
                "description": "The ID of the transaction that this ledger transaction reverts",
                "example": "ltx_5tgliBmzjZ6mpQPRbQjfKj",
                "nullable": true,
                "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                "type": "string",
                "x-context": "ledger_transaction",
                "x-struct": null,
                "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
              },
              "transaction_at": {
                "description": "Date and Time at which the transaction was actually performed",
                "example": "2022-01-01T01:00:00Z",
                "format": "date-time",
                "type": "string",
                "x-struct": null,
                "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.DateTimeSchema",
                "x-validation": {}
              }
            },
            "title": "LedgerAccountTransaction",
            "type": "object",
            "x-struct": null,
            "x-validate": null
          },
          {
            "properties": {
              "details": {
                "properties": {
                  "id": {
                    "description": "Indicates the format for resource's ID",
                    "example": "sbtx_5tgliBmzjZ6mpQPRbQjfKj",
                    "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                    "type": "string",
                    "x-context": "synced_bank_transaction",
                    "x-struct": null,
                    "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
                  }
                },
                "type": "object",
                "x-struct": null,
                "x-validate": null
              }
            },
            "type": "object",
            "x-struct": null,
            "x-validate": null
          }
        ],
        "title": "SyncedBankTransactionDetail",
        "x-struct": "Elixir.MonoBankingAPI.Schemas.Ledger.AccountTransactions.SyncedBankTransactionSchema",
        "x-validate": null
      }
    },
    "securitySchemes": {
      "authorization": { "scheme": "bearer", "type": "http" }
    }
  },
  "info": {
    "contact": {
      "email": "support@monoban.co",
      "name": "Mono Colombia S.A.S",
      "url": "https://www.cuentamono.com"
    },
    "description": "API documentation for Mono Banking services",
    "title": "🐒 Mono Banking API",
    "version": "1.0"
  },
  "openapi": "3.0.0",
  "paths": {
    "/v1/ledger/accounts": {
      "get": {
        "callbacks": {},
        "description": "Lists all the ledger accounts related to the tenant\n\nConsiderations:\n1. This endpoint doesn't return the account balance for every account, so you can use the endpoint to get the balance for a specific account `/v1/ledger/account/:id/balances`\n2. You couldn't retrieve more than 500 registers in a single request.\n",
        "operationId": "MonoBankingAPI.V1.Ledger.Accounts.AccountController.index",
        "parameters": [
          {
            "description": "Number of the page",
            "in": "query",
            "name": "page_number",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "minimum": 1,
              "type": "integer",
              "x-struct": null,
              "x-validate": null
            }
          },
          {
            "description": "Amount of registers that must be listed by page",
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "default": 10,
              "example": 10,
              "maximum": 500,
              "minimum": 10,
              "type": "integer",
              "x-struct": null,
              "x-validate": null
            }
          },
          {
            "allowReserved": true,
            "description": "Filter accounts based on the range of insertion date and time.",
            "explode": true,
            "in": "query",
            "name": "inserted_at",
            "required": false,
            "schema": {
              "properties": {
                "from": {
                  "description": "Initial datetime range in UTC",
                  "example": "2022-01-01T01:00:00Z",
                  "format": "date-time",
                  "type": "string",
                  "x-struct": null,
                  "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.DateTimeSchema",
                  "x-validation": {}
                },
                "until": {
                  "description": "End datetime range in UTC",
                  "example": "2022-01-01T01:00:00Z",
                  "format": "date-time",
                  "type": "string",
                  "x-struct": null,
                  "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.DateTimeSchema",
                  "x-validation": {}
                }
              },
              "type": "object",
              "x-struct": null,
              "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.RangeDatetime"
            },
            "style": "deepObject"
          },
          {
            "description": "Filter by account's metadata",
            "in": "query",
            "name": "metadata",
            "required": false,
            "schema": {
              "additionalProperties": true,
              "example": { "id": 3, "reference": 123 },
              "type": "object",
              "x-struct": null,
              "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MetadataSchema"
            }
          },
          {
            "allowReserved": true,
            "description": "Filter by account's name",
            "explode": true,
            "in": "query",
            "name": "nickname",
            "required": false,
            "schema": {
              "properties": {
                "contains": {
                  "description": "String field",
                  "example": "string",
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                },
                "ends_with": {
                  "description": "String field",
                  "example": "string",
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                },
                "exact": {
                  "description": "String field",
                  "example": "string",
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                },
                "not_contains": {
                  "description": "String field",
                  "example": "string",
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                },
                "starts_with": {
                  "description": "String field",
                  "example": "string",
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                }
              },
              "type": "object",
              "x-struct": null,
              "x-validate": null
            },
            "style": "deepObject"
          },
          {
            "description": "Filter by account's type",
            "explode": true,
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "subaccount",
                  "root",
                  "current",
                  "bank_settlement",
                  "trade_account",
                  "virtual_settlement"
                ],
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "type": "array",
              "x-struct": null,
              "x-validate": null
            }
          },
          {
            "description": "Filter by account holder ID",
            "explode": true,
            "in": "query",
            "name": "holder",
            "required": false,
            "schema": {
              "items": {
                "description": "Indicates the format for resource's ID",
                "example": "acch_5tgliBmzjZ6mpQPRbQjfKj",
                "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                "type": "string",
                "x-context": "account_holder",
                "x-struct": null,
                "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
              },
              "type": "array",
              "x-struct": null,
              "x-validate": null
            }
          },
          {
            "description": "Filter by the account's currency code",
            "explode": true,
            "in": "query",
            "name": "currency_code",
            "required": false,
            "schema": {
              "items": {
                "enum": ["COP", "USD", "MXN", "CLP", "BRL", "PEN"],
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "type": "array",
              "x-struct": null,
              "x-validate": null
            }
          },
          {
            "description": "Filter by the account's state",
            "explode": true,
            "in": "query",
            "name": "state",
            "required": false,
            "schema": {
              "items": {
                "enum": ["active", "blocked", "canceled"],
                "type": "string",
                "x-struct": null,
                "x-validate": null
              },
              "type": "array",
              "x-struct": null,
              "x-validate": null
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ListAccounts" }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "400 Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "401 Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "403 Forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "422 Unprocessable Entity"
          }
        },
        "summary": "List of ledger accounts",
        "tags": ["Ledger"]
      },
      "post": {
        "callbacks": {},
        "description": "Creates a ledger account associated to a third-party account holder.\n\nConsiderations:\n1. You could previusly check the accepted currency codes in the endpoint `/v1/ledger/tenant/config`.\n2. The third-party account holder must be `active`.\n",
        "operationId": "MonoBankingAPI.V1.Ledger.Accounts.AccountController.create",
        "parameters": [
          {
            "description": "Idempotency key in UUID format",
            "in": "header",
            "name": "x-idempotency-key",
            "required": false,
            "schema": {
              "description": "UUID field",
              "example": "f30f1d0b-795f-49f5-80dc-41a7bffccfde",
              "format": "uuid",
              "type": "string",
              "x-struct": null,
              "x-validate": null
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/LedgerAccount" }
            }
          },
          "description": "Attributes to create a ledger account",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LedgerAccount" }
              }
            },
            "description": "Successful response when it finds the request with the same idempotency key"
          },
          "201": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LedgerAccount" }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "400 Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "401 Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "403 Forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "422 Unprocessable Entity"
          }
        },
        "summary": "Creates a ledger account",
        "tags": ["Ledger"]
      }
    },
    "/v1/cards/{card_id}/change_pin": {
      "post": {
        "callbacks": {},
        "description": "You can use this endpoint to change plastic card PIN",
        "operationId": "MonoBankingAPI.V1.Cards.CardController.change_pin",
        "parameters": [
          {
            "description": "Idempotency key in UUID v4 format",
            "in": "header",
            "name": "x-idempotency-key",
            "required": false,
            "schema": {
              "description": "UUID field",
              "example": "f30f1d0b-795f-49f5-80dc-41a7bffccfde",
              "format": "uuid",
              "type": "string",
              "x-struct": null,
              "x-validate": null
            }
          },
          {
            "description": "Card ID (Base 62 format)",
            "in": "path",
            "name": "card_id",
            "required": true,
            "schema": {
              "description": "Indicates the format for resource's ID",
              "example": "car_5tgliBmzjZ6mpQPRbQjfKj",
              "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
              "type": "string",
              "x-context": "card",
              "x-struct": null,
              "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/PlasticCardChangePin" }
            }
          },
          "description": "Attributes to change plastic card PIN",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Card" }
              }
            },
            "description": "Successful response when an idempotent request"
          },
          "201": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Card" }
              }
            },
            "description": "Successful response to change PIN"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "400 Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "401 Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "403 Forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "422 Unprocessable Entity"
          }
        },
        "summary": "Change plastic card pin",
        "tags": ["Cards"]
      }
    },
    "/v1/cards/{id}": {
      "get": {
        "callbacks": {},
        "description": "Gets card with sensitive information",
        "operationId": "MonoBankingAPI.V1.Cards.CardController.show",
        "parameters": [
          {
            "description": "Card ID (Base 62 format)",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "Indicates the format for resource's ID",
              "example": "car_5tgliBmzjZ6mpQPRbQjfKj",
              "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
              "type": "string",
              "x-context": "card",
              "x-struct": null,
              "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Card" }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "400 Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "401 Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "403 Forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "422 Unprocessable Entity"
          }
        },
        "summary": "Gets card",
        "tags": ["Cards"]
      }
    },
    "/v1/transfers/prepare": {
      "post": {
        "callbacks": {},
        "description": "Creates and leaves a batch of transfers pending for approval,\nthese bank transfers can be between accounts of the same or different banks,\nwhich allows multiple transfers to be processed together in a single request.\nThis endpoint is designed to allow transfers to be reviewed and approved by an administrator\nuser from the Mono app before being sent to the banks.\n\nWhen the server receives the request, it will process the batch of transfers and create transfer records in our database\nfor each of them, the transfers will not be executed immediately, instead, the batch will be queued for\nreview and approval by an administrator user from Mono app.\n\nConsiderations:\n\n1. API key roles allowed to consume this endpoint are \"Administrator\" and \"Preparer\".\n2. The minimum number of transfers allowed per batch is 1.\n3. The maximum number of transfers allowed per batch are 1.000.\n",
        "operationId": "MonoBankingAPI.V1.Transfers.TransferController.prepare",
        "parameters": [
          {
            "description": "Idempotency key in UUID v4 format",
            "in": "header",
            "name": "x-idempotency-key",
            "required": false,
            "schema": {
              "description": "UUID field",
              "example": "f30f1d0b-795f-49f5-80dc-41a7bffccfde",
              "format": "uuid",
              "type": "string",
              "x-struct": null,
              "x-validate": null
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateTransferSchema" }
            }
          },
          "description": "Attributes to prepare a batch of transfers",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateTransferSchema"
                }
              }
            },
            "description": "When it finds the request with the same idempotency key"
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateTransferSchema"
                }
              }
            },
            "description": "When it creates the batch of transfers successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "400 Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "401 Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "403 Forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "422 Unprocessable Entity"
          }
        },
        "summary": "Prepare bank transfers",
        "tags": ["Bank transfers"]
      }
    },
    "/v1/cards/cardholders/{id}": {
      "get": {
        "callbacks": {},
        "description": "Show a cardholder",
        "operationId": "MonoBankingAPI.V1.Cards.CardController.show_cardholder",
        "parameters": [
          {
            "description": "Cardholder ID (Base 62 format)",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "Indicates the format for resource's ID",
              "example": "carh_5tgliBmzjZ6mpQPRbQjfKj",
              "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
              "type": "string",
              "x-context": "cardholder",
              "x-struct": null,
              "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Cardholder" }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "400 Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "401 Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "403 Forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "422 Unprocessable Entity"
          }
        },
        "summary": "Show a cardholder",
        "tags": ["Cards"]
      }
    },
    "/v1/spending_controls/{spending_control_id}/rules": {
      "put": {
        "callbacks": {},
        "description": "You can use this endpoint to add or update a rule to a spending control",
        "operationId": "MonoBankingAPI.V1.SpendingControls.SpendingControlController.add_or_update_rule",
        "parameters": [
          {
            "description": "Spending control ID (Base 62 format)",
            "in": "path",
            "name": "spending_control_id",
            "required": true,
            "schema": {
              "description": "Indicates the format for resource's ID",
              "example": "spc_5tgliBmzjZ6mpQPRbQjfKj",
              "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
              "type": "string",
              "x-context": "spending_control",
              "x-struct": null,
              "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManageSpendingControlRule"
              }
            }
          },
          "description": "Attributes to add or update a rule to a spending control",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SpendingControl" }
              }
            },
            "description": "Successful response when the spending control rule is updated"
          },
          "201": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SpendingControl" }
              }
            },
            "description": "Successful response when the spending control rule is created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "400 Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "401 Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "403 Forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "422 Unprocessable Entity"
          }
        },
        "summary": "Add or update a rule to a spending control",
        "tags": ["Spending controls"]
      }
    },
    "/v1/spending_controls/{spending_control_id}/rules/{type}": {
      "delete": {
        "callbacks": {},
        "description": "You can use this endpoint to delete a rule to a spending control",
        "operationId": "MonoBankingAPI.V1.SpendingControls.SpendingControlController.delete_rule",
        "parameters": [
          {
            "description": "Spending control ID (Base 62 format)",
            "in": "path",
            "name": "spending_control_id",
            "required": true,
            "schema": {
              "description": "Indicates the format for resource's ID",
              "example": "spc_5tgliBmzjZ6mpQPRbQjfKj",
              "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
              "type": "string",
              "x-context": "spending_control",
              "x-struct": null,
              "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "type",
            "required": true,
            "schema": {
              "description": "Spending control rule type",
              "enum": [
                "velocity",
                "withdrawal_velocity",
                "card_usage",
                "mcc",
                "mid",
                "merchant_name"
              ],
              "example": "velocity",
              "type": "string",
              "x-struct": null,
              "x-validate": null
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful response when the rule were delete"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "400 Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "401 Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "403 Forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "422 Unprocessable Entity"
          }
        },
        "summary": "Delete a rule of a spending control",
        "tags": ["Spending controls"]
      }
    },
    "/v1/cards/cardholders": {
      "post": {
        "callbacks": {},
        "description": "Create a cardholder",
        "operationId": "MonoBankingAPI.V1.Cards.CardController.create_cardholder",
        "parameters": [
          {
            "description": "Idempotency key in UUID v4 format",
            "in": "header",
            "name": "x-idempotency-key",
            "required": false,
            "schema": {
              "description": "UUID field",
              "example": "f30f1d0b-795f-49f5-80dc-41a7bffccfde",
              "format": "uuid",
              "type": "string",
              "x-struct": null,
              "x-validate": null
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Cardholder" }
            }
          },
          "description": "Attributes to create a cardholder",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Cardholder" }
              }
            },
            "description": "Successful response when an idempotent request"
          },
          "201": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Cardholder" }
              }
            },
            "description": "Successful response when created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "400 Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "401 Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "403 Forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "422 Unprocessable Entity"
          }
        },
        "summary": "Create a cardholder",
        "tags": ["Cards"]
      }
    },
    "/v1/ledger/accounts/{account_id}/balances": {
      "get": {
        "callbacks": {},
        "description": "Get account balances",
        "operationId": "MonoBankingAPI.V1.Ledger.Accounts.BalanceController.get",
        "parameters": [
          {
            "description": "Account ID (Base 62 format)",
            "in": "path",
            "name": "account_id",
            "required": true,
            "schema": {
              "description": "Indicates the format for resource's ID",
              "example": "lacc_5tgliBmzjZ6mpQPRbQjfKj",
              "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
              "type": "string",
              "x-context": "ledger_account",
              "x-struct": null,
              "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LedgerAccountBalance"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "400 Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "401 Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "403 Forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "422 Unprocessable Entity"
          }
        },
        "summary": "Get balances",
        "tags": ["Ledger"]
      }
    },
    "/v1/spending_controls/{spending_control_id}": {
      "patch": {
        "callbacks": {},
        "description": "You can use this endpoint to update a spending control",
        "operationId": "MonoBankingAPI.V1.SpendingControls.SpendingControlController.update",
        "parameters": [
          {
            "description": "Spending control ID (Base 62 format)",
            "in": "path",
            "name": "spending_control_id",
            "required": true,
            "schema": {
              "description": "Indicates the format for resource's ID",
              "example": "spc_5tgliBmzjZ6mpQPRbQjfKj",
              "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
              "type": "string",
              "x-context": "spending_control",
              "x-struct": null,
              "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SpendingControlUpdate" }
            }
          },
          "description": "Attributes to update a spending control",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SpendingControl" }
              }
            },
            "description": "Successful response when updating an spending control"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "400 Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "401 Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "403 Forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "422 Unprocessable Entity"
          }
        },
        "summary": "Updates a spending control",
        "tags": ["Spending controls"]
      }
    },
    "/v1/banks": {
      "get": {
        "callbacks": {},
        "description": "Whenever you want to prepare or apply a transfer and make a collection, you need to specify the `code` of the bank to which you want to transfer money or make the collection.\nThis endpoint retrieves all the target banks we support with the necessary `code` you need to provide for bank transfer or collection endpoints.\n\nThis endpoint also retrieves the supported account type for each bank you can transfer to (only if the `kind` parameter is `transfers`).\n",
        "operationId": "MonoBankingAPI.V1.Banks.BankController.index",
        "parameters": [
          {
            "description": "there are two types of responses (Polymorphism response) the first `transfers` are the banks used by the bank transfers and the `pse` are the banks from the pse provider.",
            "in": "query",
            "name": "kind",
            "required": false,
            "schema": {
              "default": "transfers",
              "enum": ["transfers", "pse"],
              "example": "transfers",
              "type": "string",
              "x-struct": null,
              "x-validate": null
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "pse": {
                    "value": {
                      "banks": [{ "code": "1051", "name": "BANCO DAVIVIENDA" }],
                      "kind": "pse"
                    }
                  },
                  "transfers": {
                    "value": {
                      "banks": [
                        {
                          "code": "007",
                          "id": "bank_5tgliBmzjZ6mpQPRbQjfKj",
                          "name": "BANCOLOMBIA",
                          "supported_account_types": ["savings_account"],
                          "supports_ach": false,
                          "supports_turbo": false
                        }
                      ],
                      "kind": "transfers"
                    }
                  }
                },
                "schema": {
                  "discriminator": {
                    "mapping": {
                      "pse": "#/components/schemas/PSEBanks",
                      "transfers": "#/components/schemas/Banks"
                    },
                    "propertyName": "kind"
                  },
                  "oneOf": [
                    { "$ref": "#/components/schemas/PSEBanks" },
                    { "$ref": "#/components/schemas/Banks" }
                  ],
                  "x-struct": null,
                  "x-validate": null
                }
              }
            },
            "description": "Successful response"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "401 Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "403 Forbidden"
          }
        },
        "summary": "Get banks",
        "tags": ["Bank transfers"]
      }
    },
    "/v1/ledger/account_holders": {
      "post": {
        "callbacks": {},
        "description": "Creates a new third-party account holder and associates it to the tenant.\n",
        "operationId": "MonoBankingAPI.V1.Ledger.AccountHolders.AccountHolderController.create",
        "parameters": [
          {
            "description": "Idempotency key in UUID format",
            "in": "header",
            "name": "x-idempotency-key",
            "required": false,
            "schema": {
              "description": "UUID field",
              "example": "f30f1d0b-795f-49f5-80dc-41a7bffccfde",
              "format": "uuid",
              "type": "string",
              "x-struct": null,
              "x-validate": null
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/LedgerAccountHolder" }
            }
          },
          "description": "Attributes to create a third-party account holder",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LedgerAccountHolder" }
              }
            },
            "description": "Successful response when it finds the request with the same idempotency key"
          },
          "201": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LedgerAccountHolder" }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "400 Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "401 Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "403 Forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "422 Unprocessable Entity"
          }
        },
        "summary": "Creates a third-party account holder",
        "tags": ["Ledger"]
      }
    },
    "/v1/cards/{card_id}/transactions": {
      "get": {
        "callbacks": {},
        "description": "Gets card transactions",
        "operationId": "MonoBankingAPI.V1.Cards.CardController.get_transactions",
        "parameters": [
          {
            "description": "Number of the page",
            "in": "query",
            "name": "page_number",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "minimum": 1,
              "type": "integer",
              "x-struct": null,
              "x-validate": null
            }
          },
          {
            "description": "Amount of registers that must be listed by page",
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "default": 10,
              "example": 10,
              "maximum": 500,
              "minimum": 10,
              "type": "integer",
              "x-struct": null,
              "x-validate": null
            }
          },
          {
            "description": "Card ID (Base 62 format)",
            "in": "path",
            "name": "card_id",
            "required": true,
            "schema": {
              "description": "Indicates the format for resource's ID",
              "example": "car_5tgliBmzjZ6mpQPRbQjfKj",
              "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
              "type": "string",
              "x-context": "card",
              "x-struct": null,
              "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
            }
          },
          {
            "allowReserved": true,
            "description": "Filters the transactions by date and time when the transaction was made",
            "explode": true,
            "in": "query",
            "name": "transaction_at",
            "required": false,
            "schema": {
              "properties": {
                "from": {
                  "description": "Initial datetime range in UTC",
                  "example": "2022-01-01T01:00:00Z",
                  "format": "date-time",
                  "type": "string",
                  "x-struct": null,
                  "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.DateTimeSchema",
                  "x-validation": {}
                },
                "until": {
                  "description": "End datetime range in UTC",
                  "example": "2022-01-01T01:00:00Z",
                  "format": "date-time",
                  "type": "string",
                  "x-struct": null,
                  "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.DateTimeSchema",
                  "x-validation": {}
                }
              },
              "type": "object",
              "x-struct": null,
              "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.RangeDatetime"
            },
            "style": "deepObject"
          },
          {
            "description": "Filters the transactions by date and time when the transaction was made",
            "in": "query",
            "name": "state",
            "required": false,
            "schema": {
              "enum": ["approved", "reversed", "declined"],
              "example": "approved",
              "type": "string",
              "x-struct": null,
              "x-validate": null
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ListCardTransaction" }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "400 Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "401 Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "403 Forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "422 Unprocessable Entity"
          }
        },
        "summary": "Gets card transactions",
        "tags": ["Cards"]
      }
    },
    "/v1/cards": {
      "get": {
        "callbacks": {},
        "description": "List cards. the result will include the cards with the paging information",
        "operationId": "MonoBankingAPI.V1.Cards.CardController.index",
        "parameters": [
          {
            "description": "Number of the page",
            "in": "query",
            "name": "page_number",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "minimum": 1,
              "type": "integer",
              "x-struct": null,
              "x-validate": null
            }
          },
          {
            "description": "Amount of registers that must be listed by page",
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "default": 10,
              "example": 10,
              "maximum": 500,
              "minimum": 10,
              "type": "integer",
              "x-struct": null,
              "x-validate": null
            }
          },
          {
            "description": "Filter by one or many account IDs.",
            "in": "query",
            "name": "account_id",
            "required": false,
            "schema": {
              "oneOf": [
                {
                  "items": {
                    "description": "Indicates the format for resource's ID",
                    "example": "acc_5tgliBmzjZ6mpQPRbQjfKj",
                    "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                    "type": "string",
                    "x-context": "account",
                    "x-struct": null,
                    "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
                  },
                  "type": "array",
                  "x-struct": null,
                  "x-validate": null
                },
                {
                  "description": "Indicates the format for resource's ID",
                  "example": "acc_5tgliBmzjZ6mpQPRbQjfKj",
                  "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                  "type": "string",
                  "x-context": "account",
                  "x-struct": null,
                  "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
                }
              ],
              "x-struct": null,
              "x-validate": null
            }
          },
          {
            "description": "Filter by one or many account IDs.",
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "enum": ["virtual", "plastic"],
              "example": "virtual",
              "type": "string",
              "x-struct": null,
              "x-validate": null
            }
          },
          {
            "description": "Filter by one or many account IDs.",
            "in": "query",
            "name": "state",
            "required": false,
            "schema": {
              "default": ["active", "frozen"],
              "oneOf": [
                {
                  "items": {
                    "enum": ["active", "frozen", "canceled", "created"],
                    "example": "active",
                    "type": "string",
                    "x-struct": null,
                    "x-validate": null
                  },
                  "type": "array",
                  "x-struct": null,
                  "x-validate": null
                },
                {
                  "enum": ["active", "frozen", "canceled", "created"],
                  "example": "active",
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                }
              ],
              "x-struct": null,
              "x-validate": null
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ListCardSchema" }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "400 Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "401 Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "403 Forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "422 Unprocessable Entity"
          }
        },
        "summary": "List cards",
        "tags": ["Cards"]
      },
      "post": {
        "callbacks": {},
        "description": "You can use this endpoint to create cards",
        "operationId": "MonoBankingAPI.V1.Cards.CardController.create",
        "parameters": [
          {
            "description": "Idempotency key in UUID v4 format",
            "in": "header",
            "name": "x-idempotency-key",
            "required": false,
            "schema": {
              "description": "UUID field",
              "example": "f30f1d0b-795f-49f5-80dc-41a7bffccfde",
              "format": "uuid",
              "type": "string",
              "x-struct": null,
              "x-validate": null
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Card" }
            }
          },
          "description": "Attributes to create a card",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Card" }
              }
            },
            "description": "Successful response when an idempotent request"
          },
          "201": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Card" }
              }
            },
            "description": "Successful response when created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "400 Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "401 Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "403 Forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "422 Unprocessable Entity"
          }
        },
        "summary": "Creates a card",
        "tags": ["Cards"]
      }
    },
    "/v1/cards/activation_links/{plastic_card_activation_id}": {
      "get": {
        "callbacks": {},
        "description": "Get plastic card activation",
        "operationId": "MonoBankingAPI.V1.Cards.CardController.get_plastic_card_activation",
        "parameters": [
          {
            "description": "Plastic card activation ID (Base 62 format)",
            "in": "path",
            "name": "plastic_card_activation_id",
            "required": true,
            "schema": {
              "description": "Indicates the format for resource's ID",
              "example": "pca_5tgliBmzjZ6mpQPRbQjfKj",
              "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
              "type": "string",
              "x-context": "plastic_card_activation",
              "x-struct": null,
              "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlasticCardActivation"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "400 Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "401 Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "403 Forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "422 Unprocessable Entity"
          }
        },
        "summary": "Get plastic card activation",
        "tags": ["Cards"]
      }
    },
    "/v1/cards/activation_links": {
      "get": {
        "callbacks": {},
        "description": "List plastic card activations",
        "operationId": "MonoBankingAPI.V1.Cards.CardController.list_plastic_card_activations",
        "parameters": [
          {
            "description": "Number of the page",
            "in": "query",
            "name": "page_number",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "minimum": 1,
              "type": "integer",
              "x-struct": null,
              "x-validate": null
            }
          },
          {
            "description": "Amount of registers that must be listed by page",
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "default": 10,
              "example": 10,
              "maximum": 500,
              "minimum": 10,
              "type": "integer",
              "x-struct": null,
              "x-validate": null
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListPlasticCardActivations"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "400 Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "401 Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "403 Forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "422 Unprocessable Entity"
          }
        },
        "summary": "List plastic card activations",
        "tags": ["Cards"]
      },
      "post": {
        "callbacks": {},
        "description": "Create a URL to activate a plastic card",
        "operationId": "MonoBankingAPI.V1.Cards.CardController.build_activation_link",
        "parameters": [
          {
            "description": "Idempotency key in UUID v4 format",
            "in": "header",
            "name": "x-idempotency-key",
            "required": false,
            "schema": {
              "description": "UUID field",
              "example": "f30f1d0b-795f-49f5-80dc-41a7bffccfde",
              "format": "uuid",
              "type": "string",
              "x-struct": null,
              "x-validate": null
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Plastic Card Activation Schema",
                "properties": {
                  "account_id": {
                    "description": "Account ID acc_5tgliBmzjZ6mpQPRbQjfKj or lacc_5tgliBmzjZ6mpQPRbQjfKj",
                    "example": "acc_5tgliBmzjZ6mpQPRbQjfKj",
                    "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                    "type": "string",
                    "x-context": "account",
                    "x-struct": null,
                    "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
                  },
                  "card_id": {
                    "description": "Card ID",
                    "example": "car_5tgliBmzjZ6mpQPRbQjfKj",
                    "nullable": true,
                    "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                    "readOnly": true,
                    "type": "string",
                    "x-context": "card",
                    "x-struct": null,
                    "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
                  },
                  "cardholder_id": {
                    "description": "Cardholder ID",
                    "example": "carh_5tgliBmzjZ6mpQPRbQjfKj",
                    "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                    "type": "string",
                    "x-context": "cardholder",
                    "x-struct": null,
                    "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
                  },
                  "configuration_group_id": {
                    "description": "Card Config Group ID",
                    "example": "ccg_5tgliBmzjZ6mpQPRbQjfKj",
                    "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                    "type": "string",
                    "x-context": "card_config_group",
                    "x-struct": null,
                    "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
                  },
                  "id": {
                    "description": "Plastic Card Activation ID",
                    "example": "pca_5tgliBmzjZ6mpQPRbQjfKj",
                    "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                    "readOnly": true,
                    "type": "string",
                    "x-context": "plastic_card_activation",
                    "x-struct": null,
                    "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
                  },
                  "inserted_at": {
                    "description": "Indicates when an plastic card activation was created",
                    "example": "2022-01-01T01:00:00Z",
                    "format": "date-time",
                    "readOnly": true,
                    "type": "string",
                    "x-struct": null,
                    "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.DateTimeSchema",
                    "x-validation": {}
                  },
                  "nickname": {
                    "description": "Card nickname",
                    "example": "Travel card",
                    "minLength": 5,
                    "nullable": true,
                    "type": "string",
                    "x-struct": null,
                    "x-validate": null
                  },
                  "spending_control_id": {
                    "description": "Spending Control ID",
                    "example": "spc_5tgliBmzjZ6mpQPRbQjfKj",
                    "nullable": true,
                    "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                    "type": "string",
                    "x-context": "spending_control",
                    "x-struct": null,
                    "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
                  },
                  "state": {
                    "description": "Plastic Card Activation State",
                    "enum": [
                      "pending",
                      "activated",
                      "failed",
                      "group_mismatch"
                    ],
                    "readOnly": true,
                    "type": "string",
                    "x-struct": null,
                    "x-validate": null
                  },
                  "updated_at": {
                    "description": "Indicates when an plastic card activation was updated",
                    "example": "2022-01-01T01:00:00Z",
                    "format": "date-time",
                    "readOnly": true,
                    "type": "string",
                    "x-struct": null,
                    "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.DateTimeSchema",
                    "x-validation": {}
                  },
                  "url": {
                    "description": "Contains the plastic card activation link URL",
                    "example": "https://api.cuentamono.com/v1/cards/activation_links/pca_02wI65FjIGkn1xKeYMqdey",
                    "format": "uri-reference",
                    "readOnly": true,
                    "type": "string",
                    "x-struct": null,
                    "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.URLSchema"
                  }
                },
                "required": [
                  "account_id",
                  "cardholder_id",
                  "configuration_group_id"
                ],
                "title": "PlasticCardActivation",
                "type": "object",
                "x-struct": "Elixir.MonoBankingAPI.Schemas.Cards.PlasticCardActivationSchema",
                "x-validate": null
              }
            }
          },
          "description": "Attributes for activate plastic card",
          "required": false
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlasticCardActivation"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "400 Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "401 Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "403 Forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "422 Unprocessable Entity"
          }
        },
        "summary": "Generate a URL to activate a plastic card",
        "tags": ["Cards"]
      }
    },
    "/v1/spending_controls/{spending_control_id}/targets": {
      "get": {
        "callbacks": {},
        "description": "You can use this endpoint to list spending control's targets",
        "operationId": "MonoBankingAPI.V1.SpendingControls.SpendingControlController.targets",
        "parameters": [
          {
            "description": "Number of the page",
            "in": "query",
            "name": "page_number",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "minimum": 1,
              "type": "integer",
              "x-struct": null,
              "x-validate": null
            }
          },
          {
            "description": "Amount of registers that must be listed by page",
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "default": 10,
              "example": 10,
              "maximum": 500,
              "minimum": 10,
              "type": "integer",
              "x-struct": null,
              "x-validate": null
            }
          },
          {
            "description": "Spending control ID (Base 62 format)",
            "in": "path",
            "name": "spending_control_id",
            "required": true,
            "schema": {
              "description": "Indicates the format for resource's ID",
              "example": "spc_5tgliBmzjZ6mpQPRbQjfKj",
              "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
              "type": "string",
              "x-context": "spending_control",
              "x-struct": null,
              "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ListTargetsSchema" }
              }
            },
            "description": "Successful response when getting spending control's targets"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "400 Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "401 Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "403 Forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "422 Unprocessable Entity"
          }
        },
        "summary": "List spending control's targets",
        "tags": ["Spending controls"]
      }
    },
    "/v1/ledger/transfers": {
      "post": {
        "callbacks": {},
        "description": "Transfer funds smoothly between any two of your subaccounts\n\nConsiderations:\n1. This endpoint could be only used for accounts with type `subaccount`.\n2. Both payer and receiving account should be `active`.\n3. The associated account holders should also be `active`.\n4. You can only make operations if the currency code of the payer account is the same as the currency code of the receiving account.\n5. You can only make operations if the currency code of the amount is the same as the currency code of both payer and receiving account.\n",
        "operationId": "MonoBankingAPI.V1.Ledger.Transfers.AccountTransferController.create",
        "parameters": [
          {
            "description": "Idempotency key in UUID format",
            "in": "header",
            "name": "x-idempotency-key",
            "required": false,
            "schema": {
              "description": "UUID field",
              "example": "f30f1d0b-795f-49f5-80dc-41a7bffccfde",
              "format": "uuid",
              "type": "string",
              "x-struct": null,
              "x-validate": null
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/LedgerTransfer" }
            }
          },
          "description": "Attributes used to perform the transfer",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LedgerTransfer" }
              }
            },
            "description": "Successful response to an idempotent request"
          },
          "201": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LedgerTransfer" }
              }
            },
            "description": "Successful response when the transfer is performed"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "400 Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "401 Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "403 Forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "422 Unprocessable Entity"
          }
        },
        "summary": "Perform a transfer between ledger accounts",
        "tags": ["Ledger"]
      }
    },
    "/v1/cards/{card_id}/look": {
      "get": {
        "callbacks": {},
        "description": "Gets card iframe to be embed in a web apps or sites",
        "operationId": "MonoBankingAPI.V1.Cards.CardController.get_look",
        "parameters": [
          {
            "description": "Card ID (Base 62 format)",
            "in": "path",
            "name": "card_id",
            "required": true,
            "schema": {
              "description": "Indicates the format for resource's ID",
              "example": "car_5tgliBmzjZ6mpQPRbQjfKj",
              "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
              "type": "string",
              "x-context": "card",
              "x-struct": null,
              "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CardLook" }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "400 Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "401 Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "403 Forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "422 Unprocessable Entity"
          }
        },
        "summary": "Gets information about the card look",
        "tags": ["Cards"]
      }
    },
    "/v1/ledger/accounts/{id}": {
      "patch": {
        "callbacks": {},
        "description": "Updates state of a subaccount type ledger account.\n\nConsiderations:\n1. You couldn't modify state of the canceled ledger accounts.\n2. You couldn't modify accounts where the type is different of a `subaccount`\n",
        "operationId": "MonoBankingAPI.V1.Ledger.Accounts.AccountController.update",
        "parameters": [
          {
            "description": "Account ID (Base 62 format)",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "Indicates the format for resource's ID",
              "example": "lacc_5tgliBmzjZ6mpQPRbQjfKj",
              "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
              "type": "string",
              "x-context": "ledger_account",
              "x-struct": null,
              "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LedgerAccountUpdateState"
              }
            }
          },
          "description": "Attributes to update state of a ledger account",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LedgerAccount" }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "400 Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "401 Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "403 Forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "422 Unprocessable Entity"
          }
        },
        "summary": "Updates state of a ledger account",
        "tags": ["Ledger"]
      }
    },
    "/v1/ledger/accounts/{account_id}/balance": {
      "post": {
        "callbacks": {},
        "description": "Topup or withdraw a ledger account balance.\n\nConsiderations:\n1. This endpoint could be only used for accounts with type `subaccount`.\n2. The accounts should be `active`.\n3. The associated account holder should also be `active`.\n4. You can only make operations if the currency code of the amount is the same as the currency code of the account.\n",
        "operationId": "MonoBankingAPI.V1.Ledger.Accounts.BalanceController.update",
        "parameters": [
          {
            "description": "Idempotency key in UUID format",
            "in": "header",
            "name": "x-idempotency-key",
            "required": false,
            "schema": {
              "description": "UUID field",
              "example": "f30f1d0b-795f-49f5-80dc-41a7bffccfde",
              "format": "uuid",
              "type": "string",
              "x-struct": null,
              "x-validate": null
            }
          },
          {
            "description": "Account ID (Base 62 format)",
            "in": "path",
            "name": "account_id",
            "required": true,
            "schema": {
              "description": "Indicates the format for resource's ID",
              "example": "lacc_5tgliBmzjZ6mpQPRbQjfKj",
              "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
              "type": "string",
              "x-context": "ledger_account",
              "x-struct": null,
              "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateLedgerAccountBalance"
              }
            }
          },
          "description": "Attributes to topup/withdraw an account balance",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateLedgerAccountBalance"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "400 Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "401 Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "403 Forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "422 Unprocessable Entity"
          }
        },
        "summary": "Topup or withdrawal a ledger account balance",
        "tags": ["Ledger"]
      }
    },
    "/v1/collection_intents/{id}": {
      "get": {
        "callbacks": {},
        "description": "Get collection intent detail",
        "operationId": "MonoBankingAPI.V1.CollectionLinks.CollectionIntentController.show",
        "parameters": [
          {
            "description": "Collection intent ID (Base 62 format)",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "Indicates the format for resource's ID",
              "example": "cint_5tgliBmzjZ6mpQPRbQjfKj",
              "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
              "type": "string",
              "x-context": "collection_intent",
              "x-struct": null,
              "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CollectionIntent" }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "400 Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "401 Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "403 Forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "422 Unprocessable Entity"
          }
        },
        "summary": "Get collection intent",
        "tags": ["Collection intents"]
      }
    },
    "/v1/transfers": {
      "get": {
        "callbacks": {},
        "description": "List bank transfers of your organization.\nThis endpoint allows to filters, sort, and control pagination of the transfers you want to fetch.\n\nConsiderations:\n\n- API key roles allowed to consume this endpoint are \"Administrator\", \"Preparer\", and \"Viewer\".\n",
        "operationId": "MonoBankingAPI.V1.Transfers.TransferController.index",
        "parameters": [
          {
            "description": "Number of the page",
            "in": "query",
            "name": "page_number",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "minimum": 1,
              "type": "integer",
              "x-struct": null,
              "x-validate": null
            }
          },
          {
            "description": "Amount of registers that must be listed by page",
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "default": 10,
              "example": 10,
              "maximum": 500,
              "minimum": 10,
              "type": "integer",
              "x-struct": null,
              "x-validate": null
            }
          },
          {
            "description": "Filters by the transfer ID",
            "in": "query",
            "name": "id",
            "required": false,
            "schema": {
              "description": "Indicates the format for resource's ID",
              "example": "trn_5tgliBmzjZ6mpQPRbQjfKj",
              "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
              "type": "string",
              "x-context": "transfer",
              "x-struct": null,
              "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
            }
          },
          {
            "deprecated": true,
            "description": "Filters by external ID.\nThis query param will be ignored if external_id is present.\nDeprecated; will be removed in the future. Please use the external_id query param instead.\n",
            "in": "query",
            "name": "entity_id",
            "required": false,
            "schema": {
              "description": "String field",
              "example": "123456789",
              "maxLength": 255,
              "minLength": 1,
              "type": "string",
              "x-struct": null,
              "x-validate": null
            }
          },
          {
            "description": "Filters by external ID.\nThis query param is the replacement of the entity_id.\nentity_id query param will be removed in the future.\n",
            "in": "query",
            "name": "external_id",
            "required": false,
            "schema": {
              "description": "String field",
              "example": "123456789",
              "maxLength": 255,
              "minLength": 1,
              "type": "string",
              "x-struct": null,
              "x-validate": null
            }
          },
          {
            "allowReserved": true,
            "description": "Filters transfers base on creation datetime",
            "explode": true,
            "in": "query",
            "name": "inserted_at",
            "required": false,
            "schema": {
              "properties": {
                "from": {
                  "description": "Initial datetime range in UTC",
                  "example": "2022-01-01T01:00:00Z",
                  "format": "date-time",
                  "type": "string",
                  "x-struct": null,
                  "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.DateTimeSchema",
                  "x-validation": {}
                },
                "until": {
                  "description": "End datetime range in UTC",
                  "example": "2022-01-01T01:00:00Z",
                  "format": "date-time",
                  "type": "string",
                  "x-struct": null,
                  "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.DateTimeSchema",
                  "x-validation": {}
                }
              },
              "type": "object",
              "x-struct": null,
              "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.RangeDatetime"
            },
            "style": "deepObject"
          },
          {
            "description": "Filters transfers by the specific batch were sent",
            "in": "query",
            "name": "batch_id",
            "required": false,
            "schema": {
              "description": "Indicates the format for resource's ID",
              "example": "bat_5tgliBmzjZ6mpQPRbQjfKj",
              "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
              "type": "string",
              "x-context": "batch_transfer",
              "x-struct": null,
              "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
            }
          },
          {
            "description": "Filters base on the bank account that money was moved from",
            "in": "query",
            "name": "account_id",
            "required": false,
            "schema": {
              "description": "Indicates the format for resource's ID",
              "example": "acc_5tgliBmzjZ6mpQPRbQjfKj",
              "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
              "type": "string",
              "x-context": "account",
              "x-struct": null,
              "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
            }
          },
          {
            "description": "Filters the transfers by state",
            "in": "query",
            "name": "state",
            "required": false,
            "schema": {
              "enum": [
                "created",
                "in_progress",
                "cancelled",
                "declined",
                "approved",
                "duplicated"
              ],
              "type": "string",
              "x-struct": null,
              "x-validate": null
            }
          },
          {
            "description": "Filters the transfers by a specific payee's bank account",
            "in": "query",
            "name": "payee_account_number",
            "required": false,
            "schema": {
              "description": "String field",
              "example": "string",
              "minLength": 5,
              "type": "string",
              "x-struct": null,
              "x-validate": null
            }
          },
          {
            "allowReserved": true,
            "description": "Filters the transfers by a specific payee's national document.\nNumber and type must be provided at the same time.\n",
            "explode": true,
            "in": "query",
            "name": "payee_document",
            "required": false,
            "schema": {
              "description": "Person document",
              "properties": {
                "country_code": {
                  "description": "Country code ISO 3166-1 alpha-2",
                  "example": "CO",
                  "pattern": "^[A-Z]{2}$",
                  "type": "string",
                  "x-struct": null,
                  "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.CountryCodeSchema"
                },
                "number": {
                  "description": "Document number",
                  "example": "1023711432",
                  "minLength": 5,
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                },
                "person_type": {
                  "default": "legal",
                  "description": "  The person types can be:\n  - legal,\n  - natural\n",
                  "enum": ["natural", "legal"],
                  "example": "natural",
                  "title": "PersonTypes",
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                },
                "type": {
                  "default": "CC",
                  "description": "  The document types are represented by codes and can be:\n\n  For Colombia:\n  - CC\n  - TI\n  - NUIP\n  - TE\n  - CE\n  - NIT\n  - PASS\n  - PEP\n  - PPT\n  - FDO\n  - RC\n\n  For other countries:\n  - NID (National Identification)\n  - DL (Driver License)\n  - PASS\n",
                  "enum": [
                    "CC",
                    "TI",
                    "NUIP",
                    "TE",
                    "CE",
                    "NIT",
                    "PASS",
                    "PEP",
                    "PPT",
                    "FDO",
                    "RC",
                    "DL",
                    "NID"
                  ],
                  "example": "CC",
                  "title": "DocumentTypes",
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                }
              },
              "required": ["type", "number"],
              "type": "object",
              "x-struct": null,
              "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.PersonDocumentSchema"
            },
            "style": "deepObject"
          },
          {
            "allowReserved": true,
            "description": "Sorts transfers depending on the types and fields",
            "explode": true,
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": { "field": "inserted_at", "type": "desc" },
              "properties": {
                "field": {
                  "enum": ["inserted_at", "payee_name"],
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                },
                "type": {
                  "enum": ["asc", "desc"],
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                }
              },
              "required": ["type", "field"],
              "type": "object",
              "x-struct": null,
              "x-validate": null
            },
            "style": "deepObject"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ListTransferSchema" }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "400 Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "401 Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "403 Forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "422 Unprocessable Entity"
          }
        },
        "summary": "List bank transfers",
        "tags": ["Bank transfers"]
      },
      "post": {
        "callbacks": {},
        "description": "Creates and sends a batch of bank transfers without the requiring of an additional authorization,\nthis can be between accounts of the same or different banks,\nwhich allows multiple transfers to be processed together in a single request.\n\nWhen the server receives the request, it will process it and initiate the transfer of funds\nbetween the source and destination bank accounts. This involves debiting the appropriate amount from\nthe source account, and crediting the destination account with the transferred funds.\n\nThis endpoint is used in cases where the client wants to initiate bank transfers from\ntheir own system or application, without the need to log in to their bank's website or\nuse a separate banking app. This can be useful for a variety of purposes,\nsuch as to automate financial operations, to streamline the payment process,\nor to provide a more convenient user experience.\n\nConsiderations:\n\n1. API key role allowed to consume this endpoint is \"Administrator\".\n2. The minimum number of transfers allowed per batch is 1.\n3. The maximum number of transfers allowed per batch are 1.000.\n",
        "operationId": "MonoBankingAPI.V1.Transfers.TransferController.create",
        "parameters": [
          {
            "description": "Idempotency key in UUID v4 format",
            "in": "header",
            "name": "x-idempotency-key",
            "required": false,
            "schema": {
              "description": "UUID field",
              "example": "f30f1d0b-795f-49f5-80dc-41a7bffccfde",
              "format": "uuid",
              "type": "string",
              "x-struct": null,
              "x-validate": null
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateTransferSchema" }
            }
          },
          "description": "Attributes to create a batch of transfers",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateTransferSchema"
                }
              }
            },
            "description": "When it finds the request with the same idempotency key"
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateTransferSchema"
                }
              }
            },
            "description": "When it creates the batch of transfers successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "400 Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "401 Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "403 Forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "422 Unprocessable Entity"
          }
        },
        "summary": "Create bank transfers",
        "tags": ["Bank transfers"]
      }
    },
    "/v1/ledger/account_holders/{id}": {
      "get": {
        "callbacks": {},
        "description": "Get detailed information about an account holder by ID.\n",
        "operationId": "MonoBankingAPI.V1.Ledger.AccountHolders.AccountHolderController.show",
        "parameters": [
          {
            "description": "Account Holder ID (Base 62 format)",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "Indicates the format for resource's ID",
              "example": "acch_5tgliBmzjZ6mpQPRbQjfKj",
              "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
              "type": "string",
              "x-context": "account_holder",
              "x-struct": null,
              "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LedgerAccountHolder" }
              }
            },
            "description": "Successful response when an account holder exists"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "400 Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "401 Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "403 Forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "422 Unprocessable Entity"
          }
        },
        "summary": "Get account holder information",
        "tags": ["Ledger"]
      },
      "patch": {
        "callbacks": {},
        "description": "Updates state of an third-party account holder to `active` or `blocked`\n",
        "operationId": "MonoBankingAPI.V1.Ledger.AccountHolders.AccountHolderController.update",
        "parameters": [
          {
            "description": "Account Holder ID (Base 62 format)",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "Indicates the format for resource's ID",
              "example": "acch_5tgliBmzjZ6mpQPRbQjfKj",
              "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
              "type": "string",
              "x-context": "account_holder",
              "x-struct": null,
              "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LedgerAccountHolderUpdateState"
              }
            }
          },
          "description": "Attributes to update state a third-party account holder",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LedgerAccountHolder" }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "400 Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "401 Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "403 Forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "422 Unprocessable Entity"
          }
        },
        "summary": "Updates state of an third-party account holder",
        "tags": ["Ledger"]
      }
    },
    "/v1/ledger/tenant/config": {
      "get": {
        "callbacks": {},
        "description": "Get the configuration variables tailored for your ledger environment by accessing the tenant configuration endpoint.\n",
        "operationId": "MonoBankingAPI.V1.Ledger.Tenants.TenantController.config",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LedgerTenantConfig" }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "400 Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "401 Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "403 Forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "422 Unprocessable Entity"
          }
        },
        "summary": "Get the tenant global configuration",
        "tags": ["Ledger"]
      }
    },
    "/v1/collection_intents": {
      "get": {
        "callbacks": {},
        "description": "  This endpoint allows you to list your collection intents, optionally filtered by state, account.\n  and collection link id\n",
        "operationId": "MonoBankingAPI.V1.CollectionLinks.CollectionIntentController.index",
        "parameters": [
          {
            "description": "Page number",
            "in": "query",
            "name": "page_number",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "type": "integer",
              "x-struct": null,
              "x-validate": null
            }
          },
          {
            "description": "Page size",
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "default": 10,
              "example": 10,
              "type": "integer",
              "x-struct": null,
              "x-validate": null
            }
          },
          {
            "description": "Account ID (Base 62 format)",
            "in": "query",
            "name": "account_id",
            "required": false,
            "schema": {
              "description": "Indicates the format for resource's ID",
              "example": "clink_5tgliBmzjZ6mpQPRbQjfKj",
              "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
              "type": "string",
              "x-context": "collection_link",
              "x-struct": null,
              "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
            }
          },
          {
            "description": "Collection link ID (Base 62 format)",
            "in": "query",
            "name": "collection_link_id",
            "required": false,
            "schema": {
              "description": "Indicates the format for resource's ID",
              "example": "clink_5tgliBmzjZ6mpQPRbQjfKj",
              "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
              "type": "string",
              "x-context": "collection_link",
              "x-struct": null,
              "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
            }
          },
          {
            "description": "State of the collection intents",
            "in": "query",
            "name": "state",
            "required": false,
            "schema": {
              "default": "all",
              "enum": [
                "all",
                "created",
                "in_progress",
                "approved_in_provider",
                "account_credited",
                "failed"
              ],
              "example": "approved_in_provider",
              "type": "string",
              "x-struct": null,
              "x-validate": null
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CollectionIntents" }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "400 Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "401 Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "403 Forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "422 Unprocessable Entity"
          }
        },
        "summary": "Get list of collection intents",
        "tags": ["Collection intents"]
      },
      "post": {
        "callbacks": {},
        "description": "You can use this endpoint to create a collection intent",
        "operationId": "MonoBankingAPI.V1.CollectionLinks.CollectionIntentController.create",
        "parameters": [
          {
            "description": "Idempotency key in UUID v4 format",
            "in": "header",
            "name": "x-idempotency-key",
            "required": false,
            "schema": {
              "description": "UUID field",
              "example": "f30f1d0b-795f-49f5-80dc-41a7bffccfde",
              "format": "uuid",
              "type": "string",
              "x-struct": null,
              "x-validate": null
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CollectionIntent" }
            }
          },
          "description": "Attributes to create a collection intent",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CollectionIntent" }
              }
            },
            "description": "Successful response when an indemponent request"
          },
          "201": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CollectionIntent" }
              }
            },
            "description": "Successful response when created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "400 Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "401 Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "403 Forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "422 Unprocessable Entity"
          }
        },
        "summary": "Create a collection intent",
        "tags": ["Collection intents"]
      }
    },
    "/v1/cards/activate_plastic_card": {
      "post": {
        "callbacks": {},
        "deprecated": true,
        "description": "Create an URL to activate a plastic card",
        "operationId": "MonoBankingAPI.V1.Cards.CardController.activate_plastic_card",
        "parameters": [
          {
            "description": "Idempotency key in UUID v4 format",
            "in": "header",
            "name": "x-idempotency-key",
            "required": false,
            "schema": {
              "description": "UUID field",
              "example": "f30f1d0b-795f-49f5-80dc-41a7bffccfde",
              "format": "uuid",
              "type": "string",
              "x-struct": null,
              "x-validate": null
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Plastic Card Activation Schema",
                "properties": {
                  "account_id": {
                    "description": "Account ID acc_5tgliBmzjZ6mpQPRbQjfKj or lacc_5tgliBmzjZ6mpQPRbQjfKj",
                    "example": "acc_5tgliBmzjZ6mpQPRbQjfKj",
                    "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                    "type": "string",
                    "x-context": "account",
                    "x-struct": null,
                    "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
                  },
                  "card_id": {
                    "description": "Card ID",
                    "example": "car_5tgliBmzjZ6mpQPRbQjfKj",
                    "nullable": true,
                    "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                    "readOnly": true,
                    "type": "string",
                    "x-context": "card",
                    "x-struct": null,
                    "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
                  },
                  "cardholder_id": {
                    "description": "Cardholder ID",
                    "example": "carh_5tgliBmzjZ6mpQPRbQjfKj",
                    "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                    "type": "string",
                    "x-context": "cardholder",
                    "x-struct": null,
                    "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
                  },
                  "configuration_group_id": {
                    "description": "Card Config Group ID",
                    "example": "ccg_5tgliBmzjZ6mpQPRbQjfKj",
                    "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                    "type": "string",
                    "x-context": "card_config_group",
                    "x-struct": null,
                    "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
                  },
                  "id": {
                    "description": "Plastic Card Activation ID",
                    "example": "pca_5tgliBmzjZ6mpQPRbQjfKj",
                    "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                    "readOnly": true,
                    "type": "string",
                    "x-context": "plastic_card_activation",
                    "x-struct": null,
                    "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
                  },
                  "inserted_at": {
                    "description": "Indicates when an plastic card activation was created",
                    "example": "2022-01-01T01:00:00Z",
                    "format": "date-time",
                    "readOnly": true,
                    "type": "string",
                    "x-struct": null,
                    "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.DateTimeSchema",
                    "x-validation": {}
                  },
                  "nickname": {
                    "description": "Card nickname",
                    "example": "Travel card",
                    "minLength": 5,
                    "nullable": true,
                    "type": "string",
                    "x-struct": null,
                    "x-validate": null
                  },
                  "spending_control_id": {
                    "description": "Spending Control ID",
                    "example": "spc_5tgliBmzjZ6mpQPRbQjfKj",
                    "nullable": true,
                    "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                    "type": "string",
                    "x-context": "spending_control",
                    "x-struct": null,
                    "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
                  },
                  "state": {
                    "description": "Plastic Card Activation State",
                    "enum": [
                      "pending",
                      "activated",
                      "failed",
                      "group_mismatch"
                    ],
                    "readOnly": true,
                    "type": "string",
                    "x-struct": null,
                    "x-validate": null
                  },
                  "updated_at": {
                    "description": "Indicates when an plastic card activation was updated",
                    "example": "2022-01-01T01:00:00Z",
                    "format": "date-time",
                    "readOnly": true,
                    "type": "string",
                    "x-struct": null,
                    "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.DateTimeSchema",
                    "x-validation": {}
                  },
                  "url": {
                    "description": "Contains the plastic card activation link URL",
                    "example": "https://api.cuentamono.com/v1/cards/activation_links/pca_02wI65FjIGkn1xKeYMqdey",
                    "format": "uri-reference",
                    "readOnly": true,
                    "type": "string",
                    "x-struct": null,
                    "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.URLSchema"
                  }
                },
                "required": [
                  "account_id",
                  "cardholder_id",
                  "configuration_group_id"
                ],
                "title": "PlasticCardActivation",
                "type": "object",
                "x-struct": "Elixir.MonoBankingAPI.Schemas.Cards.PlasticCardActivationSchema",
                "x-validate": null
              }
            }
          },
          "description": "Attributes for activate plastic card",
          "required": false
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlasticCardActivation"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "400 Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "401 Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "403 Forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "422 Unprocessable Entity"
          }
        },
        "summary": "Generate an URL to activate a plastic card",
        "tags": ["Cards"]
      }
    },
    "/v1/spending_controls/{spending_control_id}/remove_targets": {
      "delete": {
        "callbacks": {},
        "description": "You can use this endpoint to remove targets to a spending control",
        "operationId": "MonoBankingAPI.V1.SpendingControls.SpendingControlController.remove_targets",
        "parameters": [
          {
            "description": "Spending control ID (Base 62 format)",
            "in": "path",
            "name": "spending_control_id",
            "required": true,
            "schema": {
              "description": "Indicates the format for resource's ID",
              "example": "spc_5tgliBmzjZ6mpQPRbQjfKj",
              "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
              "type": "string",
              "x-context": "spending_control",
              "x-struct": null,
              "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SpendingControlManageTargetSchema"
              }
            }
          },
          "description": "Attributes to remove targets to a spending control",
          "required": false
        },
        "responses": {
          "204": {
            "description": "Successful response when the targets were removed to the spending control"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "400 Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "401 Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "403 Forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "422 Unprocessable Entity"
          }
        },
        "summary": "Remove targets to a spending control",
        "tags": ["Spending controls"]
      }
    },
    "/v1/ledger/account_holders/find_by": {
      "get": {
        "callbacks": {},
        "description": "  Find account holder information by external_id or document_type and document_number\n",
        "operationId": "MonoBankingAPI.V1.Ledger.AccountHolders.AccountHolderController.find_by",
        "parameters": [
          {
            "allowReserved": true,
            "description": "Filter by external id field",
            "explode": true,
            "in": "query",
            "name": "external_id",
            "required": false,
            "schema": {
              "example": "00001",
              "type": "string",
              "x-struct": null,
              "x-validate": null
            }
          },
          {
            "allowReserved": true,
            "description": "Filter by Person document info",
            "explode": true,
            "in": "query",
            "name": "person_document",
            "required": false,
            "schema": {
              "description": "Filter by document",
              "properties": {
                "country_code": {
                  "description": "Country code ISO 3166-1 alpha-2",
                  "example": "CO",
                  "pattern": "^[A-Z]{2}$",
                  "type": "string",
                  "x-struct": null,
                  "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.CountryCodeSchema"
                },
                "number": {
                  "description": "Document number",
                  "example": "1023711432",
                  "minLength": 5,
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                },
                "person_type": {
                  "default": "legal",
                  "description": "  The person types can be:\n  - legal,\n  - natural\n",
                  "enum": ["natural", "legal"],
                  "example": "natural",
                  "title": "PersonTypes",
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                },
                "type": {
                  "default": "CC",
                  "description": "  The document types are represented by codes and can be:\n\n  For Colombia:\n  - CC\n  - TI\n  - NUIP\n  - TE\n  - CE\n  - NIT\n  - PASS\n  - PEP\n  - PPT\n  - FDO\n  - RC\n\n  For other countries:\n  - NID (National Identification)\n  - DL (Driver License)\n  - PASS\n",
                  "enum": [
                    "CC",
                    "TI",
                    "NUIP",
                    "TE",
                    "CE",
                    "NIT",
                    "PASS",
                    "PEP",
                    "PPT",
                    "FDO",
                    "RC",
                    "DL",
                    "NID"
                  ],
                  "example": "CC",
                  "title": "DocumentTypes",
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                }
              },
              "required": ["type", "number"],
              "type": "object",
              "x-struct": null,
              "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.PersonDocumentSchema"
            },
            "style": "deepObject"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LedgerAccountHolder" }
              }
            },
            "description": "Successful response when an account holder exists"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "400 Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "401 Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "403 Forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "422 Unprocessable Entity"
          }
        },
        "summary": "Find account holder information",
        "tags": ["Ledger"]
      }
    },
    "/v1/cards/plastic_card_activations/{plastic_card_activation_id}": {
      "get": {
        "callbacks": {},
        "deprecated": true,
        "description": "Get plastic card activation",
        "operationId": "MonoBankingAPI.V1.Cards.CardController.fetch_plastic_card_activation",
        "parameters": [
          {
            "description": "Plastic card activation ID (Base 62 format)",
            "in": "path",
            "name": "plastic_card_activation_id",
            "required": true,
            "schema": {
              "description": "Indicates the format for resource's ID",
              "example": "pca_5tgliBmzjZ6mpQPRbQjfKj",
              "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
              "type": "string",
              "x-context": "plastic_card_activation",
              "x-struct": null,
              "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlasticCardActivation"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "400 Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "401 Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "403 Forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "422 Unprocessable Entity"
          }
        },
        "summary": "Get plastic card activation",
        "tags": ["Cards"]
      }
    },
    "/v1/cards/{card_id}/prepaid/balance": {
      "get": {
        "callbacks": {},
        "description": "Gets card balance information",
        "operationId": "MonoBankingAPI.V1.Cards.CardController.get_balance",
        "parameters": [
          {
            "description": "Card ID (Base 62 format)",
            "in": "path",
            "name": "card_id",
            "required": true,
            "schema": {
              "description": "Indicates the format for resource's ID",
              "example": "car_5tgliBmzjZ6mpQPRbQjfKj",
              "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
              "type": "string",
              "x-context": "card",
              "x-struct": null,
              "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CardBalance" }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "400 Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "401 Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "403 Forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "422 Unprocessable Entity"
          }
        },
        "summary": "Gets card balance",
        "tags": ["Cards"]
      }
    },
    "/v1/collection_links": {
      "get": {
        "callbacks": {},
        "description": "This endpoint allows you to list the created collection links",
        "operationId": "MonoBankingAPI.V1.CollectionLinks.CollectionLinkController.index",
        "parameters": [
          {
            "description": "Number of the page",
            "in": "query",
            "name": "page_number",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "minimum": 1,
              "type": "integer",
              "x-struct": null,
              "x-validate": null
            }
          },
          {
            "description": "Amount of registers that must be listed by page",
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "default": 10,
              "example": 10,
              "maximum": 500,
              "minimum": 10,
              "type": "integer",
              "x-struct": null,
              "x-validate": null
            }
          },
          {
            "description": "Filter by external id field",
            "in": "query",
            "name": "external_id",
            "required": false,
            "schema": { "type": "string", "x-struct": null, "x-validate": null }
          },
          {
            "description": "Filter by reference field, it works as not exact filter and must be sent 4 characters at least.\n",
            "in": "query",
            "name": "reference",
            "required": false,
            "schema": {
              "minLength": 4,
              "type": "string",
              "x-struct": null,
              "x-validate": null
            }
          },
          {
            "description": "Filter by enabled field",
            "in": "query",
            "name": "enabled",
            "required": false,
            "schema": {
              "type": "boolean",
              "x-struct": null,
              "x-validate": null
            }
          },
          {
            "allowReserved": true,
            "description": "Filter by payer info",
            "explode": true,
            "in": "query",
            "name": "payer",
            "required": false,
            "schema": {
              "properties": {
                "document": {
                  "description": "Filter by document",
                  "properties": {
                    "country_code": {
                      "description": "Country code ISO 3166-1 alpha-2",
                      "example": "CO",
                      "pattern": "^[A-Z]{2}$",
                      "type": "string",
                      "x-struct": null,
                      "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.CountryCodeSchema"
                    },
                    "number": {
                      "description": "Document number",
                      "example": "1023711432",
                      "minLength": 5,
                      "type": "string",
                      "x-struct": null,
                      "x-validate": null
                    },
                    "person_type": {
                      "default": "legal",
                      "description": "  The person types can be:\n  - legal,\n  - natural\n",
                      "enum": ["natural", "legal"],
                      "example": "natural",
                      "title": "PersonTypes",
                      "type": "string",
                      "x-struct": null,
                      "x-validate": null
                    },
                    "type": {
                      "default": "CC",
                      "description": "  The document types are represented by codes and can be:\n\n  For Colombia:\n  - CC\n  - TI\n  - NUIP\n  - TE\n  - CE\n  - NIT\n  - PASS\n  - PEP\n  - PPT\n  - FDO\n  - RC\n\n  For other countries:\n  - NID (National Identification)\n  - DL (Driver License)\n  - PASS\n",
                      "enum": [
                        "CC",
                        "TI",
                        "NUIP",
                        "TE",
                        "CE",
                        "NIT",
                        "PASS",
                        "PEP",
                        "PPT",
                        "FDO",
                        "RC",
                        "DL",
                        "NID"
                      ],
                      "example": "CC",
                      "title": "DocumentTypes",
                      "type": "string",
                      "x-struct": null,
                      "x-validate": null
                    }
                  },
                  "required": ["type", "number"],
                  "type": "object",
                  "x-struct": null,
                  "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.PersonDocumentSchema"
                },
                "name": {
                  "description": "Filter by payer name",
                  "example": "string",
                  "minLength": 3,
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                }
              },
              "type": "object",
              "x-struct": null,
              "x-validate": null
            },
            "style": "deepObject"
          },
          {
            "allowReserved": true,
            "description": "Filter by a range of date/time",
            "explode": true,
            "in": "query",
            "name": "inserted_at",
            "required": false,
            "schema": {
              "properties": {
                "from": {
                  "description": "Initial datetime range in UTC",
                  "example": "2022-01-01T01:00:00Z",
                  "format": "date-time",
                  "type": "string",
                  "x-struct": null,
                  "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.DateTimeSchema",
                  "x-validation": {}
                },
                "until": {
                  "description": "End datetime range in UTC",
                  "example": "2022-01-01T01:00:00Z",
                  "format": "date-time",
                  "type": "string",
                  "x-struct": null,
                  "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.DateTimeSchema",
                  "x-validation": {}
                }
              },
              "type": "object",
              "x-struct": null,
              "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.RangeDatetime"
            },
            "style": "deepObject"
          },
          {
            "allowReserved": true,
            "description": "Filter by expires_at field, it works as with range of date/time.",
            "explode": true,
            "in": "query",
            "name": "expires_at",
            "required": false,
            "schema": {
              "properties": {
                "from": {
                  "description": "Initial datetime range in UTC",
                  "example": "2022-01-01T01:00:00Z",
                  "format": "date-time",
                  "type": "string",
                  "x-struct": null,
                  "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.DateTimeSchema",
                  "x-validation": {}
                },
                "until": {
                  "description": "End datetime range in UTC",
                  "example": "2022-01-01T01:00:00Z",
                  "format": "date-time",
                  "type": "string",
                  "x-struct": null,
                  "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.DateTimeSchema",
                  "x-validation": {}
                }
              },
              "type": "object",
              "x-struct": null,
              "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.RangeDatetime"
            },
            "style": "deepObject"
          },
          {
            "allowReserved": true,
            "description": "Sorts the collection links according to the types and fields.",
            "explode": true,
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": { "field": "inserted_at", "type": "desc" },
              "properties": {
                "field": {
                  "enum": ["inserted_at"],
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                },
                "type": {
                  "enum": ["asc", "desc"],
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                }
              },
              "required": ["type", "field"],
              "type": "object",
              "x-struct": null,
              "x-validate": null
            },
            "style": "deepObject"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CollectionLinks" }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "400 Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "401 Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "403 Forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "422 Unprocessable Entity"
          }
        },
        "summary": "List of collection links",
        "tags": ["Collection links"]
      },
      "post": {
        "callbacks": {},
        "description": "This endpoint allows you to create a collection link to share it with anybody.",
        "operationId": "MonoBankingAPI.V1.CollectionLinks.CollectionLinkController.create",
        "parameters": [
          {
            "description": "Idempotency key in UUID v4 format",
            "in": "header",
            "name": "x-idempotency-key",
            "required": false,
            "schema": {
              "description": "UUID field",
              "example": "f30f1d0b-795f-49f5-80dc-41a7bffccfde",
              "format": "uuid",
              "type": "string",
              "x-struct": null,
              "x-validate": null
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CollectionLink" }
            }
          },
          "description": "Attributes to create a collection link",
          "required": false
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CollectionLink" }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "400 Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "401 Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "403 Forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "422 Unprocessable Entity"
          }
        },
        "summary": "Create a collection link",
        "tags": ["Collection links"]
      }
    },
    "/v1/collection_links/{collection_link_id}/intents": {
      "get": {
        "callbacks": {},
        "deprecated": true,
        "description": "This endpoint allows you to list the successful collection intents",
        "operationId": "MonoBankingAPI.V1.CollectionLinks.CollectionIntentController.link_intents_index",
        "parameters": [
          {
            "description": "Collection link ID (Base 62 format)",
            "in": "path",
            "name": "collection_link_id",
            "required": true,
            "schema": {
              "description": "Indicates the format for resource's ID",
              "example": "clink_5tgliBmzjZ6mpQPRbQjfKj",
              "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
              "type": "string",
              "x-context": "collection_link",
              "x-struct": null,
              "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
            }
          },
          {
            "description": "Page number",
            "in": "query",
            "name": "page_number",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "type": "integer",
              "x-struct": null,
              "x-validate": null
            }
          },
          {
            "description": "Page size",
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "default": 10,
              "example": 10,
              "type": "integer",
              "x-struct": null,
              "x-validate": null
            }
          },
          {
            "description": "State of the collection intents",
            "in": "query",
            "name": "state",
            "required": false,
            "schema": {
              "default": "all",
              "enum": [
                "all",
                "created",
                "in_progress",
                "approved_in_provider",
                "account_credited",
                "failed"
              ],
              "example": "approved_in_provider",
              "type": "string",
              "x-struct": null,
              "x-validate": null
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CollectionIntents" }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "400 Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "401 Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "403 Forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "422 Unprocessable Entity"
          }
        },
        "summary": "Get list of collection intents",
        "tags": ["Collection links"]
      }
    },
    "/v1/spending_controls/{id}": {
      "delete": {
        "callbacks": {},
        "description": "You can use this endpoint to delete a spending control",
        "operationId": "MonoBankingAPI.V1.SpendingControls.SpendingControlController.delete",
        "parameters": [
          {
            "description": "Spending control ID (Base 62 format)",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "Indicates the format for resource's ID",
              "example": "spc_5tgliBmzjZ6mpQPRbQjfKj",
              "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
              "type": "string",
              "x-context": "spending_control",
              "x-struct": null,
              "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful response when the spending control were removed"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "400 Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "401 Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "403 Forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "422 Unprocessable Entity"
          }
        },
        "summary": "Deletes a spending control",
        "tags": ["Spending controls"]
      },
      "get": {
        "callbacks": {},
        "description": "You can use this endpoint to get a spending control",
        "operationId": "MonoBankingAPI.V1.SpendingControls.SpendingControlController.show",
        "parameters": [
          {
            "description": "Spending control ID (Base 62 format)",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "Indicates the format for resource's ID",
              "example": "spc_5tgliBmzjZ6mpQPRbQjfKj",
              "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
              "type": "string",
              "x-context": "spending_control",
              "x-struct": null,
              "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SpendingControl" }
              }
            },
            "description": "Successful response when showing a spending control"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "400 Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "401 Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "403 Forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "422 Unprocessable Entity"
          }
        },
        "summary": "Get a spending control",
        "tags": ["Spending controls"]
      }
    },
    "/v1/ledger/accounts/{account_id}/transactions": {
      "get": {
        "callbacks": {},
        "description": "Gets account transactions",
        "operationId": "MonoBankingAPI.V1.Ledger.Accounts.TransactionController.index",
        "parameters": [
          {
            "description": "Number of the page",
            "in": "query",
            "name": "page_number",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "minimum": 1,
              "type": "integer",
              "x-struct": null,
              "x-validate": null
            }
          },
          {
            "description": "Amount of registers that must be listed by page",
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "default": 10,
              "example": 10,
              "maximum": 500,
              "minimum": 10,
              "type": "integer",
              "x-struct": null,
              "x-validate": null
            }
          },
          {
            "description": "Account ID (Base 62 format)",
            "in": "path",
            "name": "account_id",
            "required": true,
            "schema": {
              "description": "Indicates the format for resource's ID",
              "example": "lacc_5tgliBmzjZ6mpQPRbQjfKj",
              "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
              "type": "string",
              "x-context": "ledger_account",
              "x-struct": null,
              "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
            }
          },
          {
            "allowReserved": true,
            "description": "Filters the transactions by date time ranges when the transaction was actually performed",
            "in": "query",
            "name": "transaction_at",
            "required": false,
            "schema": {
              "properties": {
                "from": {
                  "description": "Initial datetime range in UTC",
                  "example": "2022-01-01T01:00:00Z",
                  "format": "date-time",
                  "type": "string",
                  "x-struct": null,
                  "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.DateTimeSchema",
                  "x-validation": {}
                },
                "until": {
                  "description": "End datetime range in UTC",
                  "example": "2022-01-01T01:00:00Z",
                  "format": "date-time",
                  "type": "string",
                  "x-struct": null,
                  "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.DateTimeSchema",
                  "x-validation": {}
                }
              },
              "type": "object",
              "x-struct": null,
              "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.RangeDatetime"
            },
            "style": "deepObject"
          },
          {
            "allowReserved": true,
            "description": "Filters the transactions by date time ranges when the transaction was created",
            "in": "query",
            "name": "origin_transaction_at",
            "required": false,
            "schema": {
              "properties": {
                "from": {
                  "description": "Initial datetime range in UTC",
                  "example": "2022-01-01T01:00:00Z",
                  "format": "date-time",
                  "type": "string",
                  "x-struct": null,
                  "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.DateTimeSchema",
                  "x-validation": {}
                },
                "until": {
                  "description": "End datetime range in UTC",
                  "example": "2022-01-01T01:00:00Z",
                  "format": "date-time",
                  "type": "string",
                  "x-struct": null,
                  "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.DateTimeSchema",
                  "x-validation": {}
                }
              },
              "type": "object",
              "x-struct": null,
              "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.RangeDatetime"
            },
            "style": "deepObject"
          },
          {
            "description": "Allow excluding transactions that were reversed by other transactions.",
            "in": "query",
            "name": "exclude_reversed",
            "required": false,
            "schema": {
              "default": false,
              "description": "Boolean value",
              "example": false,
              "type": "boolean",
              "x-struct": null,
              "x-validate": null
            }
          },
          {
            "description": "Filters by the four operations available (credit, debit, hold and release)",
            "in": "query",
            "name": "operation_type",
            "required": false,
            "schema": {
              "oneOf": [
                {
                  "items": {
                    "enum": ["debit", "credit", "hold", "release"],
                    "example": "credit",
                    "type": "string",
                    "x-struct": null,
                    "x-validate": null
                  },
                  "type": "array",
                  "x-struct": null,
                  "x-validate": null
                },
                {
                  "enum": ["debit", "credit", "hold", "release"],
                  "example": "credit",
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                }
              ],
              "x-struct": null,
              "x-validate": null
            }
          },
          {
            "description": "Filters by the following origins:\n  - card_transaction\n  - card_presentment_payment\n  - subaccount_operation\n  - synced_bank_transaction\n",
            "in": "query",
            "name": "origin",
            "required": false,
            "schema": {
              "oneOf": [
                {
                  "items": {
                    "example": "card_transaction",
                    "type": "string",
                    "x-struct": null,
                    "x-validate": null
                  },
                  "type": "array",
                  "x-struct": null,
                  "x-validate": null
                },
                {
                  "example": "other",
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                }
              ],
              "x-struct": null,
              "x-validate": null
            }
          },
          {
            "allowReserved": true,
            "description": "Sorts the ledger account transactions",
            "explode": true,
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": { "field": "transaction_at", "type": "desc" },
              "properties": {
                "field": {
                  "enum": ["transaction_at", "origin_transaction_at"],
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                },
                "type": {
                  "enum": ["asc", "desc"],
                  "type": "string",
                  "x-struct": null,
                  "x-validate": null
                }
              },
              "required": ["type", "field"],
              "type": "object",
              "x-struct": null,
              "x-validate": null
            },
            "style": "deepObject"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListAccountTransaction"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "400 Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "401 Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "403 Forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "422 Unprocessable Entity"
          }
        },
        "summary": "Gets account transactions",
        "tags": ["Ledger"]
      }
    },
    "/v1/ledger/accounts/{account_id}/transactions/{id}": {
      "get": {
        "callbacks": {},
        "description": "Gets an account transaction detail",
        "operationId": "MonoBankingAPI.V1.Ledger.Accounts.TransactionController.show",
        "parameters": [
          {
            "description": "Account ID that belongs to the tenant",
            "in": "path",
            "name": "account_id",
            "required": true,
            "schema": {
              "description": "Indicates the format for resource's ID",
              "example": "lacc_5tgliBmzjZ6mpQPRbQjfKj",
              "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
              "type": "string",
              "x-context": "ledger_account",
              "x-struct": null,
              "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
            }
          },
          {
            "description": "Transaction ID that belongs to the account",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "Indicates the format for resource's ID",
              "example": "ltx_5tgliBmzjZ6mpQPRbQjfKj",
              "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
              "type": "string",
              "x-context": "ledger_transaction",
              "x-struct": null,
              "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "card_presentment_payment": {
                    "value": {
                      "amount": { "amount": 100000000, "currency": "COP" },
                      "description": "Purchase on ABC Commerce",
                      "details": {
                        "fx_rate": "4000.00",
                        "id": "cpp_5tgliBmzjZ6mpQPRbQjfKj",
                        "paid_at": "1941-09-09"
                      },
                      "id": "ltx_5tgliBmzjZ6mpQPRbQjfKj",
                      "id_in_origin": "cpp_5tgliBmzjZ6mpQPRbQjfKj",
                      "operation_type": "debit",
                      "origin": "card_presentment_payment",
                      "origin_transaction_at": "2022-01-01T01:00:00Z",
                      "reverted_by_id": "ltx_5tgliBmzjZ6mpQPRbQjfKj",
                      "reverts_id": "ltx_5tgliBmzjZ6mpQPRbQjfKj",
                      "transaction_at": "2022-01-01T01:00:00Z"
                    }
                  },
                  "card_transaction": {
                    "value": {
                      "amount": { "amount": 100000000, "currency": "COP" },
                      "description": "Purchase on ABC Commerce",
                      "details": {
                        "amount": { "amount": 100000000, "currency": "COP" },
                        "card": {
                          "id": "car_5tgliBmzjZ6mpQPRbQjfKj",
                          "last_four": ""
                        },
                        "card_id": "car_5tgliBmzjZ6mpQPRbQjfKj",
                        "declination_reason": "account_blocked",
                        "id": "ctx_5tgliBmzjZ6mpQPRbQjfKj",
                        "merchant": {
                          "country": "COL",
                          "id": "10000",
                          "mcc": "1010",
                          "name": "Mono merchant"
                        },
                        "merchant_amount": {
                          "amount": 100000000,
                          "currency": "COP"
                        },
                        "merchant_name": "string",
                        "state": "approved",
                        "transaction_at": "2022-01-01T01:00:00Z",
                        "type": "authorization"
                      },
                      "id": "ltx_5tgliBmzjZ6mpQPRbQjfKj",
                      "id_in_origin": "ctx_02vc3Wvuv6WaaDM81m8Utv",
                      "operation_type": "debit",
                      "origin": "card_transaction",
                      "origin_transaction_at": "2022-01-01T01:00:00Z",
                      "reverted_by_id": "ltx_5tgliBmzjZ6mpQPRbQjfKj",
                      "reverts_id": "ltx_5tgliBmzjZ6mpQPRbQjfKj",
                      "transaction_at": "2022-01-01T01:00:00Z"
                    }
                  },
                  "subaccount_operation": {
                    "value": {
                      "amount": { "amount": 100000000, "currency": "COP" },
                      "description": "Purchase on ABC Commerce",
                      "details": {
                        "amount": { "amount": 100000000, "currency": "COP" },
                        "description": "string",
                        "destination_account_id": "lacc_5tgliBmzjZ6mpQPRbQjfKj",
                        "external_id": "string",
                        "id": "accop_5tgliBmzjZ6mpQPRbQjfKj",
                        "metadata": { "id": 3, "reference": 123 },
                        "operation_type": "topup",
                        "origin_account_id": "lacc_5tgliBmzjZ6mpQPRbQjfKj",
                        "reference": "string",
                        "state": "created",
                        "state_reasons": "insufficient_funds"
                      },
                      "id": "ltx_5tgliBmzjZ6mpQPRbQjfKj",
                      "id_in_origin": "accop_5tgliBmzjZ6mpQPRbQjfKj",
                      "operation_type": "debit",
                      "origin": "subaccount_operation",
                      "origin_transaction_at": "2022-01-01T01:00:00Z",
                      "reverted_by_id": "ltx_5tgliBmzjZ6mpQPRbQjfKj",
                      "reverts_id": "ltx_5tgliBmzjZ6mpQPRbQjfKj",
                      "transaction_at": "2022-01-01T01:00:00Z"
                    }
                  },
                  "synced_bank_transaction": {
                    "value": {
                      "amount": { "amount": 100000000, "currency": "COP" },
                      "description": "Purchase on ABC Commerce",
                      "details": { "id": "sbtx_5tgliBmzjZ6mpQPRbQjfKj" },
                      "id": "ltx_5tgliBmzjZ6mpQPRbQjfKj",
                      "id_in_origin": "sbtx_5tgliBmzjZ6mpQPRbQjfKj",
                      "operation_type": "debit",
                      "origin": "synced_bank_transaction",
                      "origin_transaction_at": "2022-01-01T01:00:00Z",
                      "reverted_by_id": "ltx_5tgliBmzjZ6mpQPRbQjfKj",
                      "reverts_id": "ltx_5tgliBmzjZ6mpQPRbQjfKj",
                      "transaction_at": "2022-01-01T01:00:00Z"
                    }
                  },
                  "unknown": {
                    "value": {
                      "amount": { "amount": 100000000, "currency": "COP" },
                      "description": "Purchase on ABC Commerce",
                      "details": null,
                      "id": "ltx_5tgliBmzjZ6mpQPRbQjfKj",
                      "id_in_origin": "018d673c-5d65-7fff-8051-e970f13f9ca1",
                      "operation_type": "debit",
                      "origin": "unknown",
                      "origin_transaction_at": "2022-01-01T01:00:00Z",
                      "reverted_by_id": "ltx_5tgliBmzjZ6mpQPRbQjfKj",
                      "reverts_id": "ltx_5tgliBmzjZ6mpQPRbQjfKj",
                      "transaction_at": "2022-01-01T01:00:00Z"
                    }
                  }
                },
                "schema": { "$ref": "#/components/schemas/AccountTransaction" }
              }
            },
            "description": "Successful response. The response details field can change according to the origin"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "400 Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "401 Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "403 Forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "422 Unprocessable Entity"
          }
        },
        "summary": "Gets an account transaction detail",
        "tags": ["Ledger"]
      }
    },
    "/v1/cards/{card_id}/token-provisioning/apple-pay": {
      "post": {
        "callbacks": {},
        "description": "You can use this endpoint to handle Apple Pay token provisioning. If you want to use this endpoint, communicate with us.",
        "operationId": "MonoBankingAPI.V1.Cards.CardController.apple_pay_token_provisioning",
        "parameters": [
          {
            "description": "Card ID (Base 62 format)",
            "in": "path",
            "name": "card_id",
            "required": true,
            "schema": {
              "description": "Indicates the format for resource's ID",
              "example": "car_5tgliBmzjZ6mpQPRbQjfKj",
              "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
              "type": "string",
              "x-context": "card",
              "x-struct": null,
              "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Attributes for Apple Pay token provisioning",
                "properties": {
                  "certificates": {
                    "description": "List of certificates for token provisioning",
                    "items": {
                      "type": "string",
                      "x-struct": null,
                      "x-validate": null
                    },
                    "type": "array",
                    "x-struct": null,
                    "x-validate": null
                  },
                  "nonce": {
                    "description": "Nonce for token provisioning",
                    "type": "string",
                    "x-struct": null,
                    "x-validate": null
                  },
                  "nonce_signature": {
                    "description": "Nonce signature for token provisioning",
                    "type": "string",
                    "x-struct": null,
                    "x-validate": null
                  }
                },
                "required": ["certificates", "nonce", "nonce_signature"],
                "title": "ApplePayTokenProvisioning",
                "type": "object",
                "x-struct": null,
                "x-validate": null
              }
            }
          },
          "description": "Attributes for Apple Pay token provisioning",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response for Apple Pay token provisioning",
                  "properties": {
                    "activation_data": {
                      "description": "Activation data for Apple Pay",
                      "readOnly": true,
                      "type": "string",
                      "x-struct": null,
                      "x-validate": null
                    },
                    "encrypted_pass_data": {
                      "description": "Encrypted pass data for Apple Pay",
                      "readOnly": true,
                      "type": "string",
                      "x-struct": null,
                      "x-validate": null
                    },
                    "ephemeral_public_key": {
                      "description": "Ephemeral public key for Apple Pay",
                      "readOnly": true,
                      "type": "string",
                      "x-struct": null,
                      "x-validate": null
                    }
                  },
                  "title": "ApplePayTokenResponse",
                  "type": "object",
                  "x-struct": null,
                  "x-validate": null
                }
              }
            },
            "description": "Successful response for Apple Pay token provisioning"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "400 Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "401 Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "403 Forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "422 Unprocessable Entity"
          }
        },
        "summary": "Apple Pay Tokenization",
        "tags": ["Cards"]
      }
    },
    "/v1/cards/{card_id}/prepaid/operations": {
      "get": {
        "callbacks": {},
        "description": "Gets card balance operations",
        "operationId": "MonoBankingAPI.V1.Cards.CardController.get_balance_operations",
        "parameters": [
          {
            "description": "Number of the page",
            "in": "query",
            "name": "page_number",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "minimum": 1,
              "type": "integer",
              "x-struct": null,
              "x-validate": null
            }
          },
          {
            "description": "Amount of registers that must be listed by page",
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "default": 10,
              "example": 10,
              "maximum": 500,
              "minimum": 10,
              "type": "integer",
              "x-struct": null,
              "x-validate": null
            }
          },
          {
            "description": "Card ID (Base 62 format)",
            "in": "path",
            "name": "card_id",
            "required": true,
            "schema": {
              "description": "Indicates the format for resource's ID",
              "example": "car_5tgliBmzjZ6mpQPRbQjfKj",
              "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
              "type": "string",
              "x-context": "card",
              "x-struct": null,
              "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
            }
          },
          {
            "allowReserved": true,
            "description": "Filters the operations by performed date and time",
            "explode": true,
            "in": "query",
            "name": "performed_at",
            "required": false,
            "schema": {
              "properties": {
                "from": {
                  "description": "Initial datetime range in UTC",
                  "example": "2022-01-01T01:00:00Z",
                  "format": "date-time",
                  "type": "string",
                  "x-struct": null,
                  "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.DateTimeSchema",
                  "x-validation": {}
                },
                "until": {
                  "description": "End datetime range in UTC",
                  "example": "2022-01-01T01:00:00Z",
                  "format": "date-time",
                  "type": "string",
                  "x-struct": null,
                  "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.DateTimeSchema",
                  "x-validation": {}
                }
              },
              "type": "object",
              "x-struct": null,
              "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.RangeDatetime"
            },
            "style": "deepObject"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListCardBalanceOperation"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "400 Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "401 Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "403 Forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "422 Unprocessable Entity"
          }
        },
        "summary": "Gets card balance operations",
        "tags": ["Cards"]
      },
      "post": {
        "callbacks": {},
        "description": "Topping up and withdrawing the card balance",
        "operationId": "MonoBankingAPI.V1.Cards.CardController.apply_balance_operation",
        "parameters": [
          {
            "description": "Idempotency key in UUID v4 format",
            "in": "header",
            "name": "x-idempotency-key",
            "required": false,
            "schema": {
              "description": "UUID field",
              "example": "f30f1d0b-795f-49f5-80dc-41a7bffccfde",
              "format": "uuid",
              "type": "string",
              "x-struct": null,
              "x-validate": null
            }
          },
          {
            "description": "Card ID (Base 62 format)",
            "in": "path",
            "name": "card_id",
            "required": true,
            "schema": {
              "description": "Indicates the format for resource's ID",
              "example": "car_5tgliBmzjZ6mpQPRbQjfKj",
              "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
              "type": "string",
              "x-context": "card",
              "x-struct": null,
              "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Represents the card balance operations like topup or withdrawal",
                "properties": {
                  "amount": {
                    "description": "deposit balance amount",
                    "properties": {
                      "amount": {
                        "description": "Amount of money in `cents` with the format is int64. Thus, you\nsend an integer \"10.000.000\", we will interpret it as \"100.000,00\"\n",
                        "example": 100000000,
                        "format": "int64",
                        "maximum": 100000000000000,
                        "minimum": -100000000000000,
                        "type": "integer",
                        "x-struct": null,
                        "x-validate": null
                      },
                      "currency": {
                        "default": "COP",
                        "description": "Currency of money",
                        "enum": ["COP"],
                        "example": "COP",
                        "type": "string",
                        "x-struct": null,
                        "x-validate": null
                      }
                    },
                    "required": ["amount", "currency"],
                    "type": "object",
                    "x-struct": null,
                    "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.MoneySchema"
                  },
                  "card_id": {
                    "description": "Indicates the format for resource's ID",
                    "example": "car_5tgliBmzjZ6mpQPRbQjfKj",
                    "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                    "readOnly": true,
                    "type": "string",
                    "x-context": "card",
                    "x-struct": null,
                    "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
                  },
                  "description": {
                    "description": "String field",
                    "example": "Topup for suscripcion",
                    "nullable": true,
                    "type": "string",
                    "x-struct": null,
                    "x-validate": null
                  },
                  "entity_id": {
                    "description": "String field",
                    "example": "Entity ID used for idempotency requests",
                    "type": "string",
                    "x-struct": null,
                    "x-validate": null
                  },
                  "id": {
                    "description": "Indicates the format for resource's ID",
                    "example": "cbo_5tgliBmzjZ6mpQPRbQjfKj",
                    "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
                    "readOnly": true,
                    "type": "string",
                    "x-context": "card_balance_operation",
                    "x-struct": null,
                    "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
                  },
                  "operation": {
                    "description": "  there are two operation types:\n  - topup: Increments the card balance.\n  - withdrawal: Reduces the card balance.\n",
                    "enum": ["topup", "withdrawal"],
                    "example": "topup",
                    "type": "string",
                    "x-struct": null,
                    "x-validate": null
                  },
                  "performed_at": {
                    "description": "Date and time when the card balance operation was performed",
                    "example": "2022-01-01T01:00:00Z",
                    "format": "date-time",
                    "readOnly": true,
                    "type": "string",
                    "x-struct": null,
                    "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.DateTimeSchema",
                    "x-validation": {}
                  }
                },
                "required": ["amount", "operation"],
                "title": "CardBalanceOperation",
                "type": "object",
                "x-struct": null,
                "x-validate": null
              }
            }
          },
          "description": "Attributes for card balance operation",
          "required": false
        },
        "responses": {
          "200": {
            "description": "Successful response when an idempotent request"
          },
          "201": { "description": "Successful response when topup is done" },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "400 Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "401 Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "403 Forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "422 Unprocessable Entity"
          }
        },
        "summary": "Topping up and withdrawing the card balance",
        "tags": ["Cards"]
      }
    },
    "/v1/collection_links/{id}": {
      "get": {
        "callbacks": {},
        "description": "This endpoint allows you to get a collection link by ID",
        "operationId": "MonoBankingAPI.V1.CollectionLinks.CollectionLinkController.show",
        "parameters": [
          {
            "description": "Collection link ID (Base 62 format)",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "Indicates the format for resource's ID",
              "example": "clink_5tgliBmzjZ6mpQPRbQjfKj",
              "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
              "type": "string",
              "x-context": "collection_link",
              "x-struct": null,
              "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CollectionLink" }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "400 Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "401 Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "403 Forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "422 Unprocessable Entity"
          }
        },
        "summary": "Get a collection link by ID",
        "tags": ["Collection links"]
      }
    },
    "/v1/ledger/cards": {
      "post": {
        "callbacks": {},
        "description": "You can use this endpoint to create cards",
        "operationId": "MonoBankingAPI.V1.Ledger.Cards.CardController.create",
        "parameters": [
          {
            "description": "Idempotency key in UUID format",
            "in": "header",
            "name": "x-idempotency-key",
            "required": false,
            "schema": {
              "description": "UUID field",
              "example": "f30f1d0b-795f-49f5-80dc-41a7bffccfde",
              "format": "uuid",
              "type": "string",
              "x-struct": null,
              "x-validate": null
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/LedgerCard" }
            }
          },
          "description": "Attributes to create a card",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LedgerCard" }
              }
            },
            "description": "Successful response when an idempotent request"
          },
          "201": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LedgerCard" }
              }
            },
            "description": "Successful response when created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "400 Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "401 Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "403 Forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "422 Unprocessable Entity"
          }
        },
        "summary": "Creates a card",
        "tags": ["Ledger"]
      }
    },
    "/v1/core/payouts": {
      "post": {
        "callbacks": {},
        "description": "Endpoint to create payouts",
        "operationId": "MonoBankingAPI.V1.Core.Payouts.PayoutController.create",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Payout" }
            }
          },
          "description": "Attributes to create a payout",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Payout" }
              }
            },
            "description": "Successful response when an idempotent request"
          },
          "201": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Payout" }
              }
            },
            "description": "Successful response when created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "400 Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "401 Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "403 Forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "422 Unprocessable Entity"
          }
        },
        "summary": "Creates a payout",
        "tags": ["Core"]
      }
    },
    "/v1/accounts/{account_id}/balances": {
      "get": {
        "callbacks": {},
        "description": "Get account balance",
        "operationId": "MonoBankingAPI.V1.BankAccounts.BalanceController.get",
        "parameters": [
          {
            "description": "Account ID (Base 62 format)",
            "in": "path",
            "name": "account_id",
            "required": true,
            "schema": {
              "description": "Indicates the format for resource's ID",
              "example": "acc_5tgliBmzjZ6mpQPRbQjfKj",
              "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
              "type": "string",
              "x-context": "account",
              "x-struct": null,
              "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
            }
          },
          {
            "description": "if true this will go to the bank and return the `real time` balance otherwise it will return the cached balance",
            "in": "query",
            "name": "live",
            "required": false,
            "schema": {
              "type": "boolean",
              "x-struct": null,
              "x-validate": null
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AccountBalance" }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "400 Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "401 Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "403 Forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "422 Unprocessable Entity"
          }
        },
        "summary": "Get balance",
        "tags": ["Accounts"]
      }
    },
    "/v1/ledger/subaccount_operations/find_successful_by": {
      "get": {
        "callbacks": {},
        "description": "  Find successful subaccount operation by external_id\n",
        "operationId": "MonoBankingAPI.V1.Ledger.SubAccountOperations.SubAccountOperationController.find_successful_by",
        "parameters": [
          {
            "allowReserved": true,
            "description": "Filter by external id field",
            "explode": true,
            "in": "query",
            "name": "external_id",
            "required": true,
            "schema": {
              "example": "00001",
              "type": "string",
              "x-struct": null,
              "x-validate": null
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubaccountOperationDetail"
                }
              }
            },
            "description": "Successful response when ansubaccount operation exists"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "400 Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "401 Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "403 Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "404 Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "422 Unprocessable Entity"
          }
        },
        "summary": "Find successful subaccount operation",
        "tags": ["Ledger"]
      }
    },
    "/v1/core/payouts/{id}": {
      "get": {
        "callbacks": {},
        "description": "Endpoint to get a payout by its ID",
        "operationId": "MonoBankingAPI.V1.Core.Payouts.PayoutController.show",
        "parameters": [
          {
            "description": "Payout ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "Indicates the format for resource's ID",
              "example": "cpout_5tgliBmzjZ6mpQPRbQjfKj",
              "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
              "type": "string",
              "x-context": "payout",
              "x-struct": null,
              "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Payout" }
              }
            },
            "description": "Successful response with payout details"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "401 Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "403 Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "404 Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "422 Unprocessable Entity"
          }
        },
        "summary": "Get payout by ID",
        "tags": ["Core"]
      }
    },
    "/v1/collection_links/{collection_link_id}/intents/{id}": {
      "get": {
        "callbacks": {},
        "deprecated": true,
        "description": "Get collection intent detail",
        "operationId": "MonoBankingAPI.V1.CollectionLinks.CollectionIntentController.link_intent_show",
        "parameters": [
          {
            "description": "Collection link ID (Base 62 format)",
            "in": "path",
            "name": "collection_link_id",
            "required": true,
            "schema": {
              "description": "Indicates the format for resource's ID",
              "example": "clink_5tgliBmzjZ6mpQPRbQjfKj",
              "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
              "type": "string",
              "x-context": "collection_link",
              "x-struct": null,
              "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
            }
          },
          {
            "description": "Collection intent ID (Base 62 format)",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "Indicates the format for resource's ID",
              "example": "cint_5tgliBmzjZ6mpQPRbQjfKj",
              "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
              "type": "string",
              "x-context": "collection_intent",
              "x-struct": null,
              "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CollectionIntent" }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "400 Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "401 Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "403 Forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "422 Unprocessable Entity"
          }
        },
        "summary": "Get collection intent",
        "tags": ["Collection links"]
      }
    },
    "/v1/accounts": {
      "get": {
        "callbacks": {},
        "description": "Get accounts",
        "operationId": "MonoBankingAPI.V1.BankAccounts.AccountController.index",
        "parameters": [
          {
            "description": "Number of the page",
            "in": "query",
            "name": "page_number",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "minimum": 1,
              "type": "integer",
              "x-struct": null,
              "x-validate": null
            }
          },
          {
            "description": "Amount of registers that must be listed by page",
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "default": 10,
              "example": 10,
              "maximum": 500,
              "minimum": 10,
              "type": "integer",
              "x-struct": null,
              "x-validate": null
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Accounts" }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "400 Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "401 Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "403 Forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "422 Unprocessable Entity"
          }
        },
        "summary": "Get accounts",
        "tags": ["Accounts"]
      }
    },
    "/v1/cards/plastic_card_activations": {
      "get": {
        "callbacks": {},
        "deprecated": true,
        "description": "List plastic card activations",
        "operationId": "MonoBankingAPI.V1.Cards.CardController.get_plastic_card_activations",
        "parameters": [
          {
            "description": "Number of the page",
            "in": "query",
            "name": "page_number",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "minimum": 1,
              "type": "integer",
              "x-struct": null,
              "x-validate": null
            }
          },
          {
            "description": "Amount of registers that must be listed by page",
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "default": 10,
              "example": 10,
              "maximum": 500,
              "minimum": 10,
              "type": "integer",
              "x-struct": null,
              "x-validate": null
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListPlasticCardActivations"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "400 Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "401 Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "403 Forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "422 Unprocessable Entity"
          }
        },
        "summary": "List plastic card activations",
        "tags": ["Cards"]
      }
    },
    "/v1/spending_controls": {
      "get": {
        "callbacks": {},
        "description": "You can use this endpoint get all the Card spending controls",
        "operationId": "MonoBankingAPI.V1.SpendingControls.SpendingControlController.index",
        "parameters": [
          {
            "description": "Number of the page",
            "in": "query",
            "name": "page_number",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "minimum": 1,
              "type": "integer",
              "x-struct": null,
              "x-validate": null
            }
          },
          {
            "description": "Amount of registers that must be listed by page",
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "default": 10,
              "example": 10,
              "maximum": 500,
              "minimum": 10,
              "type": "integer",
              "x-struct": null,
              "x-validate": null
            }
          },
          {
            "description": "Target of the spending control",
            "in": "query",
            "name": "target",
            "required": false,
            "schema": {
              "default": "card",
              "enum": ["card", "card_config_group"],
              "example": "card",
              "type": "string",
              "x-struct": null,
              "x-validate": null
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListSpendingControlSchema"
                }
              }
            },
            "description": "Successful response when getting card spending controls"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "400 Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "401 Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "403 Forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "422 Unprocessable Entity"
          }
        },
        "summary": "Gets all the Card spending controls",
        "tags": ["Spending controls"]
      },
      "post": {
        "callbacks": {},
        "description": "You can use this endpoint to create spending controls",
        "operationId": "MonoBankingAPI.V1.SpendingControls.SpendingControlController.create",
        "parameters": [
          {
            "description": "",
            "in": "header",
            "name": "x-idempotency-key",
            "required": false,
            "schema": {
              "description": "UUID field",
              "example": "f30f1d0b-795f-49f5-80dc-41a7bffccfde",
              "format": "uuid",
              "type": "string",
              "x-struct": null,
              "x-validate": null
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SpendingControl" }
            }
          },
          "description": "Attributes to create a spending control",
          "required": false
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SpendingControl" }
              }
            },
            "description": "Successful response when creating an spending control"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "400 Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "401 Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "403 Forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "422 Unprocessable Entity"
          }
        },
        "summary": "Creates a spending control",
        "tags": ["Spending controls"]
      }
    },
    "/v1/cards/{card_id}": {
      "patch": {
        "callbacks": {},
        "description": "You can use this endpoint to update cards",
        "operationId": "MonoBankingAPI.V1.Cards.CardController.update",
        "parameters": [
          {
            "description": "Card ID (Base 62 format)",
            "in": "path",
            "name": "card_id",
            "required": true,
            "schema": {
              "description": "Indicates the format for resource's ID",
              "example": "car_5tgliBmzjZ6mpQPRbQjfKj",
              "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
              "type": "string",
              "x-context": "card",
              "x-struct": null,
              "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CardUpdate" }
            }
          },
          "description": "Attributes to update a card",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Card" }
              }
            },
            "description": "Successful response when an idempotent request"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "400 Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "401 Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "403 Forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "422 Unprocessable Entity"
          }
        },
        "summary": "Update a card",
        "tags": ["Cards"]
      }
    },
    "/v1/spending_controls/{spending_control_id}/add_targets": {
      "patch": {
        "callbacks": {},
        "description": "You can use this endpoint to add target to a spending control",
        "operationId": "MonoBankingAPI.V1.SpendingControls.SpendingControlController.add_targets",
        "parameters": [
          {
            "description": "Spending control ID (Base 62 format)",
            "in": "path",
            "name": "spending_control_id",
            "required": true,
            "schema": {
              "description": "Indicates the format for resource's ID",
              "example": "spc_5tgliBmzjZ6mpQPRbQjfKj",
              "pattern": "^[A-Za-z]{2,6}_[\\w-]{22}$",
              "type": "string",
              "x-context": "spending_control",
              "x-struct": null,
              "x-validate": "Elixir.MonoBankingAPI.Schemas.Components.Base62UUIDSchema"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SpendingControlManageTargetSchema"
              }
            }
          },
          "description": "List of target IDs (Base 62 format) to add a spending control",
          "required": false
        },
        "responses": {
          "204": {
            "description": "Successful response when the target were added to the spending control"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "400 Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "401 Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "403 Forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "422 Unprocessable Entity"
          }
        },
        "summary": "Add target to a spending control",
        "tags": ["Spending controls"]
      }
    },
    "/v1/core/payouts/find_successful_by": {
      "get": {
        "callbacks": {},
        "description": "  Find successful payout by external_id\n",
        "operationId": "MonoBankingAPI.V1.Core.Payouts.PayoutController.find_successful_by",
        "parameters": [
          {
            "allowReserved": true,
            "description": "Filter by external id field",
            "explode": true,
            "in": "query",
            "name": "external_id",
            "required": true,
            "schema": {
              "description": "The external ID of the payout",
              "example": "payout-12345",
              "type": "string",
              "x-struct": null,
              "x-validate": null
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Payout" }
              }
            },
            "description": "Successful response when payout exists"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "401 Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "403 Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "404 Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "422 Unprocessable Entity"
          }
        },
        "summary": "Find successful payout by external ID",
        "tags": ["Core"]
      }
    }
  },
  "security": [{ "authorization": [] }],
  "servers": [
    { "url": "https://api.sandbox.cuentamono.com", "variables": {} },
    { "url": "https://api.cuentamono.com", "variables": {} }
  ],
  "tags": [
    {
      "description": "The account's resource is used to retrieve a full list of the account's information that the user has authorized to access.",
      "name": "Accounts"
    },
    {
      "description": "Bank transfers is used by clients to transfer funds to bank accounts.",
      "name": "Bank transfers"
    },
    {
      "description": "The collection link resource is used by clients to pre-configure the collection form.",
      "name": "Collection links"
    },
    {
      "description": "The collection intent resource is used by clients to collect money through their model business.",
      "name": "Collection intents"
    },
    {
      "description": "Ledger is used by the tenants to track account balances and transactions from their own account holders.\n",
      "name": "Ledger"
    }
  ]
}
